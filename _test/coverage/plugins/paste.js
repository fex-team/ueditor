/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['plugins/paste.js']) {
  _$jscoverage['plugins/paste.js'] = [];
  _$jscoverage['plugins/paste.js'][12] = 0;
  _$jscoverage['plugins/paste.js'][13] = 0;
  _$jscoverage['plugins/paste.js'][14] = 0;
  _$jscoverage['plugins/paste.js'][15] = 0;
  _$jscoverage['plugins/paste.js'][16] = 0;
  _$jscoverage['plugins/paste.js'][18] = 0;
  _$jscoverage['plugins/paste.js'][22] = 0;
  _$jscoverage['plugins/paste.js'][24] = 0;
  _$jscoverage['plugins/paste.js'][25] = 0;
  _$jscoverage['plugins/paste.js'][28] = 0;
  _$jscoverage['plugins/paste.js'][29] = 0;
  _$jscoverage['plugins/paste.js'][33] = 0;
  _$jscoverage['plugins/paste.js'][35] = 0;
  _$jscoverage['plugins/paste.js'][36] = 0;
  _$jscoverage['plugins/paste.js'][37] = 0;
  _$jscoverage['plugins/paste.js'][38] = 0;
  _$jscoverage['plugins/paste.js'][39] = 0;
  _$jscoverage['plugins/paste.js'][41] = 0;
  _$jscoverage['plugins/paste.js'][42] = 0;
  _$jscoverage['plugins/paste.js'][46] = 0;
  _$jscoverage['plugins/paste.js'][47] = 0;
  _$jscoverage['plugins/paste.js'][50] = 0;
  _$jscoverage['plugins/paste.js'][51] = 0;
  _$jscoverage['plugins/paste.js'][55] = 0;
  _$jscoverage['plugins/paste.js'][57] = 0;
  _$jscoverage['plugins/paste.js'][59] = 0;
  _$jscoverage['plugins/paste.js'][60] = 0;
  _$jscoverage['plugins/paste.js'][61] = 0;
  _$jscoverage['plugins/paste.js'][63] = 0;
  _$jscoverage['plugins/paste.js'][64] = 0;
  _$jscoverage['plugins/paste.js'][65] = 0;
  _$jscoverage['plugins/paste.js'][66] = 0;
  _$jscoverage['plugins/paste.js'][70] = 0;
  _$jscoverage['plugins/paste.js'][72] = 0;
  _$jscoverage['plugins/paste.js'][73] = 0;
  _$jscoverage['plugins/paste.js'][74] = 0;
  _$jscoverage['plugins/paste.js'][75] = 0;
  _$jscoverage['plugins/paste.js'][76] = 0;
  _$jscoverage['plugins/paste.js'][77] = 0;
  _$jscoverage['plugins/paste.js'][80] = 0;
  _$jscoverage['plugins/paste.js'][81] = 0;
  _$jscoverage['plugins/paste.js'][82] = 0;
  _$jscoverage['plugins/paste.js'][83] = 0;
  _$jscoverage['plugins/paste.js'][84] = 0;
  _$jscoverage['plugins/paste.js'][85] = 0;
  _$jscoverage['plugins/paste.js'][87] = 0;
  _$jscoverage['plugins/paste.js'][90] = 0;
  _$jscoverage['plugins/paste.js'][91] = 0;
  _$jscoverage['plugins/paste.js'][92] = 0;
  _$jscoverage['plugins/paste.js'][95] = 0;
  _$jscoverage['plugins/paste.js'][96] = 0;
  _$jscoverage['plugins/paste.js'][97] = 0;
  _$jscoverage['plugins/paste.js'][98] = 0;
  _$jscoverage['plugins/paste.js'][102] = 0;
  _$jscoverage['plugins/paste.js'][103] = 0;
  _$jscoverage['plugins/paste.js'][104] = 0;
  _$jscoverage['plugins/paste.js'][105] = 0;
  _$jscoverage['plugins/paste.js'][108] = 0;
  _$jscoverage['plugins/paste.js'][109] = 0;
  _$jscoverage['plugins/paste.js'][110] = 0;
  _$jscoverage['plugins/paste.js'][111] = 0;
  _$jscoverage['plugins/paste.js'][116] = 0;
  _$jscoverage['plugins/paste.js'][119] = 0;
  _$jscoverage['plugins/paste.js'][121] = 0;
  _$jscoverage['plugins/paste.js'][123] = 0;
  _$jscoverage['plugins/paste.js'][124] = 0;
  _$jscoverage['plugins/paste.js'][127] = 0;
  _$jscoverage['plugins/paste.js'][129] = 0;
  _$jscoverage['plugins/paste.js'][130] = 0;
  _$jscoverage['plugins/paste.js'][131] = 0;
  _$jscoverage['plugins/paste.js'][132] = 0;
  _$jscoverage['plugins/paste.js'][134] = 0;
  _$jscoverage['plugins/paste.js'][135] = 0;
  _$jscoverage['plugins/paste.js'][136] = 0;
  _$jscoverage['plugins/paste.js'][140] = 0;
  _$jscoverage['plugins/paste.js'][141] = 0;
  _$jscoverage['plugins/paste.js'][143] = 0;
  _$jscoverage['plugins/paste.js'][144] = 0;
  _$jscoverage['plugins/paste.js'][146] = 0;
  _$jscoverage['plugins/paste.js'][148] = 0;
  _$jscoverage['plugins/paste.js'][149] = 0;
  _$jscoverage['plugins/paste.js'][152] = 0;
  _$jscoverage['plugins/paste.js'][153] = 0;
  _$jscoverage['plugins/paste.js'][155] = 0;
  _$jscoverage['plugins/paste.js'][157] = 0;
  _$jscoverage['plugins/paste.js'][158] = 0;
  _$jscoverage['plugins/paste.js'][160] = 0;
  _$jscoverage['plugins/paste.js'][164] = 0;
  _$jscoverage['plugins/paste.js'][166] = 0;
  _$jscoverage['plugins/paste.js'][167] = 0;
  _$jscoverage['plugins/paste.js'][168] = 0;
  _$jscoverage['plugins/paste.js'][170] = 0;
  _$jscoverage['plugins/paste.js'][172] = 0;
  _$jscoverage['plugins/paste.js'][174] = 0;
  _$jscoverage['plugins/paste.js'][175] = 0;
  _$jscoverage['plugins/paste.js'][176] = 0;
  _$jscoverage['plugins/paste.js'][177] = 0;
  _$jscoverage['plugins/paste.js'][178] = 0;
  _$jscoverage['plugins/paste.js'][179] = 0;
  _$jscoverage['plugins/paste.js'][181] = 0;
  _$jscoverage['plugins/paste.js'][183] = 0;
  _$jscoverage['plugins/paste.js'][184] = 0;
  _$jscoverage['plugins/paste.js'][187] = 0;
  _$jscoverage['plugins/paste.js'][188] = 0;
  _$jscoverage['plugins/paste.js'][190] = 0;
  _$jscoverage['plugins/paste.js'][194] = 0;
  _$jscoverage['plugins/paste.js'][196] = 0;
  _$jscoverage['plugins/paste.js'][197] = 0;
  _$jscoverage['plugins/paste.js'][198] = 0;
  _$jscoverage['plugins/paste.js'][199] = 0;
  _$jscoverage['plugins/paste.js'][200] = 0;
  _$jscoverage['plugins/paste.js'][201] = 0;
  _$jscoverage['plugins/paste.js'][203] = 0;
  _$jscoverage['plugins/paste.js'][204] = 0;
  _$jscoverage['plugins/paste.js'][205] = 0;
  _$jscoverage['plugins/paste.js'][208] = 0;
  _$jscoverage['plugins/paste.js'][209] = 0;
  _$jscoverage['plugins/paste.js'][211] = 0;
  _$jscoverage['plugins/paste.js'][218] = 0;
  _$jscoverage['plugins/paste.js'][219] = 0;
  _$jscoverage['plugins/paste.js'][220] = 0;
  _$jscoverage['plugins/paste.js'][221] = 0;
  _$jscoverage['plugins/paste.js'][222] = 0;
  _$jscoverage['plugins/paste.js'][223] = 0;
  _$jscoverage['plugins/paste.js'][224] = 0;
  _$jscoverage['plugins/paste.js'][225] = 0;
  _$jscoverage['plugins/paste.js'][226] = 0;
  _$jscoverage['plugins/paste.js'][228] = 0;
  _$jscoverage['plugins/paste.js'][229] = 0;
  _$jscoverage['plugins/paste.js'][234] = 0;
  _$jscoverage['plugins/paste.js'][236] = 0;
  _$jscoverage['plugins/paste.js'][238] = 0;
  _$jscoverage['plugins/paste.js'][242] = 0;
  _$jscoverage['plugins/paste.js'][245] = 0;
  _$jscoverage['plugins/paste.js'][249] = 0;
  _$jscoverage['plugins/paste.js'][250] = 0;
  _$jscoverage['plugins/paste.js'][252] = 0;
  _$jscoverage['plugins/paste.js'][253] = 0;
  _$jscoverage['plugins/paste.js'][254] = 0;
  _$jscoverage['plugins/paste.js'][255] = 0;
  _$jscoverage['plugins/paste.js'][258] = 0;
  _$jscoverage['plugins/paste.js'][260] = 0;
  _$jscoverage['plugins/paste.js'][261] = 0;
  _$jscoverage['plugins/paste.js'][264] = 0;
  _$jscoverage['plugins/paste.js'][265] = 0;
  _$jscoverage['plugins/paste.js'][266] = 0;
  _$jscoverage['plugins/paste.js'][267] = 0;
  _$jscoverage['plugins/paste.js'][268] = 0;
  _$jscoverage['plugins/paste.js'][273] = 0;
  _$jscoverage['plugins/paste.js'][274] = 0;
  _$jscoverage['plugins/paste.js'][275] = 0;
  _$jscoverage['plugins/paste.js'][277] = 0;
  _$jscoverage['plugins/paste.js'][278] = 0;
}
_$jscoverage['plugins/paste.js'].source = ["<span class=\"c\">///import core</span>","<span class=\"c\">///import plugins/inserthtml.js</span>","<span class=\"c\">///import plugins/undo.js</span>","<span class=\"c\">///import plugins/serialize.js</span>","<span class=\"c\">///commands &#31896;&#36148;</span>","<span class=\"c\">///commandsName  PastePlain</span>","<span class=\"c\">///commandsTitle  &#32431;&#25991;&#26412;&#31896;&#36148;&#27169;&#24335;</span>","<span class=\"c\">/*</span>","<span class=\"c\"> ** @description &#31896;&#36148;</span>","<span class=\"c\"> * @author zhanyi</span>","<span class=\"c\"> */</span>","UE<span class=\"k\">.</span>plugins<span class=\"k\">[</span><span class=\"s\">'paste'</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">function</span> getClipboardData<span class=\"k\">(</span>callback<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> doc <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>document<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>doc<span class=\"k\">.</span>getElementById<span class=\"k\">(</span><span class=\"s\">'baidu_pastebin'</span><span class=\"k\">))</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">var</span> range <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>selection<span class=\"k\">.</span>getRange<span class=\"k\">(),</span>","            bk <span class=\"k\">=</span> range<span class=\"k\">.</span>createBookmark<span class=\"k\">(),</span>","        <span class=\"c\">//&#21019;&#24314;&#21098;&#36148;&#30340;&#23481;&#22120;div</span>","            pastebin <span class=\"k\">=</span> doc<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">'div'</span><span class=\"k\">);</span>","        pastebin<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"s\">'baidu_pastebin'</span><span class=\"k\">;</span>","        <span class=\"c\">// Safari &#35201;&#27714;div&#24517;&#39035;&#26377;&#20869;&#23481;&#65292;&#25165;&#33021;&#31896;&#36148;&#20869;&#23481;&#36827;&#26469;</span>","        browser<span class=\"k\">.</span>webkit <span class=\"k\">&amp;&amp;</span> pastebin<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>doc<span class=\"k\">.</span>createTextNode<span class=\"k\">(</span>domUtils<span class=\"k\">.</span>fillChar <span class=\"k\">+</span> domUtils<span class=\"k\">.</span>fillChar<span class=\"k\">));</span>","        doc<span class=\"k\">.</span>body<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>pastebin<span class=\"k\">);</span>","        <span class=\"c\">//trace:717 &#38544;&#34255;&#30340;span&#19981;&#33021;&#24471;&#21040;top</span>","        <span class=\"c\">//bk.start.innerHTML = '&amp;nbsp;';</span>","        bk<span class=\"k\">.</span>start<span class=\"k\">.</span>style<span class=\"k\">.</span>display <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span>","        pastebin<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText <span class=\"k\">=</span> <span class=\"s\">\"position:absolute;width:1px;height:1px;overflow:hidden;left:-1000px;white-space:nowrap;top:\"</span> <span class=\"k\">+</span>","            <span class=\"c\">//&#35201;&#22312;&#29616;&#22312;&#20809;&#26631;&#24179;&#34892;&#30340;&#20301;&#32622;&#21152;&#20837;&#65292;&#21542;&#21017;&#20250;&#20986;&#29616;&#36339;&#21160;&#30340;&#38382;&#39064;</span>","            domUtils<span class=\"k\">.</span>getXY<span class=\"k\">(</span>bk<span class=\"k\">.</span>start<span class=\"k\">).</span>y <span class=\"k\">+</span> <span class=\"s\">'px'</span><span class=\"k\">;</span>","","        range<span class=\"k\">.</span>selectNodeContents<span class=\"k\">(</span>pastebin<span class=\"k\">).</span>select<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","","        setTimeout<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>browser<span class=\"k\">.</span>webkit<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> pastebins <span class=\"k\">=</span> doc<span class=\"k\">.</span>querySelectorAll<span class=\"k\">(</span><span class=\"s\">'#baidu_pastebin'</span><span class=\"k\">),</span> pi<span class=\"k\">;</span> pi <span class=\"k\">=</span> pastebins<span class=\"k\">[</span>i<span class=\"k\">++];)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>domUtils<span class=\"k\">.</span>isEmptyNode<span class=\"k\">(</span>pi<span class=\"k\">))</span> <span class=\"k\">{</span>","                        domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>pi<span class=\"k\">);</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        pastebin <span class=\"k\">=</span> pi<span class=\"k\">;</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"k\">try</span> <span class=\"k\">{</span>","                pastebin<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>removeChild<span class=\"k\">(</span>pastebin<span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">}</span>","            range<span class=\"k\">.</span>moveToBookmark<span class=\"k\">(</span>bk<span class=\"k\">).</span>select<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","            callback<span class=\"k\">(</span>pastebin<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","    <span class=\"k\">var</span> txtContent<span class=\"k\">,</span> htmlContent<span class=\"k\">,</span> address<span class=\"k\">;</span>","","    <span class=\"k\">function</span> filter<span class=\"k\">(</span>div<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> html<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>div<span class=\"k\">.</span>firstChild<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">//&#21435;&#25481;cut&#20013;&#28155;&#21152;&#30340;&#36793;&#30028;&#20540;</span>","            <span class=\"k\">var</span> nodes <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span>div<span class=\"k\">,</span> <span class=\"s\">'span'</span><span class=\"k\">);</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> ni<span class=\"k\">;</span> ni <span class=\"k\">=</span> nodes<span class=\"k\">[</span>i<span class=\"k\">++];)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>ni<span class=\"k\">.</span>id <span class=\"k\">==</span> <span class=\"s\">'_baidu_cut_start'</span> <span class=\"k\">||</span> ni<span class=\"k\">.</span>id <span class=\"k\">==</span> <span class=\"s\">'_baidu_cut_end'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>ni<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>browser<span class=\"k\">.</span>webkit<span class=\"k\">)</span> <span class=\"k\">{</span>","","                <span class=\"k\">var</span> brs <span class=\"k\">=</span> div<span class=\"k\">.</span>querySelectorAll<span class=\"k\">(</span><span class=\"s\">'div br'</span><span class=\"k\">);</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> bi<span class=\"k\">;</span> bi <span class=\"k\">=</span> brs<span class=\"k\">[</span>i<span class=\"k\">++];)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> pN <span class=\"k\">=</span> bi<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>pN<span class=\"k\">.</span>tagName <span class=\"k\">==</span> <span class=\"s\">'DIV'</span> <span class=\"k\">&amp;&amp;</span> pN<span class=\"k\">.</span>childNodes<span class=\"k\">.</span>length <span class=\"k\">==</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        pN<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">'&lt;p&gt;&lt;br/&gt;&lt;/p&gt;'</span><span class=\"k\">;</span>","                        domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>pN<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                <span class=\"k\">var</span> divs <span class=\"k\">=</span> div<span class=\"k\">.</span>querySelectorAll<span class=\"k\">(</span><span class=\"s\">'#baidu_pastebin'</span><span class=\"k\">);</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> di<span class=\"k\">;</span> di <span class=\"k\">=</span> divs<span class=\"k\">[</span>i<span class=\"k\">++];)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> tmpP <span class=\"k\">=</span> me<span class=\"k\">.</span>document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">'p'</span><span class=\"k\">);</span>","                    di<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>insertBefore<span class=\"k\">(</span>tmpP<span class=\"k\">,</span> di<span class=\"k\">);</span>","                    <span class=\"k\">while</span> <span class=\"k\">(</span>di<span class=\"k\">.</span>firstChild<span class=\"k\">)</span> <span class=\"k\">{</span>","                        tmpP<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>di<span class=\"k\">.</span>firstChild<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                    domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>di<span class=\"k\">);</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">var</span> metas <span class=\"k\">=</span> div<span class=\"k\">.</span>querySelectorAll<span class=\"k\">(</span><span class=\"s\">'meta'</span><span class=\"k\">);</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> ci<span class=\"k\">;</span> ci <span class=\"k\">=</span> metas<span class=\"k\">[</span>i<span class=\"k\">++];)</span> <span class=\"k\">{</span>","                    domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>ci<span class=\"k\">);</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">var</span> brs <span class=\"k\">=</span> div<span class=\"k\">.</span>querySelectorAll<span class=\"k\">(</span><span class=\"s\">'br'</span><span class=\"k\">);</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> ci <span class=\"k\">=</span> brs<span class=\"k\">[</span>i<span class=\"k\">++];)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"s\">/^apple-/i</span><span class=\"k\">.</span>test<span class=\"k\">(</span>ci<span class=\"k\">.</span>className<span class=\"k\">))</span> <span class=\"k\">{</span>","                        domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>ci<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>browser<span class=\"k\">.</span>gecko<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> dirtyNodes <span class=\"k\">=</span> div<span class=\"k\">.</span>querySelectorAll<span class=\"k\">(</span><span class=\"s\">'[_moz_dirty]'</span><span class=\"k\">);</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> ci <span class=\"k\">=</span> dirtyNodes<span class=\"k\">[</span>i<span class=\"k\">++];)</span> <span class=\"k\">{</span>","                    ci<span class=\"k\">.</span>removeAttribute<span class=\"k\">(</span><span class=\"s\">'_moz_dirty'</span><span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>browser<span class=\"k\">.</span>ie<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> spans <span class=\"k\">=</span> div<span class=\"k\">.</span>querySelectorAll<span class=\"k\">(</span><span class=\"s\">'span.Apple-style-span'</span><span class=\"k\">);</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> ci<span class=\"k\">;</span> ci <span class=\"k\">=</span> spans<span class=\"k\">[</span>i<span class=\"k\">++];)</span> <span class=\"k\">{</span>","                    domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>ci<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">//ie&#19979;&#20351;&#29992;innerHTML&#20250;&#20135;&#29983;&#22810;&#20313;&#30340;\\r\\n&#23383;&#31526;&#65292;&#20063;&#20250;&#20135;&#29983;&amp;nbsp;&#36825;&#37324;&#36807;&#28388;&#25481;</span>","            html <span class=\"k\">=</span> div<span class=\"k\">.</span>innerHTML<span class=\"k\">;</span><span class=\"c\">//.replace(/&gt;(?:(\\s|&amp;nbsp;)*?)&lt;/g,'&gt;&lt;');</span>","","            <span class=\"c\">//&#36807;&#28388;word&#31896;&#36148;&#36807;&#26469;&#30340;&#20887;&#20313;&#23646;&#24615;</span>","            html <span class=\"k\">=</span> UE<span class=\"k\">.</span>filterWord<span class=\"k\">(</span>html<span class=\"k\">);</span>","            <span class=\"c\">//&#21462;&#28040;&#20102;&#24573;&#30053;&#31354;&#30333;&#30340;&#31532;&#20108;&#20010;&#21442;&#25968;&#65292;&#31896;&#36148;&#36807;&#26469;&#30340;&#26377;&#20123;&#26159;&#26377;&#31354;&#30333;&#30340;&#65292;&#20250;&#34987;&#22871;&#19978;&#30456;&#20851;&#30340;&#26631;&#31614;</span>","            <span class=\"k\">var</span> root <span class=\"k\">=</span> UE<span class=\"k\">.</span>htmlparser<span class=\"k\">(</span>html<span class=\"k\">);</span>","            <span class=\"c\">//&#22914;&#26524;&#32473;&#20102;&#36807;&#28388;&#35268;&#21017;&#23601;&#20808;&#36827;&#34892;&#36807;&#28388;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>me<span class=\"k\">.</span>options<span class=\"k\">.</span>filterRules<span class=\"k\">)</span> <span class=\"k\">{</span>","                UE<span class=\"k\">.</span>filterNode<span class=\"k\">(</span>root<span class=\"k\">,</span> me<span class=\"k\">.</span>options<span class=\"k\">.</span>filterRules<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"c\">//&#25191;&#34892;&#40664;&#35748;&#30340;&#22788;&#29702;</span>","            me<span class=\"k\">.</span>filterInputRule<span class=\"k\">(</span>root<span class=\"k\">);</span>","            <span class=\"c\">//&#38024;&#23545;chrome&#30340;&#22788;&#29702;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>browser<span class=\"k\">.</span>webkit<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> br <span class=\"k\">=</span> root<span class=\"k\">.</span>lastChild<span class=\"k\">();</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>br <span class=\"k\">&amp;&amp;</span> br<span class=\"k\">.</span>type <span class=\"k\">==</span> <span class=\"s\">'element'</span> <span class=\"k\">&amp;&amp;</span> br<span class=\"k\">.</span>tagName <span class=\"k\">==</span> <span class=\"s\">'br'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    root<span class=\"k\">.</span>removeChild<span class=\"k\">(</span>br<span class=\"k\">)</span>","                <span class=\"k\">}</span>","                utils<span class=\"k\">.</span>each<span class=\"k\">(</span>me<span class=\"k\">.</span>body<span class=\"k\">.</span>querySelectorAll<span class=\"k\">(</span><span class=\"s\">'div'</span><span class=\"k\">),</span> <span class=\"k\">function</span> <span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>domUtils<span class=\"k\">.</span>isEmptyBlock<span class=\"k\">(</span>node<span class=\"k\">))</span> <span class=\"k\">{</span>","                        domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>node<span class=\"k\">)</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span><span class=\"k\">)</span>","            <span class=\"k\">}</span>","            html <span class=\"k\">=</span> <span class=\"k\">{</span><span class=\"s\">'html'</span><span class=\"k\">:</span> root<span class=\"k\">.</span>toHtml<span class=\"k\">()</span><span class=\"k\">}</span><span class=\"k\">;</span>","            me<span class=\"k\">.</span>fireEvent<span class=\"k\">(</span><span class=\"s\">'beforepaste'</span><span class=\"k\">,</span> html<span class=\"k\">,</span> root<span class=\"k\">);</span>","            <span class=\"c\">//&#25250;&#20102;&#40664;&#35748;&#30340;&#31896;&#36148;&#65292;&#37027;&#21518;&#36793;&#30340;&#20869;&#23481;&#23601;&#19981;&#25191;&#34892;&#20102;&#65292;&#27604;&#22914;&#34920;&#26684;&#31896;&#36148;</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span>html<span class=\"k\">.</span>html<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            root <span class=\"k\">=</span> UE<span class=\"k\">.</span>htmlparser<span class=\"k\">(</span>html<span class=\"k\">.</span>html<span class=\"k\">,</span><span class=\"k\">true</span><span class=\"k\">);</span>","            <span class=\"c\">//&#22914;&#26524;&#24320;&#21551;&#20102;&#32431;&#25991;&#26412;&#27169;&#24335;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>me<span class=\"k\">.</span>queryCommandState<span class=\"k\">(</span><span class=\"s\">'pasteplain'</span><span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                me<span class=\"k\">.</span>execCommand<span class=\"k\">(</span><span class=\"s\">'insertHtml'</span><span class=\"k\">,</span> UE<span class=\"k\">.</span>filterNode<span class=\"k\">(</span>root<span class=\"k\">,</span> me<span class=\"k\">.</span>options<span class=\"k\">.</span>filterTxtRules<span class=\"k\">).</span>toHtml<span class=\"k\">(),</span> <span class=\"k\">true</span><span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"c\">//&#25991;&#26412;&#27169;&#24335;</span>","                UE<span class=\"k\">.</span>filterNode<span class=\"k\">(</span>root<span class=\"k\">,</span> me<span class=\"k\">.</span>options<span class=\"k\">.</span>filterTxtRules<span class=\"k\">);</span>","                txtContent <span class=\"k\">=</span> root<span class=\"k\">.</span>toHtml<span class=\"k\">();</span>","                <span class=\"c\">//&#23436;&#20840;&#27169;&#24335;</span>","                htmlContent <span class=\"k\">=</span> html<span class=\"k\">.</span>html<span class=\"k\">;</span>","","                address <span class=\"k\">=</span> me<span class=\"k\">.</span>selection<span class=\"k\">.</span>getRange<span class=\"k\">().</span>createAddress<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","                me<span class=\"k\">.</span>execCommand<span class=\"k\">(</span><span class=\"s\">'insertHtml'</span><span class=\"k\">,</span> htmlContent<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","            me<span class=\"k\">.</span>fireEvent<span class=\"k\">(</span><span class=\"s\">\"afterpaste\"</span><span class=\"k\">,</span> html<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    me<span class=\"k\">.</span>addListener<span class=\"k\">(</span><span class=\"s\">'pasteTransfer'</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>cmd<span class=\"k\">,</span> plainType<span class=\"k\">)</span> <span class=\"k\">{</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>address <span class=\"k\">&amp;&amp;</span> txtContent <span class=\"k\">&amp;&amp;</span> htmlContent <span class=\"k\">&amp;&amp;</span> txtContent <span class=\"k\">!=</span> htmlContent<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> range <span class=\"k\">=</span> me<span class=\"k\">.</span>selection<span class=\"k\">.</span>getRange<span class=\"k\">();</span>","            range<span class=\"k\">.</span>moveToAddress<span class=\"k\">(</span>address<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">);</span>","","            <span class=\"k\">if</span> <span class=\"k\">(!</span>range<span class=\"k\">.</span>collapsed<span class=\"k\">)</span> <span class=\"k\">{</span>","","                <span class=\"k\">while</span> <span class=\"k\">(!</span>domUtils<span class=\"k\">.</span>isBody<span class=\"k\">(</span>range<span class=\"k\">.</span>startContainer<span class=\"k\">)</span>","                    <span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> start <span class=\"k\">=</span> range<span class=\"k\">.</span>startContainer<span class=\"k\">;</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>start<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span><span class=\"k\">)</span><span class=\"k\">{</span>","                        start <span class=\"k\">=</span> start<span class=\"k\">.</span>childNodes<span class=\"k\">[</span>range<span class=\"k\">.</span>startOffset<span class=\"k\">];</span>","                        <span class=\"k\">if</span><span class=\"k\">(!</span>start<span class=\"k\">)</span><span class=\"k\">{</span>","                            range<span class=\"k\">.</span>setStartBefore<span class=\"k\">(</span>range<span class=\"k\">.</span>startContainer<span class=\"k\">);</span>","                            <span class=\"k\">continue</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        <span class=\"k\">var</span> pre <span class=\"k\">=</span> start<span class=\"k\">.</span>previousSibling<span class=\"k\">;</span>","","                        <span class=\"k\">if</span><span class=\"k\">(</span>pre <span class=\"k\">&amp;&amp;</span> pre<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">3</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">new</span> RegExp<span class=\"k\">(</span><span class=\"s\">'^[</span><span class=\"t\">\\n\\r\\t</span><span class=\"s\"> '</span><span class=\"k\">+</span>domUtils<span class=\"k\">.</span>fillChar<span class=\"k\">+</span><span class=\"s\">']*$'</span><span class=\"k\">).</span>test<span class=\"k\">(</span>pre<span class=\"k\">.</span>nodeValue<span class=\"k\">))</span><span class=\"k\">{</span>","                            range<span class=\"k\">.</span>setStartBefore<span class=\"k\">(</span>pre<span class=\"k\">)</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>range<span class=\"k\">.</span>startOffset <span class=\"k\">==</span> <span class=\"s\">0</span><span class=\"k\">)</span><span class=\"k\">{</span>","                        range<span class=\"k\">.</span>setStartBefore<span class=\"k\">(</span>range<span class=\"k\">.</span>startContainer<span class=\"k\">);</span>","                    <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","","                <span class=\"k\">}</span>","                <span class=\"k\">while</span> <span class=\"k\">(!</span>domUtils<span class=\"k\">.</span>isBody<span class=\"k\">(</span>range<span class=\"k\">.</span>endContainer<span class=\"k\">)</span>","                    <span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> end <span class=\"k\">=</span> range<span class=\"k\">.</span>endContainer<span class=\"k\">;</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>end<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span><span class=\"k\">)</span><span class=\"k\">{</span>","                        end <span class=\"k\">=</span> end<span class=\"k\">.</span>childNodes<span class=\"k\">[</span>range<span class=\"k\">.</span>endOffset<span class=\"k\">];</span>","                        <span class=\"k\">if</span><span class=\"k\">(!</span>end<span class=\"k\">)</span><span class=\"k\">{</span>","                            range<span class=\"k\">.</span>setEndAfter<span class=\"k\">(</span>range<span class=\"k\">.</span>endContainer<span class=\"k\">);</span>","                            <span class=\"k\">continue</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        <span class=\"k\">var</span> next <span class=\"k\">=</span> end<span class=\"k\">.</span>nextSibling<span class=\"k\">;</span>","                        <span class=\"k\">if</span><span class=\"k\">(</span>next <span class=\"k\">&amp;&amp;</span> next<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">3</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">new</span> RegExp<span class=\"k\">(</span><span class=\"s\">'^[</span><span class=\"t\">\\n\\r\\t</span><span class=\"s\">'</span><span class=\"k\">+</span>domUtils<span class=\"k\">.</span>fillChar<span class=\"k\">+</span><span class=\"s\">']*$'</span><span class=\"k\">).</span>test<span class=\"k\">(</span>next<span class=\"k\">.</span>nodeValue<span class=\"k\">))</span><span class=\"k\">{</span>","                            range<span class=\"k\">.</span>setEndAfter<span class=\"k\">(</span>next<span class=\"k\">)</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>range<span class=\"k\">.</span>endOffset <span class=\"k\">==</span> range<span class=\"k\">.</span>endContainer<span class=\"k\">[</span>range<span class=\"k\">.</span>endContainer<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">3</span> <span class=\"k\">?</span> <span class=\"s\">'nodeValue'</span> <span class=\"k\">:</span> <span class=\"s\">'childNodes'</span><span class=\"k\">].</span>length<span class=\"k\">)</span><span class=\"k\">{</span>","                        range<span class=\"k\">.</span>setEndAfter<span class=\"k\">(</span>range<span class=\"k\">.</span>endContainer<span class=\"k\">);</span>","                    <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","","                <span class=\"k\">}</span>","","            <span class=\"k\">}</span>","","            range<span class=\"k\">.</span>deleteContents<span class=\"k\">();</span>","            range<span class=\"k\">.</span>select<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","            me<span class=\"k\">.</span>__hasEnterExecCommand <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">var</span> html <span class=\"k\">=</span> htmlContent<span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>plainType <span class=\"k\">===</span> <span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                html <span class=\"k\">=</span> html<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/&lt;(\\/?)([\\w\\-]+)([^&gt;]*)&gt;/gi</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>a<span class=\"k\">,</span> b<span class=\"k\">,</span> tagName<span class=\"k\">,</span> attrs<span class=\"k\">)</span> <span class=\"k\">{</span>","                    tagName <span class=\"k\">=</span> tagName<span class=\"k\">.</span>toLowerCase<span class=\"k\">();</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">{</span>img<span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">}</span><span class=\"k\">[</span>tagName<span class=\"k\">])</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span> a<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    attrs <span class=\"k\">=</span> attrs<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/([\\w\\-]*?)\\s*=\\s*((\"([^\"]*)\")|('([^']*)')|([^\\s&gt;]+))/gi</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>str<span class=\"k\">,</span> atr<span class=\"k\">,</span> val<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">{</span>","                            <span class=\"s\">'src'</span><span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">,</span>","                            <span class=\"s\">'href'</span><span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">,</span>","                            <span class=\"s\">'name'</span><span class=\"k\">:</span> <span class=\"s\">1</span>","                        <span class=\"k\">}</span><span class=\"k\">[</span>atr<span class=\"k\">.</span>toLowerCase<span class=\"k\">()])</span> <span class=\"k\">{</span>","                            <span class=\"k\">return</span> atr <span class=\"k\">+</span> <span class=\"s\">'='</span> <span class=\"k\">+</span> val <span class=\"k\">+</span> <span class=\"s\">' '</span>","                        <span class=\"k\">}</span>","                        <span class=\"k\">return</span> <span class=\"s\">''</span>","                    <span class=\"k\">}</span><span class=\"k\">);</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">{</span>","                        <span class=\"s\">'span'</span><span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">,</span>","                        <span class=\"s\">'div'</span><span class=\"k\">:</span> <span class=\"s\">1</span>","                    <span class=\"k\">}</span><span class=\"k\">[</span>tagName<span class=\"k\">])</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span> <span class=\"s\">''</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","","                        <span class=\"k\">return</span> <span class=\"s\">'&lt;'</span> <span class=\"k\">+</span> b <span class=\"k\">+</span> tagName <span class=\"k\">+</span> <span class=\"s\">' '</span> <span class=\"k\">+</span> utils<span class=\"k\">.</span>trim<span class=\"k\">(</span>attrs<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">'&gt;'</span>","                    <span class=\"k\">}</span>","","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>plainType<span class=\"k\">)</span> <span class=\"k\">{</span>","                html <span class=\"k\">=</span> txtContent<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            me<span class=\"k\">.</span>execCommand<span class=\"k\">(</span><span class=\"s\">'inserthtml'</span><span class=\"k\">,</span> html<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">);</span>","            me<span class=\"k\">.</span>__hasEnterExecCommand <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            <span class=\"k\">var</span> rng <span class=\"k\">=</span> me<span class=\"k\">.</span>selection<span class=\"k\">.</span>getRange<span class=\"k\">();</span>","            <span class=\"k\">while</span> <span class=\"k\">(!</span>domUtils<span class=\"k\">.</span>isBody<span class=\"k\">(</span>rng<span class=\"k\">.</span>startContainer<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>rng<span class=\"k\">.</span>startOffset <span class=\"k\">&amp;&amp;</span>","                rng<span class=\"k\">.</span>startContainer<span class=\"k\">[</span>rng<span class=\"k\">.</span>startContainer<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">3</span> <span class=\"k\">?</span> <span class=\"s\">'nodeValue'</span> <span class=\"k\">:</span> <span class=\"s\">'childNodes'</span><span class=\"k\">].</span>length","                <span class=\"k\">)</span> <span class=\"k\">{</span>","                rng<span class=\"k\">.</span>setStartBefore<span class=\"k\">(</span>rng<span class=\"k\">.</span>startContainer<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">var</span> tmpAddress <span class=\"k\">=</span> rng<span class=\"k\">.</span>createAddress<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","            address<span class=\"k\">.</span>endAddress <span class=\"k\">=</span> tmpAddress<span class=\"k\">.</span>startAddress<span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    me<span class=\"k\">.</span>addListener<span class=\"k\">(</span><span class=\"s\">'ready'</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","        domUtils<span class=\"k\">.</span>on<span class=\"k\">(</span>me<span class=\"k\">.</span>body<span class=\"k\">,</span> <span class=\"s\">'cut'</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> range <span class=\"k\">=</span> me<span class=\"k\">.</span>selection<span class=\"k\">.</span>getRange<span class=\"k\">();</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>range<span class=\"k\">.</span>collapsed <span class=\"k\">&amp;&amp;</span> me<span class=\"k\">.</span>undoManger<span class=\"k\">)</span> <span class=\"k\">{</span>","                me<span class=\"k\">.</span>undoManger<span class=\"k\">.</span>save<span class=\"k\">();</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        <span class=\"c\">//ie&#19979;beforepaste&#22312;&#28857;&#20987;&#21491;&#38190;&#26102;&#20063;&#20250;&#35302;&#21457;&#65292;&#25152;&#20197;&#29992;&#30417;&#25511;&#38190;&#30424;&#25165;&#22788;&#29702;</span>","        domUtils<span class=\"k\">.</span>on<span class=\"k\">(</span>me<span class=\"k\">.</span>body<span class=\"k\">,</span> browser<span class=\"k\">.</span>ie <span class=\"k\">||</span> browser<span class=\"k\">.</span>opera <span class=\"k\">?</span> <span class=\"s\">'keydown'</span> <span class=\"k\">:</span> <span class=\"s\">'paste'</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">((</span>browser<span class=\"k\">.</span>ie <span class=\"k\">||</span> browser<span class=\"k\">.</span>opera<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">((!</span>e<span class=\"k\">.</span>ctrlKey <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>e<span class=\"k\">.</span>metaKey<span class=\"k\">)</span> <span class=\"k\">||</span> e<span class=\"k\">.</span>keyCode <span class=\"k\">!=</span> <span class=\"s\">'86'</span><span class=\"k\">))</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            getClipboardData<span class=\"k\">.</span>call<span class=\"k\">(</span>me<span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>div<span class=\"k\">)</span> <span class=\"k\">{</span>","                filter<span class=\"k\">(</span>div<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","    <span class=\"k\">}</span><span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>",""];
_$jscoverage['plugins/paste.js'][12]++;
UE.plugins.paste = (function () {
  _$jscoverage['plugins/paste.js'][13]++;
  function getClipboardData(callback) {
    _$jscoverage['plugins/paste.js'][14]++;
    var doc = this.document;
    _$jscoverage['plugins/paste.js'][15]++;
    if (doc.getElementById("baidu_pastebin")) {
      _$jscoverage['plugins/paste.js'][16]++;
      return;
    }
    _$jscoverage['plugins/paste.js'][18]++;
    var range = this.selection.getRange(), bk = range.createBookmark(), pastebin = doc.createElement("div");
    _$jscoverage['plugins/paste.js'][22]++;
    pastebin.id = "baidu_pastebin";
    _$jscoverage['plugins/paste.js'][24]++;
    (browser.webkit && pastebin.appendChild(doc.createTextNode((domUtils.fillChar + domUtils.fillChar))));
    _$jscoverage['plugins/paste.js'][25]++;
    doc.body.appendChild(pastebin);
    _$jscoverage['plugins/paste.js'][28]++;
    bk.start.style.display = "";
    _$jscoverage['plugins/paste.js'][29]++;
    pastebin.style.cssText = ("position:absolute;width:1px;height:1px;overflow:hidden;left:-1000px;white-space:nowrap;top:" + domUtils.getXY(bk.start).y + "px");
    _$jscoverage['plugins/paste.js'][33]++;
    range.selectNodeContents(pastebin).select(true);
    _$jscoverage['plugins/paste.js'][35]++;
    setTimeout((function () {
  _$jscoverage['plugins/paste.js'][36]++;
  if (browser.webkit) {
    _$jscoverage['plugins/paste.js'][37]++;
    for (var i = 0, pastebins = doc.querySelectorAll("#baidu_pastebin"), pi; (pi = pastebins[(i++)]);) {
      _$jscoverage['plugins/paste.js'][38]++;
      if (domUtils.isEmptyNode(pi)) {
        _$jscoverage['plugins/paste.js'][39]++;
        domUtils.remove(pi);
      }
      else {
        _$jscoverage['plugins/paste.js'][41]++;
        pastebin = pi;
        _$jscoverage['plugins/paste.js'][42]++;
        break;
      }
}
  }
  _$jscoverage['plugins/paste.js'][46]++;
  try {
    _$jscoverage['plugins/paste.js'][47]++;
    pastebin.parentNode.removeChild(pastebin);
  }
  catch (e) {
  }
  _$jscoverage['plugins/paste.js'][50]++;
  range.moveToBookmark(bk).select(true);
  _$jscoverage['plugins/paste.js'][51]++;
  callback(pastebin);
}), 0);
}
  _$jscoverage['plugins/paste.js'][55]++;
  var me = this;
  _$jscoverage['plugins/paste.js'][57]++;
  var txtContent, htmlContent, address;
  _$jscoverage['plugins/paste.js'][59]++;
  function filter(div) {
    _$jscoverage['plugins/paste.js'][60]++;
    var html;
    _$jscoverage['plugins/paste.js'][61]++;
    if (div.firstChild) {
      _$jscoverage['plugins/paste.js'][63]++;
      var nodes = domUtils.getElementsByTagName(div, "span");
      _$jscoverage['plugins/paste.js'][64]++;
      for (var i = 0, ni; (ni = nodes[(i++)]);) {
        _$jscoverage['plugins/paste.js'][65]++;
        if (((ni.id == "_baidu_cut_start") || (ni.id == "_baidu_cut_end"))) {
          _$jscoverage['plugins/paste.js'][66]++;
          domUtils.remove(ni);
        }
}
      _$jscoverage['plugins/paste.js'][70]++;
      if (browser.webkit) {
        _$jscoverage['plugins/paste.js'][72]++;
        var brs = div.querySelectorAll("div br");
        _$jscoverage['plugins/paste.js'][73]++;
        for (var i = 0, bi; (bi = brs[(i++)]);) {
          _$jscoverage['plugins/paste.js'][74]++;
          var pN = bi.parentNode;
          _$jscoverage['plugins/paste.js'][75]++;
          if (((pN.tagName == "DIV") && (pN.childNodes.length == 1))) {
            _$jscoverage['plugins/paste.js'][76]++;
            pN.innerHTML = "<p><br/></p>";
            _$jscoverage['plugins/paste.js'][77]++;
            domUtils.remove(pN);
          }
}
        _$jscoverage['plugins/paste.js'][80]++;
        var divs = div.querySelectorAll("#baidu_pastebin");
        _$jscoverage['plugins/paste.js'][81]++;
        for (var i = 0, di; (di = divs[(i++)]);) {
          _$jscoverage['plugins/paste.js'][82]++;
          var tmpP = me.document.createElement("p");
          _$jscoverage['plugins/paste.js'][83]++;
          di.parentNode.insertBefore(tmpP, di);
          _$jscoverage['plugins/paste.js'][84]++;
          while (di.firstChild) {
            _$jscoverage['plugins/paste.js'][85]++;
            tmpP.appendChild(di.firstChild);
}
          _$jscoverage['plugins/paste.js'][87]++;
          domUtils.remove(di);
}
        _$jscoverage['plugins/paste.js'][90]++;
        var metas = div.querySelectorAll("meta");
        _$jscoverage['plugins/paste.js'][91]++;
        for (var i = 0, ci; (ci = metas[(i++)]);) {
          _$jscoverage['plugins/paste.js'][92]++;
          domUtils.remove(ci);
}
        _$jscoverage['plugins/paste.js'][95]++;
        var brs = div.querySelectorAll("br");
        _$jscoverage['plugins/paste.js'][96]++;
        for (i = 0; (ci = brs[(i++)]);) {
          _$jscoverage['plugins/paste.js'][97]++;
          if (/^apple-/i.test(ci.className)) {
            _$jscoverage['plugins/paste.js'][98]++;
            domUtils.remove(ci);
          }
}
      }
      _$jscoverage['plugins/paste.js'][102]++;
      if (browser.gecko) {
        _$jscoverage['plugins/paste.js'][103]++;
        var dirtyNodes = div.querySelectorAll("[_moz_dirty]");
        _$jscoverage['plugins/paste.js'][104]++;
        for (i = 0; (ci = dirtyNodes[(i++)]);) {
          _$jscoverage['plugins/paste.js'][105]++;
          ci.removeAttribute("_moz_dirty");
}
      }
      _$jscoverage['plugins/paste.js'][108]++;
      if ((! browser.ie)) {
        _$jscoverage['plugins/paste.js'][109]++;
        var spans = div.querySelectorAll("span.Apple-style-span");
        _$jscoverage['plugins/paste.js'][110]++;
        for (var i = 0, ci = ci; (ci = spans[(i++)]);) {
          _$jscoverage['plugins/paste.js'][111]++;
          domUtils.remove(ci, true);
}
      }
      _$jscoverage['plugins/paste.js'][116]++;
      html = div.innerHTML;
      _$jscoverage['plugins/paste.js'][119]++;
      html = UE.filterWord(html);
      _$jscoverage['plugins/paste.js'][121]++;
      var root = UE.htmlparser(html);
      _$jscoverage['plugins/paste.js'][123]++;
      if (me.options.filterRules) {
        _$jscoverage['plugins/paste.js'][124]++;
        UE.filterNode(root, me.options.filterRules);
      }
      _$jscoverage['plugins/paste.js'][127]++;
      me.filterInputRule(root);
      _$jscoverage['plugins/paste.js'][129]++;
      if (browser.webkit) {
        _$jscoverage['plugins/paste.js'][130]++;
        var br = root.lastChild();
        _$jscoverage['plugins/paste.js'][131]++;
        if ((br && (br.type == "element") && (br.tagName == "br"))) {
          _$jscoverage['plugins/paste.js'][132]++;
          root.removeChild(br);
        }
        _$jscoverage['plugins/paste.js'][134]++;
        utils.each(me.body.querySelectorAll("div"), (function (node) {
  _$jscoverage['plugins/paste.js'][135]++;
  if (domUtils.isEmptyBlock(node)) {
    _$jscoverage['plugins/paste.js'][136]++;
    domUtils.remove(node);
  }
}));
      }
      _$jscoverage['plugins/paste.js'][140]++;
      html = {"html": root.toHtml()};
      _$jscoverage['plugins/paste.js'][141]++;
      me.fireEvent("beforepaste", html, root);
      _$jscoverage['plugins/paste.js'][143]++;
      if ((! html.html)) {
        _$jscoverage['plugins/paste.js'][144]++;
        return;
      }
      _$jscoverage['plugins/paste.js'][146]++;
      root = UE.htmlparser(html.html, true);
      _$jscoverage['plugins/paste.js'][148]++;
      if ((me.queryCommandState("pasteplain") === 1)) {
        _$jscoverage['plugins/paste.js'][149]++;
        me.execCommand("insertHtml", UE.filterNode(root, me.options.filterTxtRules).toHtml(), true);
      }
      else {
        _$jscoverage['plugins/paste.js'][152]++;
        UE.filterNode(root, me.options.filterTxtRules);
        _$jscoverage['plugins/paste.js'][153]++;
        txtContent = root.toHtml();
        _$jscoverage['plugins/paste.js'][155]++;
        htmlContent = html.html;
        _$jscoverage['plugins/paste.js'][157]++;
        address = me.selection.getRange().createAddress(true);
        _$jscoverage['plugins/paste.js'][158]++;
        me.execCommand("insertHtml", htmlContent, true);
      }
      _$jscoverage['plugins/paste.js'][160]++;
      me.fireEvent("afterpaste", html);
    }
}
  _$jscoverage['plugins/paste.js'][164]++;
  me.addListener("pasteTransfer", (function (cmd, plainType) {
  _$jscoverage['plugins/paste.js'][166]++;
  if ((address && txtContent && htmlContent && (txtContent != htmlContent))) {
    _$jscoverage['plugins/paste.js'][167]++;
    var range = me.selection.getRange();
    _$jscoverage['plugins/paste.js'][168]++;
    range.moveToAddress(address, true);
    _$jscoverage['plugins/paste.js'][170]++;
    if ((! range.collapsed)) {
      _$jscoverage['plugins/paste.js'][172]++;
      while ((! domUtils.isBody(range.startContainer))) {
        _$jscoverage['plugins/paste.js'][174]++;
        var start = range.startContainer;
        _$jscoverage['plugins/paste.js'][175]++;
        if ((start.nodeType == 1)) {
          _$jscoverage['plugins/paste.js'][176]++;
          start = start.childNodes[range.startOffset];
          _$jscoverage['plugins/paste.js'][177]++;
          if ((! start)) {
            _$jscoverage['plugins/paste.js'][178]++;
            range.setStartBefore(range.startContainer);
            _$jscoverage['plugins/paste.js'][179]++;
            continue;
          }
          _$jscoverage['plugins/paste.js'][181]++;
          var pre = start.previousSibling;
          _$jscoverage['plugins/paste.js'][183]++;
          if ((pre && (pre.nodeType == 3) && new RegExp(("^[\n\r\t " + domUtils.fillChar + "]*$")).test(pre.nodeValue))) {
            _$jscoverage['plugins/paste.js'][184]++;
            range.setStartBefore(pre);
          }
        }
        _$jscoverage['plugins/paste.js'][187]++;
        if ((range.startOffset == 0)) {
          _$jscoverage['plugins/paste.js'][188]++;
          range.setStartBefore(range.startContainer);
        }
        else {
          _$jscoverage['plugins/paste.js'][190]++;
          break;
        }
}
      _$jscoverage['plugins/paste.js'][194]++;
      while ((! domUtils.isBody(range.endContainer))) {
        _$jscoverage['plugins/paste.js'][196]++;
        var end = range.endContainer;
        _$jscoverage['plugins/paste.js'][197]++;
        if ((end.nodeType == 1)) {
          _$jscoverage['plugins/paste.js'][198]++;
          end = end.childNodes[range.endOffset];
          _$jscoverage['plugins/paste.js'][199]++;
          if ((! end)) {
            _$jscoverage['plugins/paste.js'][200]++;
            range.setEndAfter(range.endContainer);
            _$jscoverage['plugins/paste.js'][201]++;
            continue;
          }
          _$jscoverage['plugins/paste.js'][203]++;
          var next = end.nextSibling;
          _$jscoverage['plugins/paste.js'][204]++;
          if ((next && (next.nodeType == 3) && new RegExp(("^[\n\r\t" + domUtils.fillChar + "]*$")).test(next.nodeValue))) {
            _$jscoverage['plugins/paste.js'][205]++;
            range.setEndAfter(next);
          }
        }
        _$jscoverage['plugins/paste.js'][208]++;
        if ((range.endOffset == range.endContainer[((range.endContainer.nodeType == 3)? "nodeValue": "childNodes")].length)) {
          _$jscoverage['plugins/paste.js'][209]++;
          range.setEndAfter(range.endContainer);
        }
        else {
          _$jscoverage['plugins/paste.js'][211]++;
          break;
        }
}
    }
    _$jscoverage['plugins/paste.js'][218]++;
    range.deleteContents();
    _$jscoverage['plugins/paste.js'][219]++;
    range.select(true);
    _$jscoverage['plugins/paste.js'][220]++;
    me.__hasEnterExecCommand = true;
    _$jscoverage['plugins/paste.js'][221]++;
    var html = htmlContent;
    _$jscoverage['plugins/paste.js'][222]++;
    if ((plainType === 2)) {
      _$jscoverage['plugins/paste.js'][223]++;
      html = html.replace(/<(\/?)([\w\-]+)([^>]*)>/gi, (function (a, b, tagName, attrs) {
  _$jscoverage['plugins/paste.js'][224]++;
  tagName = tagName.toLowerCase();
  _$jscoverage['plugins/paste.js'][225]++;
  if ({img: 1}[tagName]) {
    _$jscoverage['plugins/paste.js'][226]++;
    return a;
  }
  _$jscoverage['plugins/paste.js'][228]++;
  attrs = attrs.replace(/([\w\-]*?)\s*=\s*(("([^"]*)")|('([^']*)')|([^\s>]+))/gi, (function (str, atr, val) {
  _$jscoverage['plugins/paste.js'][229]++;
  if ({"src": 1, "href": 1, "name": 1}[atr.toLowerCase()]) {
    _$jscoverage['plugins/paste.js'][234]++;
    return (atr + "=" + val + " ");
  }
  _$jscoverage['plugins/paste.js'][236]++;
  return "";
}));
  _$jscoverage['plugins/paste.js'][238]++;
  if ({"span": 1, "div": 1}[tagName]) {
    _$jscoverage['plugins/paste.js'][242]++;
    return "";
  }
  else {
    _$jscoverage['plugins/paste.js'][245]++;
    return ("<" + b + tagName + " " + utils.trim(attrs) + ">");
  }
}));
    }
    else {
      _$jscoverage['plugins/paste.js'][249]++;
      if (plainType) {
        _$jscoverage['plugins/paste.js'][250]++;
        html = txtContent;
      }
    }
    _$jscoverage['plugins/paste.js'][252]++;
    me.execCommand("inserthtml", html, true);
    _$jscoverage['plugins/paste.js'][253]++;
    me.__hasEnterExecCommand = false;
    _$jscoverage['plugins/paste.js'][254]++;
    var rng = me.selection.getRange();
    _$jscoverage['plugins/paste.js'][255]++;
    while (((! domUtils.isBody(rng.startContainer)) && (! rng.startOffset) && rng.startContainer[((rng.startContainer.nodeType == 3)? "nodeValue": "childNodes")].length)) {
      _$jscoverage['plugins/paste.js'][258]++;
      rng.setStartBefore(rng.startContainer);
}
    _$jscoverage['plugins/paste.js'][260]++;
    var tmpAddress = rng.createAddress(true);
    _$jscoverage['plugins/paste.js'][261]++;
    address.endAddress = tmpAddress.startAddress;
  }
}));
  _$jscoverage['plugins/paste.js'][264]++;
  me.addListener("ready", (function () {
  _$jscoverage['plugins/paste.js'][265]++;
  domUtils.on(me.body, "cut", (function () {
  _$jscoverage['plugins/paste.js'][266]++;
  var range = me.selection.getRange();
  _$jscoverage['plugins/paste.js'][267]++;
  if (((! range.collapsed) && me.undoManger)) {
    _$jscoverage['plugins/paste.js'][268]++;
    me.undoManger.save();
  }
}));
  _$jscoverage['plugins/paste.js'][273]++;
  domUtils.on(me.body, ((browser.ie || browser.opera)? "keydown": "paste"), (function (e) {
  _$jscoverage['plugins/paste.js'][274]++;
  if (((browser.ie || browser.opera) && (((! e.ctrlKey) && (! e.metaKey)) || (e.keyCode != "86")))) {
    _$jscoverage['plugins/paste.js'][275]++;
    return;
  }
  _$jscoverage['plugins/paste.js'][277]++;
  getClipboardData.call(me, (function (div) {
  _$jscoverage['plugins/paste.js'][278]++;
  filter(div);
}));
}));
}));
});
