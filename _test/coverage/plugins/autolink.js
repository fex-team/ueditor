/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['plugins/autolink.js']) {
  _$jscoverage['plugins/autolink.js'] = [];
  _$jscoverage['plugins/autolink.js'][9] = 0;
  _$jscoverage['plugins/autolink.js'][10] = 0;
  _$jscoverage['plugins/autolink.js'][11] = 0;
  _$jscoverage['plugins/autolink.js'][12] = 0;
  _$jscoverage['plugins/autolink.js'][14] = 0;
  _$jscoverage['plugins/autolink.js'][15] = 0;
  _$jscoverage['plugins/autolink.js'][16] = 0;
  _$jscoverage['plugins/autolink.js'][18] = 0;
  _$jscoverage['plugins/autolink.js'][19] = 0;
  _$jscoverage['plugins/autolink.js'][21] = 0;
  _$jscoverage['plugins/autolink.js'][23] = 0;
  _$jscoverage['plugins/autolink.js'][28] = 0;
  _$jscoverage['plugins/autolink.js'][29] = 0;
  _$jscoverage['plugins/autolink.js'][30] = 0;
  _$jscoverage['plugins/autolink.js'][31] = 0;
  _$jscoverage['plugins/autolink.js'][32] = 0;
  _$jscoverage['plugins/autolink.js'][34] = 0;
  _$jscoverage['plugins/autolink.js'][35] = 0;
  _$jscoverage['plugins/autolink.js'][36] = 0;
  _$jscoverage['plugins/autolink.js'][39] = 0;
  _$jscoverage['plugins/autolink.js'][40] = 0;
  _$jscoverage['plugins/autolink.js'][41] = 0;
  _$jscoverage['plugins/autolink.js'][43] = 0;
  _$jscoverage['plugins/autolink.js'][44] = 0;
  _$jscoverage['plugins/autolink.js'][46] = 0;
  _$jscoverage['plugins/autolink.js'][47] = 0;
  _$jscoverage['plugins/autolink.js'][49] = 0;
  _$jscoverage['plugins/autolink.js'][51] = 0;
  _$jscoverage['plugins/autolink.js'][52] = 0;
  _$jscoverage['plugins/autolink.js'][54] = 0;
  _$jscoverage['plugins/autolink.js'][55] = 0;
  _$jscoverage['plugins/autolink.js'][58] = 0;
  _$jscoverage['plugins/autolink.js'][59] = 0;
  _$jscoverage['plugins/autolink.js'][60] = 0;
  _$jscoverage['plugins/autolink.js'][61] = 0;
  _$jscoverage['plugins/autolink.js'][63] = 0;
  _$jscoverage['plugins/autolink.js'][64] = 0;
  _$jscoverage['plugins/autolink.js'][67] = 0;
  _$jscoverage['plugins/autolink.js'][68] = 0;
  _$jscoverage['plugins/autolink.js'][69] = 0;
  _$jscoverage['plugins/autolink.js'][70] = 0;
  _$jscoverage['plugins/autolink.js'][72] = 0;
  _$jscoverage['plugins/autolink.js'][75] = 0;
  _$jscoverage['plugins/autolink.js'][81] = 0;
  _$jscoverage['plugins/autolink.js'][82] = 0;
  _$jscoverage['plugins/autolink.js'][84] = 0;
  _$jscoverage['plugins/autolink.js'][86] = 0;
  _$jscoverage['plugins/autolink.js'][87] = 0;
  _$jscoverage['plugins/autolink.js'][88] = 0;
  _$jscoverage['plugins/autolink.js'][89] = 0;
  _$jscoverage['plugins/autolink.js'][90] = 0;
  _$jscoverage['plugins/autolink.js'][91] = 0;
  _$jscoverage['plugins/autolink.js'][92] = 0;
  _$jscoverage['plugins/autolink.js'][94] = 0;
  _$jscoverage['plugins/autolink.js'][95] = 0;
  _$jscoverage['plugins/autolink.js'][96] = 0;
  _$jscoverage['plugins/autolink.js'][97] = 0;
  _$jscoverage['plugins/autolink.js'][98] = 0;
  _$jscoverage['plugins/autolink.js'][99] = 0;
  _$jscoverage['plugins/autolink.js'][100] = 0;
}
_$jscoverage['plugins/autolink.js'].source = ["<span class=\"c\">///import core</span>","<span class=\"c\">///commands &#20026;&#38750;ie&#27983;&#35272;&#22120;&#33258;&#21160;&#28155;&#21152;a&#26631;&#31614;</span>","<span class=\"c\">///commandsName  AutoLink</span>","<span class=\"c\">///commandsTitle  &#33258;&#21160;&#22686;&#21152;&#38142;&#25509;</span>","<span class=\"c\">/*</span>","<span class=\"c\"> * @description &#20026;&#38750;ie&#27983;&#35272;&#22120;&#33258;&#21160;&#28155;&#21152;a&#26631;&#31614;</span>","<span class=\"c\"> * @author zhanyi</span>","<span class=\"c\"> */</span>","    UE<span class=\"k\">.</span>plugins<span class=\"k\">[</span><span class=\"s\">'autolink'</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> cont <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>browser<span class=\"k\">.</span>ie<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","        me<span class=\"k\">.</span>addListener<span class=\"k\">(</span><span class=\"s\">'reset'</span><span class=\"k\">,</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","           cont <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","        me<span class=\"k\">.</span>addListener<span class=\"k\">(</span><span class=\"s\">'keydown'</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>type<span class=\"k\">,</span> evt<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> keyCode <span class=\"k\">=</span> evt<span class=\"k\">.</span>keyCode <span class=\"k\">||</span> evt<span class=\"k\">.</span>which<span class=\"k\">;</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>keyCode <span class=\"k\">==</span> <span class=\"s\">32</span> <span class=\"k\">||</span> keyCode <span class=\"k\">==</span> <span class=\"s\">13</span><span class=\"k\">)</span> <span class=\"k\">{</span>","","                <span class=\"k\">var</span> sel <span class=\"k\">=</span> me<span class=\"k\">.</span>selection<span class=\"k\">.</span>getNative<span class=\"k\">(),</span>","                    range <span class=\"k\">=</span> sel<span class=\"k\">.</span>getRangeAt<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">).</span>cloneRange<span class=\"k\">(),</span>","                    offset<span class=\"k\">,</span>","                    charCode<span class=\"k\">;</span>","","                <span class=\"k\">var</span> start <span class=\"k\">=</span> range<span class=\"k\">.</span>startContainer<span class=\"k\">;</span>","                <span class=\"k\">while</span> <span class=\"k\">(</span>start<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span> <span class=\"k\">&amp;&amp;</span> range<span class=\"k\">.</span>startOffset <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    start <span class=\"k\">=</span> range<span class=\"k\">.</span>startContainer<span class=\"k\">.</span>childNodes<span class=\"k\">[</span>range<span class=\"k\">.</span>startOffset <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">];</span>","                    <span class=\"k\">if</span> <span class=\"k\">(!</span>start<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    range<span class=\"k\">.</span>setStart<span class=\"k\">(</span>start<span class=\"k\">,</span> start<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span> <span class=\"k\">?</span> start<span class=\"k\">.</span>childNodes<span class=\"k\">.</span>length <span class=\"k\">:</span> start<span class=\"k\">.</span>nodeValue<span class=\"k\">.</span>length<span class=\"k\">);</span>","                    range<span class=\"k\">.</span>collapse<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","                    start <span class=\"k\">=</span> range<span class=\"k\">.</span>startContainer<span class=\"k\">;</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">do</span><span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>range<span class=\"k\">.</span>startOffset <span class=\"k\">==</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        start <span class=\"k\">=</span> range<span class=\"k\">.</span>startContainer<span class=\"k\">.</span>previousSibling<span class=\"k\">;</span>","","                        <span class=\"k\">while</span> <span class=\"k\">(</span>start <span class=\"k\">&amp;&amp;</span> start<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                            start <span class=\"k\">=</span> start<span class=\"k\">.</span>lastChild<span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        <span class=\"k\">if</span> <span class=\"k\">(!</span>start <span class=\"k\">||</span> domUtils<span class=\"k\">.</span>isFillChar<span class=\"k\">(</span>start<span class=\"k\">))</span><span class=\"k\">{</span>","                            <span class=\"k\">break</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        offset <span class=\"k\">=</span> start<span class=\"k\">.</span>nodeValue<span class=\"k\">.</span>length<span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        start <span class=\"k\">=</span> range<span class=\"k\">.</span>startContainer<span class=\"k\">;</span>","                        offset <span class=\"k\">=</span> range<span class=\"k\">.</span>startOffset<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    range<span class=\"k\">.</span>setStart<span class=\"k\">(</span>start<span class=\"k\">,</span> offset <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">);</span>","                    charCode <span class=\"k\">=</span> range<span class=\"k\">.</span>toString<span class=\"k\">().</span>charCodeAt<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">);</span>","                <span class=\"k\">}</span> <span class=\"k\">while</span> <span class=\"k\">(</span>charCode <span class=\"k\">!=</span> <span class=\"s\">160</span> <span class=\"k\">&amp;&amp;</span> charCode <span class=\"k\">!=</span> <span class=\"s\">32</span><span class=\"k\">);</span>","","                <span class=\"k\">if</span> <span class=\"k\">(</span>range<span class=\"k\">.</span>toString<span class=\"k\">().</span>replace<span class=\"k\">(</span><span class=\"k\">new</span> RegExp<span class=\"k\">(</span>domUtils<span class=\"k\">.</span>fillChar<span class=\"k\">,</span> <span class=\"s\">'g'</span><span class=\"k\">),</span> <span class=\"s\">''</span><span class=\"k\">).</span>match<span class=\"k\">(</span><span class=\"s\">/(?:https?:\\/\\/|ssh:\\/\\/|ftp:\\/\\/|file:\\/|www\\.)/i</span><span class=\"k\">))</span> <span class=\"k\">{</span>","                    <span class=\"k\">while</span><span class=\"k\">(</span>range<span class=\"k\">.</span>toString<span class=\"k\">().</span>length<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"s\">/^(?:https?:\\/\\/|ssh:\\/\\/|ftp:\\/\\/|file:\\/|www\\.)/i</span><span class=\"k\">.</span>test<span class=\"k\">(</span>range<span class=\"k\">.</span>toString<span class=\"k\">()))</span><span class=\"k\">{</span>","                            <span class=\"k\">break</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        <span class=\"k\">try</span><span class=\"k\">{</span>","                            range<span class=\"k\">.</span>setStart<span class=\"k\">(</span>range<span class=\"k\">.</span>startContainer<span class=\"k\">,</span>range<span class=\"k\">.</span>startOffset<span class=\"k\">+</span><span class=\"s\">1</span><span class=\"k\">);</span>","                        <span class=\"k\">}</span><span class=\"k\">catch</span><span class=\"k\">(</span>e<span class=\"k\">)</span><span class=\"k\">{</span>","                            <span class=\"c\">//trace:2121</span>","                            <span class=\"k\">var</span> start <span class=\"k\">=</span> range<span class=\"k\">.</span>startContainer<span class=\"k\">;</span>","                            <span class=\"k\">while</span><span class=\"k\">(!(</span>next <span class=\"k\">=</span> start<span class=\"k\">.</span>nextSibling<span class=\"k\">))</span><span class=\"k\">{</span>","                                <span class=\"k\">if</span><span class=\"k\">(</span>domUtils<span class=\"k\">.</span>isBody<span class=\"k\">(</span>start<span class=\"k\">))</span><span class=\"k\">{</span>","                                    <span class=\"k\">return</span><span class=\"k\">;</span>","                                <span class=\"k\">}</span>","                                start <span class=\"k\">=</span> start<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","","                            <span class=\"k\">}</span>","                            range<span class=\"k\">.</span>setStart<span class=\"k\">(</span>next<span class=\"k\">,</span><span class=\"s\">0</span><span class=\"k\">);</span>","","                        <span class=\"k\">}</span>","","                    <span class=\"k\">}</span>","                    <span class=\"c\">//range&#30340;&#24320;&#22987;&#36793;&#30028;&#24050;&#32463;&#22312;a&#26631;&#31614;&#37324;&#30340;&#19981;&#20877;&#22788;&#29702;</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>domUtils<span class=\"k\">.</span>findParentByTagName<span class=\"k\">(</span>range<span class=\"k\">.</span>startContainer<span class=\"k\">,</span><span class=\"s\">'a'</span><span class=\"k\">,</span><span class=\"k\">true</span><span class=\"k\">))</span><span class=\"k\">{</span>","                        <span class=\"k\">return</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">var</span> a <span class=\"k\">=</span> me<span class=\"k\">.</span>document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">'a'</span><span class=\"k\">),</span>text <span class=\"k\">=</span> me<span class=\"k\">.</span>document<span class=\"k\">.</span>createTextNode<span class=\"k\">(</span><span class=\"s\">' '</span><span class=\"k\">),</span>href<span class=\"k\">;</span>","","                    me<span class=\"k\">.</span>undoManger <span class=\"k\">&amp;&amp;</span> me<span class=\"k\">.</span>undoManger<span class=\"k\">.</span>save<span class=\"k\">();</span>","                    a<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>range<span class=\"k\">.</span>extractContents<span class=\"k\">());</span>","                    a<span class=\"k\">.</span>href <span class=\"k\">=</span> a<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> a<span class=\"k\">.</span>innerHTML<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/&lt;[^&gt;]+&gt;/g</span><span class=\"k\">,</span><span class=\"s\">''</span><span class=\"k\">);</span>","                    href <span class=\"k\">=</span> a<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"href\"</span><span class=\"k\">).</span>replace<span class=\"k\">(</span><span class=\"k\">new</span> RegExp<span class=\"k\">(</span>domUtils<span class=\"k\">.</span>fillChar<span class=\"k\">,</span><span class=\"s\">'g'</span><span class=\"k\">),</span><span class=\"s\">''</span><span class=\"k\">);</span>","                    href <span class=\"k\">=</span> <span class=\"s\">/^(?:https?:\\/\\/)/ig</span><span class=\"k\">.</span>test<span class=\"k\">(</span>href<span class=\"k\">)</span> <span class=\"k\">?</span> href <span class=\"k\">:</span> <span class=\"s\">\"http://\"</span><span class=\"k\">+</span> href<span class=\"k\">;</span>","                    a<span class=\"k\">.</span>setAttribute<span class=\"k\">(</span><span class=\"s\">'_src'</span><span class=\"k\">,</span>utils<span class=\"k\">.</span>html<span class=\"k\">(</span>href<span class=\"k\">));</span>","                    a<span class=\"k\">.</span>href <span class=\"k\">=</span> utils<span class=\"k\">.</span>html<span class=\"k\">(</span>href<span class=\"k\">);</span>","","                    range<span class=\"k\">.</span>insertNode<span class=\"k\">(</span>a<span class=\"k\">);</span>","                    a<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>insertBefore<span class=\"k\">(</span>text<span class=\"k\">,</span> a<span class=\"k\">.</span>nextSibling<span class=\"k\">);</span>","                    range<span class=\"k\">.</span>setStart<span class=\"k\">(</span>text<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">);</span>","                    range<span class=\"k\">.</span>collapse<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","                    sel<span class=\"k\">.</span>removeAllRanges<span class=\"k\">();</span>","                    sel<span class=\"k\">.</span>addRange<span class=\"k\">(</span>range<span class=\"k\">);</span>","                    me<span class=\"k\">.</span>undoManger <span class=\"k\">&amp;&amp;</span> me<span class=\"k\">.</span>undoManger<span class=\"k\">.</span>save<span class=\"k\">();</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>"];
_$jscoverage['plugins/autolink.js'][9]++;
UE.plugins.autolink = (function () {
  _$jscoverage['plugins/autolink.js'][10]++;
  var cont = 0;
  _$jscoverage['plugins/autolink.js'][11]++;
  if (browser.ie) {
    _$jscoverage['plugins/autolink.js'][12]++;
    return;
  }
  _$jscoverage['plugins/autolink.js'][14]++;
  var me = this;
  _$jscoverage['plugins/autolink.js'][15]++;
  me.addListener("reset", (function () {
  _$jscoverage['plugins/autolink.js'][16]++;
  cont = 0;
}));
  _$jscoverage['plugins/autolink.js'][18]++;
  me.addListener("keydown", (function (type, evt) {
  _$jscoverage['plugins/autolink.js'][19]++;
  var keyCode = (evt.keyCode || evt.which);
  _$jscoverage['plugins/autolink.js'][21]++;
  if (((keyCode == 32) || (keyCode == 13))) {
    _$jscoverage['plugins/autolink.js'][23]++;
    var sel = me.selection.getNative(), range = sel.getRangeAt(0).cloneRange(), offset, charCode;
    _$jscoverage['plugins/autolink.js'][28]++;
    var start = range.startContainer;
    _$jscoverage['plugins/autolink.js'][29]++;
    while (((start.nodeType == 1) && (range.startOffset > 0))) {
      _$jscoverage['plugins/autolink.js'][30]++;
      start = range.startContainer.childNodes[(range.startOffset - 1)];
      _$jscoverage['plugins/autolink.js'][31]++;
      if ((! start)) {
        _$jscoverage['plugins/autolink.js'][32]++;
        break;
      }
      _$jscoverage['plugins/autolink.js'][34]++;
      range.setStart(start, ((start.nodeType == 1)? start.childNodes.length: start.nodeValue.length));
      _$jscoverage['plugins/autolink.js'][35]++;
      range.collapse(true);
      _$jscoverage['plugins/autolink.js'][36]++;
      start = range.startContainer;
}
    _$jscoverage['plugins/autolink.js'][39]++;
    do {
      _$jscoverage['plugins/autolink.js'][40]++;
      if ((range.startOffset == 0)) {
        _$jscoverage['plugins/autolink.js'][41]++;
        start = range.startContainer.previousSibling;
        _$jscoverage['plugins/autolink.js'][43]++;
        while ((start && (start.nodeType == 1))) {
          _$jscoverage['plugins/autolink.js'][44]++;
          start = start.lastChild;
}
        _$jscoverage['plugins/autolink.js'][46]++;
        if (((! start) || domUtils.isFillChar(start))) {
          _$jscoverage['plugins/autolink.js'][47]++;
          break;
        }
        _$jscoverage['plugins/autolink.js'][49]++;
        offset = start.nodeValue.length;
      }
      else {
        _$jscoverage['plugins/autolink.js'][51]++;
        start = range.startContainer;
        _$jscoverage['plugins/autolink.js'][52]++;
        offset = range.startOffset;
      }
      _$jscoverage['plugins/autolink.js'][54]++;
      range.setStart(start, (offset - 1));
      _$jscoverage['plugins/autolink.js'][55]++;
      charCode = range.toString().charCodeAt(0);
}
    while (((charCode != 160) && (charCode != 32)));
    _$jscoverage['plugins/autolink.js'][58]++;
    if (range.toString().replace(new RegExp(domUtils.fillChar, "g"), "").match(/(?:https?:\/\/|ssh:\/\/|ftp:\/\/|file:\/|www\.)/i)) {
      _$jscoverage['plugins/autolink.js'][59]++;
      while (range.toString().length) {
        _$jscoverage['plugins/autolink.js'][60]++;
        if (/^(?:https?:\/\/|ssh:\/\/|ftp:\/\/|file:\/|www\.)/i.test(range.toString())) {
          _$jscoverage['plugins/autolink.js'][61]++;
          break;
        }
        _$jscoverage['plugins/autolink.js'][63]++;
        try {
          _$jscoverage['plugins/autolink.js'][64]++;
          range.setStart(range.startContainer, (range.startOffset + 1));
        }
        catch (e) {
          _$jscoverage['plugins/autolink.js'][67]++;
          var start = range.startContainer;
          _$jscoverage['plugins/autolink.js'][68]++;
          while ((! (next = start.nextSibling))) {
            _$jscoverage['plugins/autolink.js'][69]++;
            if (domUtils.isBody(start)) {
              _$jscoverage['plugins/autolink.js'][70]++;
              return;
            }
            _$jscoverage['plugins/autolink.js'][72]++;
            start = start.parentNode;
}
          _$jscoverage['plugins/autolink.js'][75]++;
          range.setStart(next, 0);
        }
}
      _$jscoverage['plugins/autolink.js'][81]++;
      if (domUtils.findParentByTagName(range.startContainer, "a", true)) {
        _$jscoverage['plugins/autolink.js'][82]++;
        return;
      }
      _$jscoverage['plugins/autolink.js'][84]++;
      var a = me.document.createElement("a"), text = me.document.createTextNode(" "), href;
      _$jscoverage['plugins/autolink.js'][86]++;
      (me.undoManger && me.undoManger.save());
      _$jscoverage['plugins/autolink.js'][87]++;
      a.appendChild(range.extractContents());
      _$jscoverage['plugins/autolink.js'][88]++;
      a.href = (a.innerHTML = a.innerHTML.replace(/<[^>]+>/g, ""));
      _$jscoverage['plugins/autolink.js'][89]++;
      href = a.getAttribute("href").replace(new RegExp(domUtils.fillChar, "g"), "");
      _$jscoverage['plugins/autolink.js'][90]++;
      href = (/^(?:https?:\/\/)/gi.test(href)? href: ("http://" + href));
      _$jscoverage['plugins/autolink.js'][91]++;
      a.setAttribute("_src", utils.html(href));
      _$jscoverage['plugins/autolink.js'][92]++;
      a.href = utils.html(href);
      _$jscoverage['plugins/autolink.js'][94]++;
      range.insertNode(a);
      _$jscoverage['plugins/autolink.js'][95]++;
      a.parentNode.insertBefore(text, a.nextSibling);
      _$jscoverage['plugins/autolink.js'][96]++;
      range.setStart(text, 0);
      _$jscoverage['plugins/autolink.js'][97]++;
      range.collapse(true);
      _$jscoverage['plugins/autolink.js'][98]++;
      sel.removeAllRanges();
      _$jscoverage['plugins/autolink.js'][99]++;
      sel.addRange(range);
      _$jscoverage['plugins/autolink.js'][100]++;
      (me.undoManger && me.undoManger.save());
    }
  }
}));
});
