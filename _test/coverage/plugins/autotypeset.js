/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['plugins/autotypeset.js']) {
  _$jscoverage['plugins/autotypeset.js'] = [];
  _$jscoverage['plugins/autotypeset.js'][11] = 0;
  _$jscoverage['plugins/autotypeset.js'][13] = 0;
  _$jscoverage['plugins/autotypeset.js'][28] = 0;
  _$jscoverage['plugins/autotypeset.js'][47] = 0;
  _$jscoverage['plugins/autotypeset.js'][48] = 0;
  _$jscoverage['plugins/autotypeset.js'][50] = 0;
  _$jscoverage['plugins/autotypeset.js'][51] = 0;
  _$jscoverage['plugins/autotypeset.js'][52] = 0;
  _$jscoverage['plugins/autotypeset.js'][53] = 0;
  _$jscoverage['plugins/autotypeset.js'][54] = 0;
  _$jscoverage['plugins/autotypeset.js'][55] = 0;
  _$jscoverage['plugins/autotypeset.js'][56] = 0;
  _$jscoverage['plugins/autotypeset.js'][60] = 0;
  _$jscoverage['plugins/autotypeset.js'][63] = 0;
  _$jscoverage['plugins/autotypeset.js'][68] = 0;
  _$jscoverage['plugins/autotypeset.js'][69] = 0;
  _$jscoverage['plugins/autotypeset.js'][70] = 0;
  _$jscoverage['plugins/autotypeset.js'][71] = 0;
  _$jscoverage['plugins/autotypeset.js'][72] = 0;
  _$jscoverage['plugins/autotypeset.js'][76] = 0;
  _$jscoverage['plugins/autotypeset.js'][77] = 0;
  _$jscoverage['plugins/autotypeset.js'][78] = 0;
  _$jscoverage['plugins/autotypeset.js'][79] = 0;
  _$jscoverage['plugins/autotypeset.js'][80] = 0;
  _$jscoverage['plugins/autotypeset.js'][82] = 0;
  _$jscoverage['plugins/autotypeset.js'][83] = 0;
  _$jscoverage['plugins/autotypeset.js'][85] = 0;
  _$jscoverage['plugins/autotypeset.js'][87] = 0;
  _$jscoverage['plugins/autotypeset.js'][90] = 0;
  _$jscoverage['plugins/autotypeset.js'][92] = 0;
  _$jscoverage['plugins/autotypeset.js'][93] = 0;
  _$jscoverage['plugins/autotypeset.js'][96] = 0;
  _$jscoverage['plugins/autotypeset.js'][97] = 0;
  _$jscoverage['plugins/autotypeset.js'][99] = 0;
  _$jscoverage['plugins/autotypeset.js'][103] = 0;
  _$jscoverage['plugins/autotypeset.js'][104] = 0;
  _$jscoverage['plugins/autotypeset.js'][105] = 0;
  _$jscoverage['plugins/autotypeset.js'][108] = 0;
  _$jscoverage['plugins/autotypeset.js'][110] = 0;
  _$jscoverage['plugins/autotypeset.js'][111] = 0;
  _$jscoverage['plugins/autotypeset.js'][112] = 0;
  _$jscoverage['plugins/autotypeset.js'][113] = 0;
  _$jscoverage['plugins/autotypeset.js'][114] = 0;
  _$jscoverage['plugins/autotypeset.js'][115] = 0;
  _$jscoverage['plugins/autotypeset.js'][116] = 0;
  _$jscoverage['plugins/autotypeset.js'][118] = 0;
  _$jscoverage['plugins/autotypeset.js'][123] = 0;
  _$jscoverage['plugins/autotypeset.js'][124] = 0;
  _$jscoverage['plugins/autotypeset.js'][125] = 0;
  _$jscoverage['plugins/autotypeset.js'][126] = 0;
  _$jscoverage['plugins/autotypeset.js'][127] = 0;
  _$jscoverage['plugins/autotypeset.js'][130] = 0;
  _$jscoverage['plugins/autotypeset.js'][131] = 0;
  _$jscoverage['plugins/autotypeset.js'][136] = 0;
  _$jscoverage['plugins/autotypeset.js'][137] = 0;
  _$jscoverage['plugins/autotypeset.js'][138] = 0;
  _$jscoverage['plugins/autotypeset.js'][140] = 0;
  _$jscoverage['plugins/autotypeset.js'][141] = 0;
  _$jscoverage['plugins/autotypeset.js'][150] = 0;
  _$jscoverage['plugins/autotypeset.js'][152] = 0;
  _$jscoverage['plugins/autotypeset.js'][153] = 0;
  _$jscoverage['plugins/autotypeset.js'][155] = 0;
  _$jscoverage['plugins/autotypeset.js'][159] = 0;
  _$jscoverage['plugins/autotypeset.js'][160] = 0;
  _$jscoverage['plugins/autotypeset.js'][161] = 0;
  _$jscoverage['plugins/autotypeset.js'][162] = 0;
  _$jscoverage['plugins/autotypeset.js'][166] = 0;
  _$jscoverage['plugins/autotypeset.js'][167] = 0;
  _$jscoverage['plugins/autotypeset.js'][168] = 0;
  _$jscoverage['plugins/autotypeset.js'][170] = 0;
  _$jscoverage['plugins/autotypeset.js'][171] = 0;
  _$jscoverage['plugins/autotypeset.js'][172] = 0;
  _$jscoverage['plugins/autotypeset.js'][173] = 0;
  _$jscoverage['plugins/autotypeset.js'][174] = 0;
  _$jscoverage['plugins/autotypeset.js'][175] = 0;
  _$jscoverage['plugins/autotypeset.js'][176] = 0;
  _$jscoverage['plugins/autotypeset.js'][177] = 0;
  _$jscoverage['plugins/autotypeset.js'][178] = 0;
  _$jscoverage['plugins/autotypeset.js'][180] = 0;
  _$jscoverage['plugins/autotypeset.js'][181] = 0;
  _$jscoverage['plugins/autotypeset.js'][183] = 0;
  _$jscoverage['plugins/autotypeset.js'][191] = 0;
  _$jscoverage['plugins/autotypeset.js'][192] = 0;
  _$jscoverage['plugins/autotypeset.js'][194] = 0;
  _$jscoverage['plugins/autotypeset.js'][195] = 0;
  _$jscoverage['plugins/autotypeset.js'][196] = 0;
  _$jscoverage['plugins/autotypeset.js'][197] = 0;
  _$jscoverage['plugins/autotypeset.js'][198] = 0;
  _$jscoverage['plugins/autotypeset.js'][200] = 0;
  _$jscoverage['plugins/autotypeset.js'][201] = 0;
  _$jscoverage['plugins/autotypeset.js'][203] = 0;
  _$jscoverage['plugins/autotypeset.js'][204] = 0;
  _$jscoverage['plugins/autotypeset.js'][208] = 0;
  _$jscoverage['plugins/autotypeset.js'][209] = 0;
  _$jscoverage['plugins/autotypeset.js'][210] = 0;
  _$jscoverage['plugins/autotypeset.js'][217] = 0;
  _$jscoverage['plugins/autotypeset.js'][218] = 0;
  _$jscoverage['plugins/autotypeset.js'][219] = 0;
  _$jscoverage['plugins/autotypeset.js'][227] = 0;
  _$jscoverage['plugins/autotypeset.js'][228] = 0;
  _$jscoverage['plugins/autotypeset.js'][229] = 0;
  _$jscoverage['plugins/autotypeset.js'][233] = 0;
  _$jscoverage['plugins/autotypeset.js'][234] = 0;
  _$jscoverage['plugins/autotypeset.js'][237] = 0;
  _$jscoverage['plugins/autotypeset.js'][238] = 0;
  _$jscoverage['plugins/autotypeset.js'][241] = 0;
  _$jscoverage['plugins/autotypeset.js'][243] = 0;
  _$jscoverage['plugins/autotypeset.js'][244] = 0;
  _$jscoverage['plugins/autotypeset.js'][245] = 0;
  _$jscoverage['plugins/autotypeset.js'][247] = 0;
}
_$jscoverage['plugins/autotypeset.js'].source = ["<span class=\"c\">///import core</span>","<span class=\"c\">///commands &#33258;&#21160;&#25490;&#29256;</span>","<span class=\"c\">///commandsName  autotypeset</span>","<span class=\"c\">///commandsTitle  &#33258;&#21160;&#25490;&#29256;</span>","<span class=\"c\">/*</span>","<span class=\"c\"> * &#33258;&#21160;&#25490;&#29256;</span>","<span class=\"c\"> * @function</span>","<span class=\"c\"> * @name baidu.editor.execCommands</span>","<span class=\"c\"> */</span>","","UE<span class=\"k\">.</span>plugins<span class=\"k\">[</span><span class=\"s\">'autotypeset'</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>setOpt<span class=\"k\">(</span><span class=\"k\">{</span><span class=\"s\">'autotypeset'</span><span class=\"k\">:</span><span class=\"k\">{</span>","        mergeEmptyline <span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>          <span class=\"c\">//&#21512;&#24182;&#31354;&#34892;</span>","            removeClass <span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>            <span class=\"c\">//&#21435;&#25481;&#20887;&#20313;&#30340;class</span>","            removeEmptyline <span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>        <span class=\"c\">//&#21435;&#25481;&#31354;&#34892;</span>","            textAlign <span class=\"k\">:</span> <span class=\"s\">\"left\"</span><span class=\"k\">,</span>             <span class=\"c\">//&#27573;&#33853;&#30340;&#25490;&#29256;&#26041;&#24335;&#65292;&#21487;&#20197;&#26159; left,right,center,justify &#21435;&#25481;&#36825;&#20010;&#23646;&#24615;&#34920;&#31034;&#19981;&#25191;&#34892;&#25490;&#29256;</span>","            imageBlockLine <span class=\"k\">:</span> <span class=\"s\">'center'</span><span class=\"k\">,</span>      <span class=\"c\">//&#22270;&#29255;&#30340;&#28014;&#21160;&#26041;&#24335;&#65292;&#29420;&#21344;&#19968;&#34892;&#21095;&#20013;,&#24038;&#21491;&#28014;&#21160;&#65292;&#40664;&#35748;: center,left,right,none &#21435;&#25481;&#36825;&#20010;&#23646;&#24615;&#34920;&#31034;&#19981;&#25191;&#34892;&#25490;&#29256;</span>","            pasteFilter <span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>             <span class=\"c\">//&#26681;&#25454;&#35268;&#21017;&#36807;&#28388;&#27809;&#20107;&#31896;&#36148;&#36827;&#26469;&#30340;&#20869;&#23481;</span>","            clearFontSize <span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>           <span class=\"c\">//&#21435;&#25481;&#25152;&#26377;&#30340;&#20869;&#23884;&#23383;&#21495;&#65292;&#20351;&#29992;&#32534;&#36753;&#22120;&#40664;&#35748;&#30340;&#23383;&#21495;</span>","            clearFontFamily <span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>         <span class=\"c\">//&#21435;&#25481;&#25152;&#26377;&#30340;&#20869;&#23884;&#23383;&#20307;&#65292;&#20351;&#29992;&#32534;&#36753;&#22120;&#40664;&#35748;&#30340;&#23383;&#20307;</span>","            removeEmptyNode <span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>         <span class=\"c\">// &#21435;&#25481;&#31354;&#33410;&#28857;</span>","            <span class=\"c\">//&#21487;&#20197;&#21435;&#25481;&#30340;&#26631;&#31614;</span>","            removeTagNames <span class=\"k\">:</span> utils<span class=\"k\">.</span>extend<span class=\"k\">(</span><span class=\"k\">{</span>div<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">}</span><span class=\"k\">,</span>dtd<span class=\"k\">.</span>$removeEmpty<span class=\"k\">),</span>","            indent <span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>                  <span class=\"c\">// &#34892;&#39318;&#32553;&#36827;</span>","            indentValue <span class=\"k\">:</span> <span class=\"s\">'2em'</span>             <span class=\"c\">//&#34892;&#39318;&#32553;&#36827;&#30340;&#22823;&#23567;</span>","    <span class=\"k\">}}</span><span class=\"k\">);</span>","    <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">,</span>","        opt <span class=\"k\">=</span> me<span class=\"k\">.</span>options<span class=\"k\">.</span>autotypeset<span class=\"k\">,</span>","        remainClass <span class=\"k\">=</span> <span class=\"k\">{</span>","            <span class=\"s\">'selectTdClass'</span><span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>","            <span class=\"s\">'pagebreak'</span><span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>","            <span class=\"s\">'anchorclass'</span><span class=\"k\">:</span><span class=\"s\">1</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        remainTag <span class=\"k\">=</span> <span class=\"k\">{</span>","            <span class=\"s\">'li'</span><span class=\"k\">:</span><span class=\"s\">1</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        tags <span class=\"k\">=</span> <span class=\"k\">{</span>","            div<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>","            p<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>","            <span class=\"c\">//trace:2183 &#36825;&#20123;&#20063;&#35748;&#20026;&#26159;&#34892;</span>","            blockquote<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>center<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>h1<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>h2<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>h3<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>h4<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>h5<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>h6<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>","            span<span class=\"k\">:</span><span class=\"s\">1</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        highlightCont<span class=\"k\">;</span>","    <span class=\"c\">//&#21319;&#32423;&#20102;&#29256;&#26412;&#65292;&#20294;&#37197;&#32622;&#39033;&#30446;&#37324;&#27809;&#26377;autotypeset</span>","    <span class=\"k\">if</span><span class=\"k\">(!</span>opt<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">return</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">function</span> isLine<span class=\"k\">(</span>node<span class=\"k\">,</span>notEmpty<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">if</span><span class=\"k\">(!</span>node <span class=\"k\">||</span> node<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">3</span><span class=\"k\">)</span>","            <span class=\"k\">return</span> <span class=\"s\">0</span><span class=\"k\">;</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>domUtils<span class=\"k\">.</span>isBr<span class=\"k\">(</span>node<span class=\"k\">))</span>","            <span class=\"k\">return</span> <span class=\"s\">1</span><span class=\"k\">;</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>node <span class=\"k\">&amp;&amp;</span> node<span class=\"k\">.</span>parentNode <span class=\"k\">&amp;&amp;</span> tags<span class=\"k\">[</span>node<span class=\"k\">.</span>tagName<span class=\"k\">.</span>toLowerCase<span class=\"k\">()])</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>highlightCont <span class=\"k\">&amp;&amp;</span> highlightCont<span class=\"k\">.</span>contains<span class=\"k\">(</span>node<span class=\"k\">)</span>","                <span class=\"k\">||</span>","                node<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">'pagebreak'</span><span class=\"k\">)</span>","            <span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> notEmpty <span class=\"k\">?</span> <span class=\"k\">!</span>domUtils<span class=\"k\">.</span>isEmptyBlock<span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">:</span> domUtils<span class=\"k\">.</span>isEmptyBlock<span class=\"k\">(</span>node<span class=\"k\">,</span><span class=\"k\">new</span> RegExp<span class=\"k\">(</span><span class=\"s\">'[</span><span class=\"t\">\\\\</span><span class=\"s\">s'</span><span class=\"k\">+</span>domUtils<span class=\"k\">.</span>fillChar","                <span class=\"k\">+</span><span class=\"s\">']'</span><span class=\"k\">,</span><span class=\"s\">'g'</span><span class=\"k\">));</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> removeNotAttributeSpan<span class=\"k\">(</span>node<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">if</span><span class=\"k\">(!</span>node<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText<span class=\"k\">)</span><span class=\"k\">{</span>","            domUtils<span class=\"k\">.</span>removeAttributes<span class=\"k\">(</span>node<span class=\"k\">,[</span><span class=\"s\">'style'</span><span class=\"k\">]);</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>node<span class=\"k\">.</span>tagName<span class=\"k\">.</span>toLowerCase<span class=\"k\">()</span> <span class=\"k\">==</span> <span class=\"s\">'span'</span> <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>hasNoAttributes<span class=\"k\">(</span>node<span class=\"k\">))</span><span class=\"k\">{</span>","                domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>node<span class=\"k\">,</span><span class=\"k\">true</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">function</span> autotype<span class=\"k\">(</span>type<span class=\"k\">,</span>html<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">,</span>cont<span class=\"k\">;</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>html<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span>opt<span class=\"k\">.</span>pasteFilter<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            cont <span class=\"k\">=</span> me<span class=\"k\">.</span>document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">'div'</span><span class=\"k\">);</span>","            cont<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> html<span class=\"k\">.</span>html<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","            cont <span class=\"k\">=</span> me<span class=\"k\">.</span>document<span class=\"k\">.</span>body<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">var</span> nodes <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span>cont<span class=\"k\">,</span><span class=\"s\">'*'</span><span class=\"k\">);</span>","","          <span class=\"c\">// &#34892;&#39318;&#32553;&#36827;&#65292;&#27573;&#33853;&#26041;&#21521;&#65292;&#27573;&#38388;&#36317;&#65292;&#27573;&#20869;&#38388;&#36317;</span>","        <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span>ci<span class=\"k\">;</span>ci<span class=\"k\">=</span>nodes<span class=\"k\">[</span>i<span class=\"k\">++];)</span><span class=\"k\">{</span>","","            <span class=\"k\">if</span><span class=\"k\">(</span>me<span class=\"k\">.</span>fireEvent<span class=\"k\">(</span><span class=\"s\">'excludeNodeinautotype'</span><span class=\"k\">,</span>ci<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"k\">true</span><span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">continue</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","             <span class=\"c\">//font-size</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>opt<span class=\"k\">.</span>clearFontSize <span class=\"k\">&amp;&amp;</span> ci<span class=\"k\">.</span>style<span class=\"k\">.</span>fontSize<span class=\"k\">)</span><span class=\"k\">{</span>","                domUtils<span class=\"k\">.</span>removeStyle<span class=\"k\">(</span>ci<span class=\"k\">,</span><span class=\"s\">'font-size'</span><span class=\"k\">);</span>","","                removeNotAttributeSpan<span class=\"k\">(</span>ci<span class=\"k\">);</span>","","            <span class=\"k\">}</span>","            <span class=\"c\">//font-family</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>opt<span class=\"k\">.</span>clearFontFamily <span class=\"k\">&amp;&amp;</span> ci<span class=\"k\">.</span>style<span class=\"k\">.</span>fontFamily<span class=\"k\">)</span><span class=\"k\">{</span>","                domUtils<span class=\"k\">.</span>removeStyle<span class=\"k\">(</span>ci<span class=\"k\">,</span><span class=\"s\">'font-family'</span><span class=\"k\">);</span>","                removeNotAttributeSpan<span class=\"k\">(</span>ci<span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span><span class=\"k\">(</span>isLine<span class=\"k\">(</span>ci<span class=\"k\">))</span><span class=\"k\">{</span>","                <span class=\"c\">//&#21512;&#24182;&#31354;&#34892;</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>opt<span class=\"k\">.</span>mergeEmptyline <span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> next <span class=\"k\">=</span> ci<span class=\"k\">.</span>nextSibling<span class=\"k\">,</span>tmpNode<span class=\"k\">,</span>isBr <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>isBr<span class=\"k\">(</span>ci<span class=\"k\">);</span>","                    <span class=\"k\">while</span><span class=\"k\">(</span>isLine<span class=\"k\">(</span>next<span class=\"k\">))</span><span class=\"k\">{</span>","                        tmpNode <span class=\"k\">=</span> next<span class=\"k\">;</span>","                        next <span class=\"k\">=</span> tmpNode<span class=\"k\">.</span>nextSibling<span class=\"k\">;</span>","                        <span class=\"k\">if</span><span class=\"k\">(</span>isBr <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(!</span>next <span class=\"k\">||</span> next <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>domUtils<span class=\"k\">.</span>isBr<span class=\"k\">(</span>next<span class=\"k\">)))</span><span class=\"k\">{</span>","                            <span class=\"k\">break</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>tmpNode<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","","                <span class=\"k\">}</span>","                 <span class=\"c\">//&#21435;&#25481;&#31354;&#34892;&#65292;&#20445;&#30041;&#21344;&#20301;&#30340;&#31354;&#34892;</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>opt<span class=\"k\">.</span>removeEmptyline <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>inDoc<span class=\"k\">(</span>ci<span class=\"k\">,</span>cont<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>remainTag<span class=\"k\">[</span>ci<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>tagName<span class=\"k\">.</span>toLowerCase<span class=\"k\">()]</span> <span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>domUtils<span class=\"k\">.</span>isBr<span class=\"k\">(</span>ci<span class=\"k\">))</span><span class=\"k\">{</span>","                        next <span class=\"k\">=</span> ci<span class=\"k\">.</span>nextSibling<span class=\"k\">;</span>","                        <span class=\"k\">if</span><span class=\"k\">(</span>next <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>domUtils<span class=\"k\">.</span>isBr<span class=\"k\">(</span>next<span class=\"k\">))</span><span class=\"k\">{</span>","                            <span class=\"k\">continue</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                    domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>ci<span class=\"k\">);</span>","                    <span class=\"k\">continue</span><span class=\"k\">;</span>","","                <span class=\"k\">}</span>","","            <span class=\"k\">}</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>isLine<span class=\"k\">(</span>ci<span class=\"k\">,</span><span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> ci<span class=\"k\">.</span>tagName <span class=\"k\">!=</span> <span class=\"s\">'SPAN'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>opt<span class=\"k\">.</span>indent<span class=\"k\">)</span><span class=\"k\">{</span>","                    ci<span class=\"k\">.</span>style<span class=\"k\">.</span>textIndent <span class=\"k\">=</span> opt<span class=\"k\">.</span>indentValue<span class=\"k\">;</span>","                <span class=\"k\">}</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>opt<span class=\"k\">.</span>textAlign<span class=\"k\">)</span><span class=\"k\">{</span>","                    ci<span class=\"k\">.</span>style<span class=\"k\">.</span>textAlign <span class=\"k\">=</span> opt<span class=\"k\">.</span>textAlign<span class=\"k\">;</span>","                <span class=\"k\">}</span>","<span class=\"c\">//                if(opt.lineHeight)</span>","<span class=\"c\">//                    ci.style.lineHeight = opt.lineHeight + 'cm';</span>","","","            <span class=\"k\">}</span>","","            <span class=\"c\">//&#21435;&#25481;class,&#20445;&#30041;&#30340;class&#19981;&#21435;&#25481;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>opt<span class=\"k\">.</span>removeClass <span class=\"k\">&amp;&amp;</span> ci<span class=\"k\">.</span>className <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>remainClass<span class=\"k\">[</span>ci<span class=\"k\">.</span>className<span class=\"k\">.</span>toLowerCase<span class=\"k\">()])</span><span class=\"k\">{</span>","","                <span class=\"k\">if</span><span class=\"k\">(</span>highlightCont <span class=\"k\">&amp;&amp;</span> highlightCont<span class=\"k\">.</span>contains<span class=\"k\">(</span>ci<span class=\"k\">))</span><span class=\"k\">{</span>","                     <span class=\"k\">continue</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                domUtils<span class=\"k\">.</span>removeAttributes<span class=\"k\">(</span>ci<span class=\"k\">,[</span><span class=\"s\">'class'</span><span class=\"k\">]);</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">//&#34920;&#24773;&#19981;&#22788;&#29702;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>opt<span class=\"k\">.</span>imageBlockLine <span class=\"k\">&amp;&amp;</span> ci<span class=\"k\">.</span>tagName<span class=\"k\">.</span>toLowerCase<span class=\"k\">()</span> <span class=\"k\">==</span> <span class=\"s\">'img'</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>ci<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">'emotion'</span><span class=\"k\">))</span><span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>html<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> img <span class=\"k\">=</span> ci<span class=\"k\">;</span>","                    <span class=\"k\">switch</span> <span class=\"k\">(</span>opt<span class=\"k\">.</span>imageBlockLine<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">case</span> <span class=\"s\">'left'</span><span class=\"k\">:</span>","                        <span class=\"k\">case</span> <span class=\"s\">'right'</span><span class=\"k\">:</span>","                        <span class=\"k\">case</span> <span class=\"s\">'none'</span><span class=\"k\">:</span>","                            <span class=\"k\">var</span> pN <span class=\"k\">=</span> img<span class=\"k\">.</span>parentNode<span class=\"k\">,</span>tmpNode<span class=\"k\">,</span>pre<span class=\"k\">,</span>next<span class=\"k\">;</span>","                            <span class=\"k\">while</span><span class=\"k\">(</span>dtd<span class=\"k\">.</span>$inline<span class=\"k\">[</span>pN<span class=\"k\">.</span>tagName<span class=\"k\">]</span> <span class=\"k\">||</span> pN<span class=\"k\">.</span>tagName <span class=\"k\">==</span> <span class=\"s\">'A'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                                pN <span class=\"k\">=</span> pN<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","                            <span class=\"k\">}</span>","                            tmpNode <span class=\"k\">=</span> pN<span class=\"k\">;</span>","                            <span class=\"k\">if</span><span class=\"k\">(</span>tmpNode<span class=\"k\">.</span>tagName <span class=\"k\">==</span> <span class=\"s\">'P'</span> <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>getStyle<span class=\"k\">(</span>tmpNode<span class=\"k\">,</span><span class=\"s\">'text-align'</span><span class=\"k\">)</span> <span class=\"k\">==</span> <span class=\"s\">'center'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                                <span class=\"k\">if</span><span class=\"k\">(!</span>domUtils<span class=\"k\">.</span>isBody<span class=\"k\">(</span>tmpNode<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>getChildCount<span class=\"k\">(</span>tmpNode<span class=\"k\">,</span><span class=\"k\">function</span><span class=\"k\">(</span>node<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span> <span class=\"k\">!</span>domUtils<span class=\"k\">.</span>isBr<span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>domUtils<span class=\"k\">.</span>isWhitespace<span class=\"k\">(</span>node<span class=\"k\">)</span><span class=\"k\">}</span><span class=\"k\">)</span> <span class=\"k\">==</span> <span class=\"s\">1</span><span class=\"k\">)</span><span class=\"k\">{</span>","                                    pre <span class=\"k\">=</span> tmpNode<span class=\"k\">.</span>previousSibling<span class=\"k\">;</span>","                                    next <span class=\"k\">=</span> tmpNode<span class=\"k\">.</span>nextSibling<span class=\"k\">;</span>","                                    <span class=\"k\">if</span><span class=\"k\">(</span>pre <span class=\"k\">&amp;&amp;</span> next <span class=\"k\">&amp;&amp;</span> pre<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span> <span class=\"k\">&amp;&amp;</span>  next<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span> <span class=\"k\">&amp;&amp;</span> pre<span class=\"k\">.</span>tagName <span class=\"k\">==</span> next<span class=\"k\">.</span>tagName <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>isBlockElm<span class=\"k\">(</span>pre<span class=\"k\">))</span><span class=\"k\">{</span>","                                        pre<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>tmpNode<span class=\"k\">.</span>firstChild<span class=\"k\">);</span>","                                        <span class=\"k\">while</span><span class=\"k\">(</span>next<span class=\"k\">.</span>firstChild<span class=\"k\">)</span><span class=\"k\">{</span>","                                            pre<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>next<span class=\"k\">.</span>firstChild<span class=\"k\">);</span>","                                        <span class=\"k\">}</span>","                                        domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>tmpNode<span class=\"k\">);</span>","                                        domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>next<span class=\"k\">);</span>","                                    <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                                        domUtils<span class=\"k\">.</span>setStyle<span class=\"k\">(</span>tmpNode<span class=\"k\">,</span><span class=\"s\">'text-align'</span><span class=\"k\">,</span><span class=\"s\">''</span><span class=\"k\">);</span>","                                    <span class=\"k\">}</span>","","","                                <span class=\"k\">}</span>","","","                            <span class=\"k\">}</span>","                            domUtils<span class=\"k\">.</span>setStyle<span class=\"k\">(</span>img<span class=\"k\">,</span><span class=\"s\">'float'</span><span class=\"k\">,</span>opt<span class=\"k\">.</span>imageBlockLine<span class=\"k\">);</span>","                            <span class=\"k\">break</span><span class=\"k\">;</span>","                        <span class=\"k\">case</span> <span class=\"s\">'center'</span><span class=\"k\">:</span>","                            <span class=\"k\">if</span><span class=\"k\">(</span>me<span class=\"k\">.</span>queryCommandValue<span class=\"k\">(</span><span class=\"s\">'imagefloat'</span><span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"s\">'center'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                                pN <span class=\"k\">=</span> img<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","                                domUtils<span class=\"k\">.</span>setStyle<span class=\"k\">(</span>img<span class=\"k\">,</span><span class=\"s\">'float'</span><span class=\"k\">,</span><span class=\"s\">'none'</span><span class=\"k\">);</span>","                                tmpNode <span class=\"k\">=</span> img<span class=\"k\">;</span>","                                <span class=\"k\">while</span><span class=\"k\">(</span>pN <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>getChildCount<span class=\"k\">(</span>pN<span class=\"k\">,</span><span class=\"k\">function</span><span class=\"k\">(</span>node<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span> <span class=\"k\">!</span>domUtils<span class=\"k\">.</span>isBr<span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>domUtils<span class=\"k\">.</span>isWhitespace<span class=\"k\">(</span>node<span class=\"k\">)</span><span class=\"k\">}</span><span class=\"k\">)</span> <span class=\"k\">==</span> <span class=\"s\">1</span>","                                    <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>dtd<span class=\"k\">.</span>$inline<span class=\"k\">[</span>pN<span class=\"k\">.</span>tagName<span class=\"k\">]</span> <span class=\"k\">||</span> pN<span class=\"k\">.</span>tagName <span class=\"k\">==</span> <span class=\"s\">'A'</span><span class=\"k\">))</span><span class=\"k\">{</span>","                                    tmpNode <span class=\"k\">=</span> pN<span class=\"k\">;</span>","                                    pN <span class=\"k\">=</span> pN<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","                                <span class=\"k\">}</span>","                                <span class=\"k\">var</span> pNode <span class=\"k\">=</span> me<span class=\"k\">.</span>document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">'p'</span><span class=\"k\">);</span>","                                domUtils<span class=\"k\">.</span>setAttributes<span class=\"k\">(</span>pNode<span class=\"k\">,</span><span class=\"k\">{</span>","","                                    style<span class=\"k\">:</span><span class=\"s\">'text-align:center'</span>","                                <span class=\"k\">}</span><span class=\"k\">);</span>","                                tmpNode<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>insertBefore<span class=\"k\">(</span>pNode<span class=\"k\">,</span>tmpNode<span class=\"k\">);</span>","                                pNode<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>tmpNode<span class=\"k\">);</span>","                                domUtils<span class=\"k\">.</span>setStyle<span class=\"k\">(</span>tmpNode<span class=\"k\">,</span><span class=\"s\">'float'</span><span class=\"k\">,</span><span class=\"s\">''</span><span class=\"k\">);</span>","","                            <span class=\"k\">}</span>","","","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> range <span class=\"k\">=</span> me<span class=\"k\">.</span>selection<span class=\"k\">.</span>getRange<span class=\"k\">();</span>","                    range<span class=\"k\">.</span>selectNode<span class=\"k\">(</span>ci<span class=\"k\">).</span>select<span class=\"k\">();</span>","                    me<span class=\"k\">.</span>execCommand<span class=\"k\">(</span><span class=\"s\">'imagefloat'</span><span class=\"k\">,</span>opt<span class=\"k\">.</span>imageBlockLine<span class=\"k\">);</span>","                <span class=\"k\">}</span>","","","","            <span class=\"k\">}</span>","","            <span class=\"c\">//&#21435;&#25481;&#20887;&#20313;&#30340;&#26631;&#31614;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>opt<span class=\"k\">.</span>removeEmptyNode<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>opt<span class=\"k\">.</span>removeTagNames<span class=\"k\">[</span>ci<span class=\"k\">.</span>tagName<span class=\"k\">.</span>toLowerCase<span class=\"k\">()]</span> <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>hasNoAttributes<span class=\"k\">(</span>ci<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>isEmptyBlock<span class=\"k\">(</span>ci<span class=\"k\">))</span><span class=\"k\">{</span>","                    domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>ci<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>html<span class=\"k\">)</span><span class=\"k\">{</span>","            html<span class=\"k\">.</span>html <span class=\"k\">=</span> cont<span class=\"k\">.</span>innerHTML<span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">if</span><span class=\"k\">(</span>opt<span class=\"k\">.</span>pasteFilter<span class=\"k\">)</span><span class=\"k\">{</span>","        me<span class=\"k\">.</span>addListener<span class=\"k\">(</span><span class=\"s\">'beforepaste'</span><span class=\"k\">,</span>autotype<span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    me<span class=\"k\">.</span>commands<span class=\"k\">[</span><span class=\"s\">'autotypeset'</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","        execCommand<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            me<span class=\"k\">.</span>removeListener<span class=\"k\">(</span><span class=\"s\">'beforepaste'</span><span class=\"k\">,</span>autotype<span class=\"k\">);</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>opt<span class=\"k\">.</span>pasteFilter<span class=\"k\">)</span><span class=\"k\">{</span>","                me<span class=\"k\">.</span>addListener<span class=\"k\">(</span><span class=\"s\">'beforepaste'</span><span class=\"k\">,</span>autotype<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            autotype<span class=\"k\">.</span>call<span class=\"k\">(</span>me<span class=\"k\">)</span>","        <span class=\"k\">}</span>","","    <span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"k\">}</span><span class=\"k\">;</span>",""];
_$jscoverage['plugins/autotypeset.js'][11]++;
UE.plugins.autotypeset = (function () {
  _$jscoverage['plugins/autotypeset.js'][13]++;
  this.setOpt({"autotypeset": {mergeEmptyline: true, removeClass: true, removeEmptyline: false, textAlign: "left", imageBlockLine: "center", pasteFilter: false, clearFontSize: false, clearFontFamily: false, removeEmptyNode: false, removeTagNames: utils.extend({div: 1}, dtd.$removeEmpty), indent: false, indentValue: "2em"}});
  _$jscoverage['plugins/autotypeset.js'][28]++;
  var me = this, opt = me.options.autotypeset, remainClass = {"selectTdClass": 1, "pagebreak": 1, "anchorclass": 1}, remainTag = {"li": 1}, tags = {div: 1, p: 1, blockquote: 1, center: 1, h1: 1, h2: 1, h3: 1, h4: 1, h5: 1, h6: 1, span: 1}, highlightCont;
  _$jscoverage['plugins/autotypeset.js'][47]++;
  if ((! opt)) {
    _$jscoverage['plugins/autotypeset.js'][48]++;
    return;
  }
  _$jscoverage['plugins/autotypeset.js'][50]++;
  function isLine(node, notEmpty) {
    _$jscoverage['plugins/autotypeset.js'][51]++;
    if (((! node) || (node.nodeType == 3))) {
      _$jscoverage['plugins/autotypeset.js'][52]++;
      return 0;
    }
    _$jscoverage['plugins/autotypeset.js'][53]++;
    if (domUtils.isBr(node)) {
      _$jscoverage['plugins/autotypeset.js'][54]++;
      return 1;
    }
    _$jscoverage['plugins/autotypeset.js'][55]++;
    if ((node && node.parentNode && tags[node.tagName.toLowerCase()])) {
      _$jscoverage['plugins/autotypeset.js'][56]++;
      if (((highlightCont && highlightCont.contains(node)) || node.getAttribute("pagebreak"))) {
        _$jscoverage['plugins/autotypeset.js'][60]++;
        return 0;
      }
      _$jscoverage['plugins/autotypeset.js'][63]++;
      return (notEmpty? (! domUtils.isEmptyBlock(node)): domUtils.isEmptyBlock(node, new RegExp(("[\\s" + domUtils.fillChar + "]"), "g")));
    }
}
  _$jscoverage['plugins/autotypeset.js'][68]++;
  function removeNotAttributeSpan(node) {
    _$jscoverage['plugins/autotypeset.js'][69]++;
    if ((! node.style.cssText)) {
      _$jscoverage['plugins/autotypeset.js'][70]++;
      domUtils.removeAttributes(node, ["style"]);
      _$jscoverage['plugins/autotypeset.js'][71]++;
      if (((node.tagName.toLowerCase() == "span") && domUtils.hasNoAttributes(node))) {
        _$jscoverage['plugins/autotypeset.js'][72]++;
        domUtils.remove(node, true);
      }
    }
}
  _$jscoverage['plugins/autotypeset.js'][76]++;
  function autotype(type, html) {
    _$jscoverage['plugins/autotypeset.js'][77]++;
    var me = this, cont;
    _$jscoverage['plugins/autotypeset.js'][78]++;
    if (html) {
      _$jscoverage['plugins/autotypeset.js'][79]++;
      if ((! opt.pasteFilter)) {
        _$jscoverage['plugins/autotypeset.js'][80]++;
        return;
      }
      _$jscoverage['plugins/autotypeset.js'][82]++;
      cont = me.document.createElement("div");
      _$jscoverage['plugins/autotypeset.js'][83]++;
      cont.innerHTML = html.html;
    }
    else {
      _$jscoverage['plugins/autotypeset.js'][85]++;
      cont = me.document.body;
    }
    _$jscoverage['plugins/autotypeset.js'][87]++;
    var nodes = domUtils.getElementsByTagName(cont, "*");
    _$jscoverage['plugins/autotypeset.js'][90]++;
    for (var i = 0, ci; (ci = nodes[(i++)]);) {
      _$jscoverage['plugins/autotypeset.js'][92]++;
      if ((me.fireEvent("excludeNodeinautotype", ci) === true)) {
        _$jscoverage['plugins/autotypeset.js'][93]++;
        continue;
      }
      _$jscoverage['plugins/autotypeset.js'][96]++;
      if ((opt.clearFontSize && ci.style.fontSize)) {
        _$jscoverage['plugins/autotypeset.js'][97]++;
        domUtils.removeStyle(ci, "font-size");
        _$jscoverage['plugins/autotypeset.js'][99]++;
        removeNotAttributeSpan(ci);
      }
      _$jscoverage['plugins/autotypeset.js'][103]++;
      if ((opt.clearFontFamily && ci.style.fontFamily)) {
        _$jscoverage['plugins/autotypeset.js'][104]++;
        domUtils.removeStyle(ci, "font-family");
        _$jscoverage['plugins/autotypeset.js'][105]++;
        removeNotAttributeSpan(ci);
      }
      _$jscoverage['plugins/autotypeset.js'][108]++;
      if (isLine(ci)) {
        _$jscoverage['plugins/autotypeset.js'][110]++;
        if (opt.mergeEmptyline) {
          _$jscoverage['plugins/autotypeset.js'][111]++;
          var next = ci.nextSibling, tmpNode, isBr = domUtils.isBr(ci);
          _$jscoverage['plugins/autotypeset.js'][112]++;
          while (isLine(next)) {
            _$jscoverage['plugins/autotypeset.js'][113]++;
            tmpNode = next;
            _$jscoverage['plugins/autotypeset.js'][114]++;
            next = tmpNode.nextSibling;
            _$jscoverage['plugins/autotypeset.js'][115]++;
            if ((isBr && ((! next) || (next && (! domUtils.isBr(next)))))) {
              _$jscoverage['plugins/autotypeset.js'][116]++;
              break;
            }
            _$jscoverage['plugins/autotypeset.js'][118]++;
            domUtils.remove(tmpNode);
}
        }
        _$jscoverage['plugins/autotypeset.js'][123]++;
        if ((opt.removeEmptyline && domUtils.inDoc(ci, cont) && (! remainTag[ci.parentNode.tagName.toLowerCase()]))) {
          _$jscoverage['plugins/autotypeset.js'][124]++;
          if (domUtils.isBr(ci)) {
            _$jscoverage['plugins/autotypeset.js'][125]++;
            next = ci.nextSibling;
            _$jscoverage['plugins/autotypeset.js'][126]++;
            if ((next && (! domUtils.isBr(next)))) {
              _$jscoverage['plugins/autotypeset.js'][127]++;
              continue;
            }
          }
          _$jscoverage['plugins/autotypeset.js'][130]++;
          domUtils.remove(ci);
          _$jscoverage['plugins/autotypeset.js'][131]++;
          continue;
        }
      }
      _$jscoverage['plugins/autotypeset.js'][136]++;
      if ((isLine(ci, true) && (ci.tagName != "SPAN"))) {
        _$jscoverage['plugins/autotypeset.js'][137]++;
        if (opt.indent) {
          _$jscoverage['plugins/autotypeset.js'][138]++;
          ci.style.textIndent = opt.indentValue;
        }
        _$jscoverage['plugins/autotypeset.js'][140]++;
        if (opt.textAlign) {
          _$jscoverage['plugins/autotypeset.js'][141]++;
          ci.style.textAlign = opt.textAlign;
        }
      }
      _$jscoverage['plugins/autotypeset.js'][150]++;
      if ((opt.removeClass && ci.className && (! remainClass[ci.className.toLowerCase()]))) {
        _$jscoverage['plugins/autotypeset.js'][152]++;
        if ((highlightCont && highlightCont.contains(ci))) {
          _$jscoverage['plugins/autotypeset.js'][153]++;
          continue;
        }
        _$jscoverage['plugins/autotypeset.js'][155]++;
        domUtils.removeAttributes(ci, ["class"]);
      }
      _$jscoverage['plugins/autotypeset.js'][159]++;
      if ((opt.imageBlockLine && (ci.tagName.toLowerCase() == "img") && (! ci.getAttribute("emotion")))) {
        _$jscoverage['plugins/autotypeset.js'][160]++;
        if (html) {
          _$jscoverage['plugins/autotypeset.js'][161]++;
          var img = ci;
          _$jscoverage['plugins/autotypeset.js'][162]++;
          switch (opt.imageBlockLine) {
          case "left":
          case "right":
          case "none":
            _$jscoverage['plugins/autotypeset.js'][166]++;
            var pN = img.parentNode, tmpNode = tmpNode, pre, next = next;
            _$jscoverage['plugins/autotypeset.js'][167]++;
            while ((dtd.$inline[pN.tagName] || (pN.tagName == "A"))) {
              _$jscoverage['plugins/autotypeset.js'][168]++;
              pN = pN.parentNode;
}
            _$jscoverage['plugins/autotypeset.js'][170]++;
            tmpNode = pN;
            _$jscoverage['plugins/autotypeset.js'][171]++;
            if (((tmpNode.tagName == "P") && (domUtils.getStyle(tmpNode, "text-align") == "center"))) {
              _$jscoverage['plugins/autotypeset.js'][172]++;
              if (((! domUtils.isBody(tmpNode)) && (domUtils.getChildCount(tmpNode, (function (node) {
  _$jscoverage['plugins/autotypeset.js'][172]++;
  return ((! domUtils.isBr(node)) && (! domUtils.isWhitespace(node)));
})) == 1))) {
                _$jscoverage['plugins/autotypeset.js'][173]++;
                pre = tmpNode.previousSibling;
                _$jscoverage['plugins/autotypeset.js'][174]++;
                next = tmpNode.nextSibling;
                _$jscoverage['plugins/autotypeset.js'][175]++;
                if ((pre && next && (pre.nodeType == 1) && (next.nodeType == 1) && (pre.tagName == next.tagName) && domUtils.isBlockElm(pre))) {
                  _$jscoverage['plugins/autotypeset.js'][176]++;
                  pre.appendChild(tmpNode.firstChild);
                  _$jscoverage['plugins/autotypeset.js'][177]++;
                  while (next.firstChild) {
                    _$jscoverage['plugins/autotypeset.js'][178]++;
                    pre.appendChild(next.firstChild);
}
                  _$jscoverage['plugins/autotypeset.js'][180]++;
                  domUtils.remove(tmpNode);
                  _$jscoverage['plugins/autotypeset.js'][181]++;
                  domUtils.remove(next);
                }
                else {
                  _$jscoverage['plugins/autotypeset.js'][183]++;
                  domUtils.setStyle(tmpNode, "text-align", "");
                }
              }
            }
            _$jscoverage['plugins/autotypeset.js'][191]++;
            domUtils.setStyle(img, "float", opt.imageBlockLine);
            _$jscoverage['plugins/autotypeset.js'][192]++;
            break;
          case "center":
            _$jscoverage['plugins/autotypeset.js'][194]++;
            if ((me.queryCommandValue("imagefloat") != "center")) {
              _$jscoverage['plugins/autotypeset.js'][195]++;
              pN = img.parentNode;
              _$jscoverage['plugins/autotypeset.js'][196]++;
              domUtils.setStyle(img, "float", "none");
              _$jscoverage['plugins/autotypeset.js'][197]++;
              tmpNode = img;
              _$jscoverage['plugins/autotypeset.js'][198]++;
              while ((pN && (domUtils.getChildCount(pN, (function (node) {
  _$jscoverage['plugins/autotypeset.js'][198]++;
  return ((! domUtils.isBr(node)) && (! domUtils.isWhitespace(node)));
})) == 1) && (dtd.$inline[pN.tagName] || (pN.tagName == "A")))) {
                _$jscoverage['plugins/autotypeset.js'][200]++;
                tmpNode = pN;
                _$jscoverage['plugins/autotypeset.js'][201]++;
                pN = pN.parentNode;
}
              _$jscoverage['plugins/autotypeset.js'][203]++;
              var pNode = me.document.createElement("p");
              _$jscoverage['plugins/autotypeset.js'][204]++;
              domUtils.setAttributes(pNode, {style: "text-align:center"});
              _$jscoverage['plugins/autotypeset.js'][208]++;
              tmpNode.parentNode.insertBefore(pNode, tmpNode);
              _$jscoverage['plugins/autotypeset.js'][209]++;
              pNode.appendChild(tmpNode);
              _$jscoverage['plugins/autotypeset.js'][210]++;
              domUtils.setStyle(tmpNode, "float", "");
            }
          }
        }
        else {
          _$jscoverage['plugins/autotypeset.js'][217]++;
          var range = me.selection.getRange();
          _$jscoverage['plugins/autotypeset.js'][218]++;
          range.selectNode(ci).select();
          _$jscoverage['plugins/autotypeset.js'][219]++;
          me.execCommand("imagefloat", opt.imageBlockLine);
        }
      }
      _$jscoverage['plugins/autotypeset.js'][227]++;
      if (opt.removeEmptyNode) {
        _$jscoverage['plugins/autotypeset.js'][228]++;
        if ((opt.removeTagNames[ci.tagName.toLowerCase()] && domUtils.hasNoAttributes(ci) && domUtils.isEmptyBlock(ci))) {
          _$jscoverage['plugins/autotypeset.js'][229]++;
          domUtils.remove(ci);
        }
      }
}
    _$jscoverage['plugins/autotypeset.js'][233]++;
    if (html) {
      _$jscoverage['plugins/autotypeset.js'][234]++;
      html.html = cont.innerHTML;
    }
}
  _$jscoverage['plugins/autotypeset.js'][237]++;
  if (opt.pasteFilter) {
    _$jscoverage['plugins/autotypeset.js'][238]++;
    me.addListener("beforepaste", autotype);
  }
  _$jscoverage['plugins/autotypeset.js'][241]++;
  me.commands.autotypeset = {execCommand: (function () {
  _$jscoverage['plugins/autotypeset.js'][243]++;
  me.removeListener("beforepaste", autotype);
  _$jscoverage['plugins/autotypeset.js'][244]++;
  if (opt.pasteFilter) {
    _$jscoverage['plugins/autotypeset.js'][245]++;
    me.addListener("beforepaste", autotype);
  }
  _$jscoverage['plugins/autotypeset.js'][247]++;
  autotype.call(me);
})};
});
