/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['plugins/inserthtml.js']) {
  _$jscoverage['plugins/inserthtml.js'] = [];
  _$jscoverage['plugins/inserthtml.js'][31] = 0;
  _$jscoverage['plugins/inserthtml.js'][33] = 0;
  _$jscoverage['plugins/inserthtml.js'][36] = 0;
  _$jscoverage['plugins/inserthtml.js'][37] = 0;
  _$jscoverage['plugins/inserthtml.js'][39] = 0;
  _$jscoverage['plugins/inserthtml.js'][40] = 0;
  _$jscoverage['plugins/inserthtml.js'][42] = 0;
  _$jscoverage['plugins/inserthtml.js'][43] = 0;
  _$jscoverage['plugins/inserthtml.js'][44] = 0;
  _$jscoverage['plugins/inserthtml.js'][46] = 0;
  _$jscoverage['plugins/inserthtml.js'][47] = 0;
  _$jscoverage['plugins/inserthtml.js'][49] = 0;
  _$jscoverage['plugins/inserthtml.js'][50] = 0;
  _$jscoverage['plugins/inserthtml.js'][53] = 0;
  _$jscoverage['plugins/inserthtml.js'][54] = 0;
  _$jscoverage['plugins/inserthtml.js'][56] = 0;
  _$jscoverage['plugins/inserthtml.js'][58] = 0;
  _$jscoverage['plugins/inserthtml.js'][59] = 0;
  _$jscoverage['plugins/inserthtml.js'][60] = 0;
  _$jscoverage['plugins/inserthtml.js'][61] = 0;
  _$jscoverage['plugins/inserthtml.js'][63] = 0;
  _$jscoverage['plugins/inserthtml.js'][64] = 0;
  _$jscoverage['plugins/inserthtml.js'][65] = 0;
  _$jscoverage['plugins/inserthtml.js'][67] = 0;
  _$jscoverage['plugins/inserthtml.js'][70] = 0;
  _$jscoverage['plugins/inserthtml.js'][71] = 0;
  _$jscoverage['plugins/inserthtml.js'][72] = 0;
  _$jscoverage['plugins/inserthtml.js'][73] = 0;
  _$jscoverage['plugins/inserthtml.js'][76] = 0;
  _$jscoverage['plugins/inserthtml.js'][77] = 0;
  _$jscoverage['plugins/inserthtml.js'][78] = 0;
  _$jscoverage['plugins/inserthtml.js'][79] = 0;
  _$jscoverage['plugins/inserthtml.js'][80] = 0;
  _$jscoverage['plugins/inserthtml.js'][81] = 0;
  _$jscoverage['plugins/inserthtml.js'][82] = 0;
  _$jscoverage['plugins/inserthtml.js'][87] = 0;
  _$jscoverage['plugins/inserthtml.js'][88] = 0;
  _$jscoverage['plugins/inserthtml.js'][89] = 0;
  _$jscoverage['plugins/inserthtml.js'][90] = 0;
  _$jscoverage['plugins/inserthtml.js'][91] = 0;
  _$jscoverage['plugins/inserthtml.js'][92] = 0;
  _$jscoverage['plugins/inserthtml.js'][93] = 0;
  _$jscoverage['plugins/inserthtml.js'][95] = 0;
  _$jscoverage['plugins/inserthtml.js'][102] = 0;
  _$jscoverage['plugins/inserthtml.js'][104] = 0;
  _$jscoverage['plugins/inserthtml.js'][105] = 0;
  _$jscoverage['plugins/inserthtml.js'][106] = 0;
  _$jscoverage['plugins/inserthtml.js'][107] = 0;
  _$jscoverage['plugins/inserthtml.js'][108] = 0;
  _$jscoverage['plugins/inserthtml.js'][109] = 0;
  _$jscoverage['plugins/inserthtml.js'][110] = 0;
  _$jscoverage['plugins/inserthtml.js'][111] = 0;
  _$jscoverage['plugins/inserthtml.js'][112] = 0;
  _$jscoverage['plugins/inserthtml.js'][116] = 0;
  _$jscoverage['plugins/inserthtml.js'][117] = 0;
  _$jscoverage['plugins/inserthtml.js'][118] = 0;
  _$jscoverage['plugins/inserthtml.js'][119] = 0;
  _$jscoverage['plugins/inserthtml.js'][121] = 0;
  _$jscoverage['plugins/inserthtml.js'][122] = 0;
  _$jscoverage['plugins/inserthtml.js'][123] = 0;
  _$jscoverage['plugins/inserthtml.js'][124] = 0;
  _$jscoverage['plugins/inserthtml.js'][125] = 0;
  _$jscoverage['plugins/inserthtml.js'][128] = 0;
  _$jscoverage['plugins/inserthtml.js'][129] = 0;
  _$jscoverage['plugins/inserthtml.js'][130] = 0;
  _$jscoverage['plugins/inserthtml.js'][131] = 0;
  _$jscoverage['plugins/inserthtml.js'][132] = 0;
  _$jscoverage['plugins/inserthtml.js'][133] = 0;
  _$jscoverage['plugins/inserthtml.js'][135] = 0;
  _$jscoverage['plugins/inserthtml.js'][137] = 0;
  _$jscoverage['plugins/inserthtml.js'][138] = 0;
  _$jscoverage['plugins/inserthtml.js'][139] = 0;
  _$jscoverage['plugins/inserthtml.js'][140] = 0;
  _$jscoverage['plugins/inserthtml.js'][141] = 0;
  _$jscoverage['plugins/inserthtml.js'][142] = 0;
  _$jscoverage['plugins/inserthtml.js'][143] = 0;
  _$jscoverage['plugins/inserthtml.js'][144] = 0;
  _$jscoverage['plugins/inserthtml.js'][148] = 0;
  _$jscoverage['plugins/inserthtml.js'][149] = 0;
  _$jscoverage['plugins/inserthtml.js'][150] = 0;
  _$jscoverage['plugins/inserthtml.js'][152] = 0;
  _$jscoverage['plugins/inserthtml.js'][154] = 0;
  _$jscoverage['plugins/inserthtml.js'][157] = 0;
  _$jscoverage['plugins/inserthtml.js'][158] = 0;
  _$jscoverage['plugins/inserthtml.js'][159] = 0;
  _$jscoverage['plugins/inserthtml.js'][160] = 0;
  _$jscoverage['plugins/inserthtml.js'][161] = 0;
  _$jscoverage['plugins/inserthtml.js'][162] = 0;
  _$jscoverage['plugins/inserthtml.js'][163] = 0;
  _$jscoverage['plugins/inserthtml.js'][165] = 0;
  _$jscoverage['plugins/inserthtml.js'][167] = 0;
  _$jscoverage['plugins/inserthtml.js'][170] = 0;
  _$jscoverage['plugins/inserthtml.js'][171] = 0;
  _$jscoverage['plugins/inserthtml.js'][172] = 0;
  _$jscoverage['plugins/inserthtml.js'][174] = 0;
  _$jscoverage['plugins/inserthtml.js'][175] = 0;
  _$jscoverage['plugins/inserthtml.js'][176] = 0;
  _$jscoverage['plugins/inserthtml.js'][177] = 0;
  _$jscoverage['plugins/inserthtml.js'][179] = 0;
  _$jscoverage['plugins/inserthtml.js'][180] = 0;
  _$jscoverage['plugins/inserthtml.js'][181] = 0;
  _$jscoverage['plugins/inserthtml.js'][182] = 0;
  _$jscoverage['plugins/inserthtml.js'][188] = 0;
  _$jscoverage['plugins/inserthtml.js'][190] = 0;
  _$jscoverage['plugins/inserthtml.js'][191] = 0;
  _$jscoverage['plugins/inserthtml.js'][192] = 0;
  _$jscoverage['plugins/inserthtml.js'][193] = 0;
  _$jscoverage['plugins/inserthtml.js'][197] = 0;
  _$jscoverage['plugins/inserthtml.js'][202] = 0;
  _$jscoverage['plugins/inserthtml.js'][204] = 0;
  _$jscoverage['plugins/inserthtml.js'][207] = 0;
  _$jscoverage['plugins/inserthtml.js'][208] = 0;
  _$jscoverage['plugins/inserthtml.js'][210] = 0;
  _$jscoverage['plugins/inserthtml.js'][211] = 0;
  _$jscoverage['plugins/inserthtml.js'][213] = 0;
  _$jscoverage['plugins/inserthtml.js'][217] = 0;
  _$jscoverage['plugins/inserthtml.js'][219] = 0;
  _$jscoverage['plugins/inserthtml.js'][220] = 0;
  _$jscoverage['plugins/inserthtml.js'][223] = 0;
  _$jscoverage['plugins/inserthtml.js'][224] = 0;
  _$jscoverage['plugins/inserthtml.js'][225] = 0;
  _$jscoverage['plugins/inserthtml.js'][226] = 0;
  _$jscoverage['plugins/inserthtml.js'][228] = 0;
  _$jscoverage['plugins/inserthtml.js'][232] = 0;
  _$jscoverage['plugins/inserthtml.js'][233] = 0;
  _$jscoverage['plugins/inserthtml.js'][235] = 0;
  _$jscoverage['plugins/inserthtml.js'][236] = 0;
  _$jscoverage['plugins/inserthtml.js'][243] = 0;
  _$jscoverage['plugins/inserthtml.js'][244] = 0;
  _$jscoverage['plugins/inserthtml.js'][251] = 0;
  _$jscoverage['plugins/inserthtml.js'][252] = 0;
  _$jscoverage['plugins/inserthtml.js'][253] = 0;
  _$jscoverage['plugins/inserthtml.js'][254] = 0;
}
_$jscoverage['plugins/inserthtml.js'].source = ["<span class=\"c\">/**</span>","<span class=\"c\"> * &#25554;&#20837;html&#23383;&#31526;&#20018;&#25554;&#20214;</span>","<span class=\"c\"> * @file</span>","<span class=\"c\"> * @since 1.2.6.1</span>","<span class=\"c\"> */</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * &#23545;&#32534;&#36753;&#22120;&#21306;&#22495;&#25554;&#20837;html&#23383;&#31526;&#20018;</span>","<span class=\"c\"> * @command inserthtml</span>","<span class=\"c\"> * @method execCommand</span>","<span class=\"c\"> * @param { String } cmd &#21629;&#20196;&#23383;&#31526;&#20018;</span>","<span class=\"c\"> * @param { String } html &#25554;&#20837;&#30340;html&#23383;&#31526;&#20018;</span>","<span class=\"c\"> * @example</span>","<span class=\"c\"> * ```javascript</span>","<span class=\"c\"> * editor.execCommand( 'insertcode', '&lt;p&gt;&#25105;&#26159;UEdtior&#24320;&#21457;&#32773;&lt;/P&gt;' );</span>","<span class=\"c\"> * ```</span>","<span class=\"c\"> */</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * &#23545;&#32534;&#36753;&#22120;&#21306;&#22495;&#25554;&#20837;html&#23383;&#31526;&#20018;</span>","<span class=\"c\"> * @command inserthtml</span>","<span class=\"c\"> * @method execCommand</span>","<span class=\"c\"> * @param { String } cmd &#21629;&#20196;&#23383;&#31526;&#20018;</span>","<span class=\"c\"> * @param { String } html &#25554;&#20837;&#30340;html&#23383;&#31526;&#20018;</span>","<span class=\"c\"> * @param { Bool } notNeedFilter &#20256;true&#26102;&#19981;&#36208;&#36807;&#28388;&#35268;&#21017;&#65292;&#21453;&#20043;&#35201;&#36208;&#37197;&#32622;&#39033;&#36807;&#28388;&#35268;&#21017;</span>","<span class=\"c\"> * @example</span>","<span class=\"c\"> * ```javascript</span>","<span class=\"c\"> * editor.execCommand( 'inserthtml', '&lt;div&gt;&#25105;&#26159;UEdtior&#24320;&#21457;&#32773;&lt;/div&gt;' ,true);</span>","<span class=\"c\"> * ```</span>","<span class=\"c\"> */</span>","","UE<span class=\"k\">.</span>commands<span class=\"k\">[</span><span class=\"s\">'inserthtml'</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","    execCommand<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>command<span class=\"k\">,</span>html<span class=\"k\">,</span>notNeedFilter<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">,</span>","            range<span class=\"k\">,</span>","            div<span class=\"k\">;</span>","        <span class=\"k\">if</span><span class=\"k\">(!</span>html<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>me<span class=\"k\">.</span>fireEvent<span class=\"k\">(</span><span class=\"s\">'beforeinserthtml'</span><span class=\"k\">,</span>html<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"k\">true</span><span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        range <span class=\"k\">=</span> me<span class=\"k\">.</span>selection<span class=\"k\">.</span>getRange<span class=\"k\">();</span>","        div <span class=\"k\">=</span> range<span class=\"k\">.</span>document<span class=\"k\">.</span>createElement<span class=\"k\">(</span> <span class=\"s\">'div'</span> <span class=\"k\">);</span>","        div<span class=\"k\">.</span>style<span class=\"k\">.</span>display <span class=\"k\">=</span> <span class=\"s\">'inline'</span><span class=\"k\">;</span>","","        <span class=\"k\">if</span> <span class=\"k\">(!</span>notNeedFilter<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> root <span class=\"k\">=</span> UE<span class=\"k\">.</span>htmlparser<span class=\"k\">(</span>html<span class=\"k\">);</span>","            <span class=\"c\">//&#22914;&#26524;&#32473;&#20102;&#36807;&#28388;&#35268;&#21017;&#23601;&#20808;&#36827;&#34892;&#36807;&#28388;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>me<span class=\"k\">.</span>options<span class=\"k\">.</span>filterRules<span class=\"k\">)</span><span class=\"k\">{</span>","                UE<span class=\"k\">.</span>filterNode<span class=\"k\">(</span>root<span class=\"k\">,</span>me<span class=\"k\">.</span>options<span class=\"k\">.</span>filterRules<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"c\">//&#25191;&#34892;&#40664;&#35748;&#30340;&#22788;&#29702;</span>","            me<span class=\"k\">.</span>filterInputRule<span class=\"k\">(</span>root<span class=\"k\">);</span>","            html <span class=\"k\">=</span> root<span class=\"k\">.</span>toHtml<span class=\"k\">()</span>","        <span class=\"k\">}</span>","        div<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> utils<span class=\"k\">.</span>trim<span class=\"k\">(</span> html <span class=\"k\">);</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>range<span class=\"k\">.</span>collapsed <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> tmpNode <span class=\"k\">=</span> range<span class=\"k\">.</span>startContainer<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>domUtils<span class=\"k\">.</span>isFillChar<span class=\"k\">(</span>tmpNode<span class=\"k\">))</span><span class=\"k\">{</span>","                range<span class=\"k\">.</span>setStartBefore<span class=\"k\">(</span>tmpNode<span class=\"k\">)</span>","            <span class=\"k\">}</span>","            tmpNode <span class=\"k\">=</span> range<span class=\"k\">.</span>endContainer<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>domUtils<span class=\"k\">.</span>isFillChar<span class=\"k\">(</span>tmpNode<span class=\"k\">))</span><span class=\"k\">{</span>","                range<span class=\"k\">.</span>setEndAfter<span class=\"k\">(</span>tmpNode<span class=\"k\">)</span>","            <span class=\"k\">}</span>","            range<span class=\"k\">.</span>txtToElmBoundary<span class=\"k\">();</span>","            <span class=\"c\">//&#32467;&#26463;&#36793;&#30028;&#21487;&#33021;&#25918;&#21040;&#20102;br&#30340;&#21069;&#36793;&#65292;&#35201;&#25226;br&#21253;&#21547;&#36827;&#26469;</span>","            <span class=\"c\">// x[xxx]&lt;br/&gt;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>range<span class=\"k\">.</span>endContainer <span class=\"k\">&amp;&amp;</span> range<span class=\"k\">.</span>endContainer<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span><span class=\"k\">)</span><span class=\"k\">{</span>","                tmpNode <span class=\"k\">=</span> range<span class=\"k\">.</span>endContainer<span class=\"k\">.</span>childNodes<span class=\"k\">[</span>range<span class=\"k\">.</span>endOffset<span class=\"k\">];</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>tmpNode <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>isBr<span class=\"k\">(</span>tmpNode<span class=\"k\">))</span><span class=\"k\">{</span>","                    range<span class=\"k\">.</span>setEndAfter<span class=\"k\">(</span>tmpNode<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>range<span class=\"k\">.</span>startOffset <span class=\"k\">==</span> <span class=\"s\">0</span><span class=\"k\">)</span><span class=\"k\">{</span>","                tmpNode <span class=\"k\">=</span> range<span class=\"k\">.</span>startContainer<span class=\"k\">;</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>domUtils<span class=\"k\">.</span>isBoundaryNode<span class=\"k\">(</span>tmpNode<span class=\"k\">,</span><span class=\"s\">'firstChild'</span><span class=\"k\">)</span> <span class=\"k\">)</span><span class=\"k\">{</span>","                    tmpNode <span class=\"k\">=</span> range<span class=\"k\">.</span>endContainer<span class=\"k\">;</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>range<span class=\"k\">.</span>endOffset <span class=\"k\">==</span> <span class=\"k\">(</span>tmpNode<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">3</span> <span class=\"k\">?</span> tmpNode<span class=\"k\">.</span>nodeValue<span class=\"k\">.</span>length <span class=\"k\">:</span> tmpNode<span class=\"k\">.</span>childNodes<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>isBoundaryNode<span class=\"k\">(</span>tmpNode<span class=\"k\">,</span><span class=\"s\">'lastChild'</span><span class=\"k\">))</span><span class=\"k\">{</span>","                        me<span class=\"k\">.</span>body<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">'&lt;p&gt;'</span><span class=\"k\">+(</span>browser<span class=\"k\">.</span>ie <span class=\"k\">?</span> <span class=\"s\">''</span> <span class=\"k\">:</span> <span class=\"s\">'&lt;br/&gt;'</span><span class=\"k\">)+</span><span class=\"s\">'&lt;/p&gt;'</span><span class=\"k\">;</span>","                        range<span class=\"k\">.</span>setStart<span class=\"k\">(</span>me<span class=\"k\">.</span>body<span class=\"k\">.</span>firstChild<span class=\"k\">,</span><span class=\"s\">0</span><span class=\"k\">).</span>collapse<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">)</span>","","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"k\">!</span>range<span class=\"k\">.</span>collapsed <span class=\"k\">&amp;&amp;</span> range<span class=\"k\">.</span>deleteContents<span class=\"k\">();</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>range<span class=\"k\">.</span>startContainer<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span><span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> child <span class=\"k\">=</span> range<span class=\"k\">.</span>startContainer<span class=\"k\">.</span>childNodes<span class=\"k\">[</span>range<span class=\"k\">.</span>startOffset<span class=\"k\">],</span>pre<span class=\"k\">;</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>child <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>isBlockElm<span class=\"k\">(</span>child<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>pre <span class=\"k\">=</span> child<span class=\"k\">.</span>previousSibling<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>isBlockElm<span class=\"k\">(</span>pre<span class=\"k\">))</span><span class=\"k\">{</span>","                    range<span class=\"k\">.</span>setEnd<span class=\"k\">(</span>pre<span class=\"k\">,</span>pre<span class=\"k\">.</span>childNodes<span class=\"k\">.</span>length<span class=\"k\">).</span>collapse<span class=\"k\">();</span>","                    <span class=\"k\">while</span><span class=\"k\">(</span>child<span class=\"k\">.</span>firstChild<span class=\"k\">)</span><span class=\"k\">{</span>","                        pre<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>child<span class=\"k\">.</span>firstChild<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                    domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>child<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","        <span class=\"k\">}</span>","","","        <span class=\"k\">var</span> child<span class=\"k\">,</span>parent<span class=\"k\">,</span>pre<span class=\"k\">,</span>tmp<span class=\"k\">,</span>hadBreak <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> nextNode<span class=\"k\">;</span>","        <span class=\"c\">//&#22914;&#26524;&#24403;&#21069;&#20301;&#32622;&#36873;&#20013;&#20102;fillchar&#35201;&#24178;&#25481;&#65292;&#35201;&#19981;&#20250;&#20135;&#29983;&#31354;&#34892;</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>range<span class=\"k\">.</span>inFillChar<span class=\"k\">())</span><span class=\"k\">{</span>","            child <span class=\"k\">=</span> range<span class=\"k\">.</span>startContainer<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>domUtils<span class=\"k\">.</span>isFillChar<span class=\"k\">(</span>child<span class=\"k\">))</span><span class=\"k\">{</span>","                range<span class=\"k\">.</span>setStartBefore<span class=\"k\">(</span>child<span class=\"k\">).</span>collapse<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","                domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>child<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span>domUtils<span class=\"k\">.</span>isFillChar<span class=\"k\">(</span>child<span class=\"k\">,</span><span class=\"k\">true</span><span class=\"k\">))</span><span class=\"k\">{</span>","                child<span class=\"k\">.</span>nodeValue <span class=\"k\">=</span> child<span class=\"k\">.</span>nodeValue<span class=\"k\">.</span>replace<span class=\"k\">(</span>fillCharReg<span class=\"k\">,</span><span class=\"s\">''</span><span class=\"k\">);</span>","                range<span class=\"k\">.</span>startOffset<span class=\"k\">--;</span>","                range<span class=\"k\">.</span>collapsed <span class=\"k\">&amp;&amp;</span> range<span class=\"k\">.</span>collapse<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">)</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"c\">//&#21015;&#34920;&#21333;&#29420;&#22788;&#29702;</span>","        <span class=\"k\">var</span> li <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>findParentByTagName<span class=\"k\">(</span>range<span class=\"k\">.</span>startContainer<span class=\"k\">,</span><span class=\"s\">'li'</span><span class=\"k\">,</span><span class=\"k\">true</span><span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>li<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> next<span class=\"k\">,</span>last<span class=\"k\">;</span>","            <span class=\"k\">while</span><span class=\"k\">(</span>child <span class=\"k\">=</span> div<span class=\"k\">.</span>firstChild<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"c\">//&#38024;&#23545;hr&#21333;&#29420;&#22788;&#29702;&#19968;&#19979;&#20808;</span>","                <span class=\"k\">while</span><span class=\"k\">(</span>child <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>child<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">3</span> <span class=\"k\">||</span> <span class=\"k\">!</span>domUtils<span class=\"k\">.</span>isBlockElm<span class=\"k\">(</span>child<span class=\"k\">)</span> <span class=\"k\">||</span> child<span class=\"k\">.</span>tagName<span class=\"k\">==</span><span class=\"s\">'HR'</span> <span class=\"k\">))</span><span class=\"k\">{</span>","                    next <span class=\"k\">=</span> child<span class=\"k\">.</span>nextSibling<span class=\"k\">;</span>","                    range<span class=\"k\">.</span>insertNode<span class=\"k\">(</span> child<span class=\"k\">).</span>collapse<span class=\"k\">();</span>","                    last <span class=\"k\">=</span> child<span class=\"k\">;</span>","                    child <span class=\"k\">=</span> next<span class=\"k\">;</span>","","                <span class=\"k\">}</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>child<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"s\">/^(ol|ul)$/i</span><span class=\"k\">.</span>test<span class=\"k\">(</span>child<span class=\"k\">.</span>tagName<span class=\"k\">))</span><span class=\"k\">{</span>","                        <span class=\"k\">while</span><span class=\"k\">(</span>child<span class=\"k\">.</span>firstChild<span class=\"k\">)</span><span class=\"k\">{</span>","                            last <span class=\"k\">=</span> child<span class=\"k\">.</span>firstChild<span class=\"k\">;</span>","                            domUtils<span class=\"k\">.</span>insertAfter<span class=\"k\">(</span>li<span class=\"k\">,</span>child<span class=\"k\">.</span>firstChild<span class=\"k\">);</span>","                            li <span class=\"k\">=</span> li<span class=\"k\">.</span>nextSibling<span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>child<span class=\"k\">)</span>","                    <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                        <span class=\"k\">var</span> tmpLi<span class=\"k\">;</span>","                        next <span class=\"k\">=</span> child<span class=\"k\">.</span>nextSibling<span class=\"k\">;</span>","                        tmpLi <span class=\"k\">=</span> me<span class=\"k\">.</span>document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">'li'</span><span class=\"k\">);</span>","                        domUtils<span class=\"k\">.</span>insertAfter<span class=\"k\">(</span>li<span class=\"k\">,</span>tmpLi<span class=\"k\">);</span>","                        tmpLi<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>child<span class=\"k\">);</span>","                        last <span class=\"k\">=</span> child<span class=\"k\">;</span>","                        child <span class=\"k\">=</span> next<span class=\"k\">;</span>","                        li <span class=\"k\">=</span> tmpLi<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            li <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>findParentByTagName<span class=\"k\">(</span>range<span class=\"k\">.</span>startContainer<span class=\"k\">,</span><span class=\"s\">'li'</span><span class=\"k\">,</span><span class=\"k\">true</span><span class=\"k\">);</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>domUtils<span class=\"k\">.</span>isEmptyBlock<span class=\"k\">(</span>li<span class=\"k\">))</span><span class=\"k\">{</span>","                domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>li<span class=\"k\">)</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>last<span class=\"k\">)</span><span class=\"k\">{</span>","","                range<span class=\"k\">.</span>setStartAfter<span class=\"k\">(</span>last<span class=\"k\">).</span>collapse<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">).</span>select<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">)</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","            <span class=\"k\">while</span> <span class=\"k\">(</span> child <span class=\"k\">=</span> div<span class=\"k\">.</span>firstChild <span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>hadBreak<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> p <span class=\"k\">=</span> me<span class=\"k\">.</span>document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">'p'</span><span class=\"k\">);</span>","                    <span class=\"k\">while</span><span class=\"k\">(</span>child <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>child<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">3</span> <span class=\"k\">||</span> <span class=\"k\">!</span>dtd<span class=\"k\">.</span>$block<span class=\"k\">[</span>child<span class=\"k\">.</span>tagName<span class=\"k\">]))</span><span class=\"k\">{</span>","                        nextNode <span class=\"k\">=</span> child<span class=\"k\">.</span>nextSibling<span class=\"k\">;</span>","                        p<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>child<span class=\"k\">);</span>","                        child <span class=\"k\">=</span> nextNode<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>p<span class=\"k\">.</span>firstChild<span class=\"k\">)</span><span class=\"k\">{</span>","","                        child <span class=\"k\">=</span> p","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                range<span class=\"k\">.</span>insertNode<span class=\"k\">(</span> child <span class=\"k\">);</span>","                nextNode <span class=\"k\">=</span> child<span class=\"k\">.</span>nextSibling<span class=\"k\">;</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>hadBreak <span class=\"k\">&amp;&amp;</span> child<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> domUtils<span class=\"k\">.</span>NODE_ELEMENT <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>isBlockElm<span class=\"k\">(</span> child <span class=\"k\">)</span> <span class=\"k\">)</span><span class=\"k\">{</span>","","                    parent <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>findParent<span class=\"k\">(</span> child<span class=\"k\">,</span><span class=\"k\">function</span> <span class=\"k\">(</span> node <span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> domUtils<span class=\"k\">.</span>isBlockElm<span class=\"k\">(</span> node <span class=\"k\">);</span> <span class=\"k\">}</span> <span class=\"k\">);</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span> parent <span class=\"k\">&amp;&amp;</span> parent<span class=\"k\">.</span>tagName<span class=\"k\">.</span>toLowerCase<span class=\"k\">()</span> <span class=\"k\">!=</span> <span class=\"s\">'body'</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!(</span>dtd<span class=\"k\">[</span>parent<span class=\"k\">.</span>tagName<span class=\"k\">][</span>child<span class=\"k\">.</span>nodeName<span class=\"k\">]</span> <span class=\"k\">&amp;&amp;</span> child<span class=\"k\">.</span>parentNode <span class=\"k\">===</span> parent<span class=\"k\">))</span><span class=\"k\">{</span>","                        <span class=\"k\">if</span><span class=\"k\">(!</span>dtd<span class=\"k\">[</span>parent<span class=\"k\">.</span>tagName<span class=\"k\">][</span>child<span class=\"k\">.</span>nodeName<span class=\"k\">])</span><span class=\"k\">{</span>","                            pre <span class=\"k\">=</span> parent<span class=\"k\">;</span>","                        <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                            tmp <span class=\"k\">=</span> child<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","                            <span class=\"k\">while</span> <span class=\"k\">(</span>tmp <span class=\"k\">!==</span> parent<span class=\"k\">)</span><span class=\"k\">{</span>","                                pre <span class=\"k\">=</span> tmp<span class=\"k\">;</span>","                                tmp <span class=\"k\">=</span> tmp<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span>","","","                        domUtils<span class=\"k\">.</span>breakParent<span class=\"k\">(</span> child<span class=\"k\">,</span> pre <span class=\"k\">||</span> tmp <span class=\"k\">);</span>","                        <span class=\"c\">//&#21435;&#25481;break&#21518;&#21069;&#19968;&#20010;&#22810;&#20313;&#30340;&#33410;&#28857;  &lt;p&gt;|&lt;[p&gt; ==&gt; &lt;p&gt;&lt;/p&gt;&lt;div&gt;&lt;/div&gt;&lt;p&gt;|&lt;/p&gt;</span>","                        <span class=\"k\">var</span> pre <span class=\"k\">=</span> child<span class=\"k\">.</span>previousSibling<span class=\"k\">;</span>","                        domUtils<span class=\"k\">.</span>trimWhiteTextNode<span class=\"k\">(</span>pre<span class=\"k\">);</span>","                        <span class=\"k\">if</span><span class=\"k\">(!</span>pre<span class=\"k\">.</span>childNodes<span class=\"k\">.</span>length<span class=\"k\">)</span><span class=\"k\">{</span>","                            domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>pre<span class=\"k\">);</span>","                        <span class=\"k\">}</span>","                        <span class=\"c\">//trace:2012,&#22312;&#38750;ie&#30340;&#24773;&#20917;&#65292;&#20999;&#24320;&#21518;&#21097;&#19979;&#30340;&#33410;&#28857;&#26377;&#21487;&#33021;&#19981;&#33021;&#28857;&#20837;&#20809;&#26631;&#28155;&#21152;br&#21344;&#20301;</span>","","                        <span class=\"k\">if</span><span class=\"k\">(!</span>browser<span class=\"k\">.</span>ie <span class=\"k\">&amp;&amp;</span>","                            <span class=\"k\">(</span>next <span class=\"k\">=</span> child<span class=\"k\">.</span>nextSibling<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span>","                            domUtils<span class=\"k\">.</span>isBlockElm<span class=\"k\">(</span>next<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span>","                            next<span class=\"k\">.</span>lastChild <span class=\"k\">&amp;&amp;</span>","                            <span class=\"k\">!</span>domUtils<span class=\"k\">.</span>isBr<span class=\"k\">(</span>next<span class=\"k\">.</span>lastChild<span class=\"k\">))</span><span class=\"k\">{</span>","                            next<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>me<span class=\"k\">.</span>document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">'br'</span><span class=\"k\">));</span>","                        <span class=\"k\">}</span>","                        hadBreak <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                <span class=\"k\">var</span> next <span class=\"k\">=</span> child<span class=\"k\">.</span>nextSibling<span class=\"k\">;</span>","                <span class=\"k\">if</span><span class=\"k\">(!</span>div<span class=\"k\">.</span>firstChild <span class=\"k\">&amp;&amp;</span> next <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>isBlockElm<span class=\"k\">(</span>next<span class=\"k\">))</span><span class=\"k\">{</span>","","                    range<span class=\"k\">.</span>setStart<span class=\"k\">(</span>next<span class=\"k\">,</span><span class=\"s\">0</span><span class=\"k\">).</span>collapse<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","                    <span class=\"k\">break</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                range<span class=\"k\">.</span>setEndAfter<span class=\"k\">(</span> child <span class=\"k\">).</span>collapse<span class=\"k\">();</span>","","            <span class=\"k\">}</span>","","            child <span class=\"k\">=</span> range<span class=\"k\">.</span>startContainer<span class=\"k\">;</span>","","            <span class=\"k\">if</span><span class=\"k\">(</span>nextNode <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>isBr<span class=\"k\">(</span>nextNode<span class=\"k\">))</span><span class=\"k\">{</span>","                domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>nextNode<span class=\"k\">)</span>","            <span class=\"k\">}</span>","            <span class=\"c\">//&#29992;chrome&#21487;&#33021;&#26377;&#31354;&#30333;&#23637;&#20301;&#31526;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>domUtils<span class=\"k\">.</span>isBlockElm<span class=\"k\">(</span>child<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>isEmptyNode<span class=\"k\">(</span>child<span class=\"k\">))</span><span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>nextNode <span class=\"k\">=</span> child<span class=\"k\">.</span>nextSibling<span class=\"k\">)</span><span class=\"k\">{</span>","                    domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>child<span class=\"k\">);</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>nextNode<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span> <span class=\"k\">&amp;&amp;</span> dtd<span class=\"k\">.</span>$block<span class=\"k\">[</span>nextNode<span class=\"k\">.</span>tagName<span class=\"k\">])</span><span class=\"k\">{</span>","","                        range<span class=\"k\">.</span>setStart<span class=\"k\">(</span>nextNode<span class=\"k\">,</span><span class=\"s\">0</span><span class=\"k\">).</span>collapse<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">).</span>shrinkBoundary<span class=\"k\">()</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","","                    <span class=\"k\">try</span><span class=\"k\">{</span>","                        child<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> browser<span class=\"k\">.</span>ie <span class=\"k\">?</span> domUtils<span class=\"k\">.</span>fillChar <span class=\"k\">:</span> <span class=\"s\">'&lt;br/&gt;'</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span><span class=\"k\">catch</span><span class=\"k\">(</span>e<span class=\"k\">)</span><span class=\"k\">{</span>","                        range<span class=\"k\">.</span>setStartBefore<span class=\"k\">(</span>child<span class=\"k\">);</span>","                        domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>child<span class=\"k\">)</span>","                    <span class=\"k\">}</span>","","                <span class=\"k\">}</span>","","            <span class=\"k\">}</span>","            <span class=\"c\">//&#21152;&#19978;true&#22240;&#20026;&#22312;&#21024;&#38500;&#34920;&#24773;&#31561;&#26102;&#20250;&#21024;&#20004;&#27425;&#65292;&#31532;&#19968;&#27425;&#26159;&#21024;&#30340;fillData</span>","            <span class=\"k\">try</span><span class=\"k\">{</span>","                range<span class=\"k\">.</span>select<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">catch</span><span class=\"k\">(</span>e<span class=\"k\">)</span><span class=\"k\">{}</span>","","        <span class=\"k\">}</span>","","","","        setTimeout<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            range <span class=\"k\">=</span> me<span class=\"k\">.</span>selection<span class=\"k\">.</span>getRange<span class=\"k\">();</span>","            range<span class=\"k\">.</span>scrollToView<span class=\"k\">(</span>me<span class=\"k\">.</span>autoHeightEnabled<span class=\"k\">,</span>me<span class=\"k\">.</span>autoHeightEnabled <span class=\"k\">?</span> domUtils<span class=\"k\">.</span>getXY<span class=\"k\">(</span>me<span class=\"k\">.</span>iframe<span class=\"k\">).</span>y<span class=\"k\">:</span><span class=\"s\">0</span><span class=\"k\">);</span>","            me<span class=\"k\">.</span>fireEvent<span class=\"k\">(</span><span class=\"s\">'afterinserthtml'</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span><span class=\"s\">200</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>"];
_$jscoverage['plugins/inserthtml.js'][31]++;
UE.commands.inserthtml = {execCommand: (function (command, html, notNeedFilter) {
  _$jscoverage['plugins/inserthtml.js'][33]++;
  var me = this, range, div;
  _$jscoverage['plugins/inserthtml.js'][36]++;
  if ((! html)) {
    _$jscoverage['plugins/inserthtml.js'][37]++;
    return;
  }
  _$jscoverage['plugins/inserthtml.js'][39]++;
  if ((me.fireEvent("beforeinserthtml", html) === true)) {
    _$jscoverage['plugins/inserthtml.js'][40]++;
    return;
  }
  _$jscoverage['plugins/inserthtml.js'][42]++;
  range = me.selection.getRange();
  _$jscoverage['plugins/inserthtml.js'][43]++;
  div = range.document.createElement("div");
  _$jscoverage['plugins/inserthtml.js'][44]++;
  div.style.display = "inline";
  _$jscoverage['plugins/inserthtml.js'][46]++;
  if ((! notNeedFilter)) {
    _$jscoverage['plugins/inserthtml.js'][47]++;
    var root = UE.htmlparser(html);
    _$jscoverage['plugins/inserthtml.js'][49]++;
    if (me.options.filterRules) {
      _$jscoverage['plugins/inserthtml.js'][50]++;
      UE.filterNode(root, me.options.filterRules);
    }
    _$jscoverage['plugins/inserthtml.js'][53]++;
    me.filterInputRule(root);
    _$jscoverage['plugins/inserthtml.js'][54]++;
    html = root.toHtml();
  }
  _$jscoverage['plugins/inserthtml.js'][56]++;
  div.innerHTML = utils.trim(html);
  _$jscoverage['plugins/inserthtml.js'][58]++;
  if ((! range.collapsed)) {
    _$jscoverage['plugins/inserthtml.js'][59]++;
    var tmpNode = range.startContainer;
    _$jscoverage['plugins/inserthtml.js'][60]++;
    if (domUtils.isFillChar(tmpNode)) {
      _$jscoverage['plugins/inserthtml.js'][61]++;
      range.setStartBefore(tmpNode);
    }
    _$jscoverage['plugins/inserthtml.js'][63]++;
    tmpNode = range.endContainer;
    _$jscoverage['plugins/inserthtml.js'][64]++;
    if (domUtils.isFillChar(tmpNode)) {
      _$jscoverage['plugins/inserthtml.js'][65]++;
      range.setEndAfter(tmpNode);
    }
    _$jscoverage['plugins/inserthtml.js'][67]++;
    range.txtToElmBoundary();
    _$jscoverage['plugins/inserthtml.js'][70]++;
    if ((range.endContainer && (range.endContainer.nodeType == 1))) {
      _$jscoverage['plugins/inserthtml.js'][71]++;
      tmpNode = range.endContainer.childNodes[range.endOffset];
      _$jscoverage['plugins/inserthtml.js'][72]++;
      if ((tmpNode && domUtils.isBr(tmpNode))) {
        _$jscoverage['plugins/inserthtml.js'][73]++;
        range.setEndAfter(tmpNode);
      }
    }
    _$jscoverage['plugins/inserthtml.js'][76]++;
    if ((range.startOffset == 0)) {
      _$jscoverage['plugins/inserthtml.js'][77]++;
      tmpNode = range.startContainer;
      _$jscoverage['plugins/inserthtml.js'][78]++;
      if (domUtils.isBoundaryNode(tmpNode, "firstChild")) {
        _$jscoverage['plugins/inserthtml.js'][79]++;
        tmpNode = range.endContainer;
        _$jscoverage['plugins/inserthtml.js'][80]++;
        if (((range.endOffset == ((tmpNode.nodeType == 3)? tmpNode.nodeValue.length: tmpNode.childNodes.length)) && domUtils.isBoundaryNode(tmpNode, "lastChild"))) {
          _$jscoverage['plugins/inserthtml.js'][81]++;
          me.body.innerHTML = ("<p>" + (browser.ie? "": "<br/>") + "</p>");
          _$jscoverage['plugins/inserthtml.js'][82]++;
          range.setStart(me.body.firstChild, 0).collapse(true);
        }
      }
    }
    _$jscoverage['plugins/inserthtml.js'][87]++;
    ((! range.collapsed) && range.deleteContents());
    _$jscoverage['plugins/inserthtml.js'][88]++;
    if ((range.startContainer.nodeType == 1)) {
      _$jscoverage['plugins/inserthtml.js'][89]++;
      var child = range.startContainer.childNodes[range.startOffset], pre;
      _$jscoverage['plugins/inserthtml.js'][90]++;
      if ((child && domUtils.isBlockElm(child) && (pre = child.previousSibling) && domUtils.isBlockElm(pre))) {
        _$jscoverage['plugins/inserthtml.js'][91]++;
        range.setEnd(pre, pre.childNodes.length).collapse();
        _$jscoverage['plugins/inserthtml.js'][92]++;
        while (child.firstChild) {
          _$jscoverage['plugins/inserthtml.js'][93]++;
          pre.appendChild(child.firstChild);
}
        _$jscoverage['plugins/inserthtml.js'][95]++;
        domUtils.remove(child);
      }
    }
  }
  _$jscoverage['plugins/inserthtml.js'][102]++;
  var child = child, parent, pre = pre, tmp, hadBreak = 0, nextNode;
  _$jscoverage['plugins/inserthtml.js'][104]++;
  if (range.inFillChar()) {
    _$jscoverage['plugins/inserthtml.js'][105]++;
    child = range.startContainer;
    _$jscoverage['plugins/inserthtml.js'][106]++;
    if (domUtils.isFillChar(child)) {
      _$jscoverage['plugins/inserthtml.js'][107]++;
      range.setStartBefore(child).collapse(true);
      _$jscoverage['plugins/inserthtml.js'][108]++;
      domUtils.remove(child);
    }
    else {
      _$jscoverage['plugins/inserthtml.js'][109]++;
      if (domUtils.isFillChar(child, true)) {
        _$jscoverage['plugins/inserthtml.js'][110]++;
        child.nodeValue = child.nodeValue.replace(fillCharReg, "");
        _$jscoverage['plugins/inserthtml.js'][111]++;
        (range.startOffset--);
        _$jscoverage['plugins/inserthtml.js'][112]++;
        (range.collapsed && range.collapse(true));
      }
    }
  }
  _$jscoverage['plugins/inserthtml.js'][116]++;
  var li = domUtils.findParentByTagName(range.startContainer, "li", true);
  _$jscoverage['plugins/inserthtml.js'][117]++;
  if (li) {
    _$jscoverage['plugins/inserthtml.js'][118]++;
    var next, last;
    _$jscoverage['plugins/inserthtml.js'][119]++;
    while ((child = div.firstChild)) {
      _$jscoverage['plugins/inserthtml.js'][121]++;
      while ((child && ((child.nodeType == 3) || (! domUtils.isBlockElm(child)) || (child.tagName == "HR")))) {
        _$jscoverage['plugins/inserthtml.js'][122]++;
        next = child.nextSibling;
        _$jscoverage['plugins/inserthtml.js'][123]++;
        range.insertNode(child).collapse();
        _$jscoverage['plugins/inserthtml.js'][124]++;
        last = child;
        _$jscoverage['plugins/inserthtml.js'][125]++;
        child = next;
}
      _$jscoverage['plugins/inserthtml.js'][128]++;
      if (child) {
        _$jscoverage['plugins/inserthtml.js'][129]++;
        if (/^(ol|ul)$/i.test(child.tagName)) {
          _$jscoverage['plugins/inserthtml.js'][130]++;
          while (child.firstChild) {
            _$jscoverage['plugins/inserthtml.js'][131]++;
            last = child.firstChild;
            _$jscoverage['plugins/inserthtml.js'][132]++;
            domUtils.insertAfter(li, child.firstChild);
            _$jscoverage['plugins/inserthtml.js'][133]++;
            li = li.nextSibling;
}
          _$jscoverage['plugins/inserthtml.js'][135]++;
          domUtils.remove(child);
        }
        else {
          _$jscoverage['plugins/inserthtml.js'][137]++;
          var tmpLi;
          _$jscoverage['plugins/inserthtml.js'][138]++;
          next = child.nextSibling;
          _$jscoverage['plugins/inserthtml.js'][139]++;
          tmpLi = me.document.createElement("li");
          _$jscoverage['plugins/inserthtml.js'][140]++;
          domUtils.insertAfter(li, tmpLi);
          _$jscoverage['plugins/inserthtml.js'][141]++;
          tmpLi.appendChild(child);
          _$jscoverage['plugins/inserthtml.js'][142]++;
          last = child;
          _$jscoverage['plugins/inserthtml.js'][143]++;
          child = next;
          _$jscoverage['plugins/inserthtml.js'][144]++;
          li = tmpLi;
        }
      }
}
    _$jscoverage['plugins/inserthtml.js'][148]++;
    li = domUtils.findParentByTagName(range.startContainer, "li", true);
    _$jscoverage['plugins/inserthtml.js'][149]++;
    if (domUtils.isEmptyBlock(li)) {
      _$jscoverage['plugins/inserthtml.js'][150]++;
      domUtils.remove(li);
    }
    _$jscoverage['plugins/inserthtml.js'][152]++;
    if (last) {
      _$jscoverage['plugins/inserthtml.js'][154]++;
      range.setStartAfter(last).collapse(true).select(true);
    }
  }
  else {
    _$jscoverage['plugins/inserthtml.js'][157]++;
    while ((child = div.firstChild)) {
      _$jscoverage['plugins/inserthtml.js'][158]++;
      if (hadBreak) {
        _$jscoverage['plugins/inserthtml.js'][159]++;
        var p = me.document.createElement("p");
        _$jscoverage['plugins/inserthtml.js'][160]++;
        while ((child && ((child.nodeType == 3) || (! dtd.$block[child.tagName])))) {
          _$jscoverage['plugins/inserthtml.js'][161]++;
          nextNode = child.nextSibling;
          _$jscoverage['plugins/inserthtml.js'][162]++;
          p.appendChild(child);
          _$jscoverage['plugins/inserthtml.js'][163]++;
          child = nextNode;
}
        _$jscoverage['plugins/inserthtml.js'][165]++;
        if (p.firstChild) {
          _$jscoverage['plugins/inserthtml.js'][167]++;
          child = p;
        }
      }
      _$jscoverage['plugins/inserthtml.js'][170]++;
      range.insertNode(child);
      _$jscoverage['plugins/inserthtml.js'][171]++;
      nextNode = child.nextSibling;
      _$jscoverage['plugins/inserthtml.js'][172]++;
      if (((! hadBreak) && (child.nodeType == domUtils.NODE_ELEMENT) && domUtils.isBlockElm(child))) {
        _$jscoverage['plugins/inserthtml.js'][174]++;
        parent = domUtils.findParent(child, (function (node) {
  _$jscoverage['plugins/inserthtml.js'][174]++;
  return domUtils.isBlockElm(node);
}));
        _$jscoverage['plugins/inserthtml.js'][175]++;
        if ((parent && (parent.tagName.toLowerCase() != "body") && (! (dtd[parent.tagName][child.nodeName] && (child.parentNode === parent))))) {
          _$jscoverage['plugins/inserthtml.js'][176]++;
          if ((! dtd[parent.tagName][child.nodeName])) {
            _$jscoverage['plugins/inserthtml.js'][177]++;
            pre = parent;
          }
          else {
            _$jscoverage['plugins/inserthtml.js'][179]++;
            tmp = child.parentNode;
            _$jscoverage['plugins/inserthtml.js'][180]++;
            while ((tmp !== parent)) {
              _$jscoverage['plugins/inserthtml.js'][181]++;
              pre = tmp;
              _$jscoverage['plugins/inserthtml.js'][182]++;
              tmp = tmp.parentNode;
}
          }
          _$jscoverage['plugins/inserthtml.js'][188]++;
          domUtils.breakParent(child, (pre || tmp));
          _$jscoverage['plugins/inserthtml.js'][190]++;
          var pre = child.previousSibling;
          _$jscoverage['plugins/inserthtml.js'][191]++;
          domUtils.trimWhiteTextNode(pre);
          _$jscoverage['plugins/inserthtml.js'][192]++;
          if ((! pre.childNodes.length)) {
            _$jscoverage['plugins/inserthtml.js'][193]++;
            domUtils.remove(pre);
          }
          _$jscoverage['plugins/inserthtml.js'][197]++;
          if (((! browser.ie) && (next = child.nextSibling) && domUtils.isBlockElm(next) && next.lastChild && (! domUtils.isBr(next.lastChild)))) {
            _$jscoverage['plugins/inserthtml.js'][202]++;
            next.appendChild(me.document.createElement("br"));
          }
          _$jscoverage['plugins/inserthtml.js'][204]++;
          hadBreak = 1;
        }
      }
      _$jscoverage['plugins/inserthtml.js'][207]++;
      var next = child.nextSibling;
      _$jscoverage['plugins/inserthtml.js'][208]++;
      if (((! div.firstChild) && next && domUtils.isBlockElm(next))) {
        _$jscoverage['plugins/inserthtml.js'][210]++;
        range.setStart(next, 0).collapse(true);
        _$jscoverage['plugins/inserthtml.js'][211]++;
        break;
      }
      _$jscoverage['plugins/inserthtml.js'][213]++;
      range.setEndAfter(child).collapse();
}
    _$jscoverage['plugins/inserthtml.js'][217]++;
    child = range.startContainer;
    _$jscoverage['plugins/inserthtml.js'][219]++;
    if ((nextNode && domUtils.isBr(nextNode))) {
      _$jscoverage['plugins/inserthtml.js'][220]++;
      domUtils.remove(nextNode);
    }
    _$jscoverage['plugins/inserthtml.js'][223]++;
    if ((domUtils.isBlockElm(child) && domUtils.isEmptyNode(child))) {
      _$jscoverage['plugins/inserthtml.js'][224]++;
      if ((nextNode = child.nextSibling)) {
        _$jscoverage['plugins/inserthtml.js'][225]++;
        domUtils.remove(child);
        _$jscoverage['plugins/inserthtml.js'][226]++;
        if (((nextNode.nodeType == 1) && dtd.$block[nextNode.tagName])) {
          _$jscoverage['plugins/inserthtml.js'][228]++;
          range.setStart(nextNode, 0).collapse(true).shrinkBoundary();
        }
      }
      else {
        _$jscoverage['plugins/inserthtml.js'][232]++;
        try {
          _$jscoverage['plugins/inserthtml.js'][233]++;
          child.innerHTML = (browser.ie? domUtils.fillChar: "<br/>");
        }
        catch (e) {
          _$jscoverage['plugins/inserthtml.js'][235]++;
          range.setStartBefore(child);
          _$jscoverage['plugins/inserthtml.js'][236]++;
          domUtils.remove(child);
        }
      }
    }
    _$jscoverage['plugins/inserthtml.js'][243]++;
    try {
      _$jscoverage['plugins/inserthtml.js'][244]++;
      range.select(true);
    }
    catch (e) {
    }
  }
  _$jscoverage['plugins/inserthtml.js'][251]++;
  setTimeout((function () {
  _$jscoverage['plugins/inserthtml.js'][252]++;
  range = me.selection.getRange();
  _$jscoverage['plugins/inserthtml.js'][253]++;
  range.scrollToView(me.autoHeightEnabled, (me.autoHeightEnabled? domUtils.getXY(me.iframe).y: 0));
  _$jscoverage['plugins/inserthtml.js'][254]++;
  me.fireEvent("afterinserthtml");
}), 200);
})};
