/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['plugins/font.js']) {
  _$jscoverage['plugins/font.js'] = [];
  _$jscoverage['plugins/font.js'][197] = 0;
  _$jscoverage['plugins/font.js'][198] = 0;
  _$jscoverage['plugins/font.js'][216] = 0;
  _$jscoverage['plugins/font.js'][233] = 0;
  _$jscoverage['plugins/font.js'][234] = 0;
  _$jscoverage['plugins/font.js'][235] = 0;
  _$jscoverage['plugins/font.js'][236] = 0;
  _$jscoverage['plugins/font.js'][237] = 0;
  _$jscoverage['plugins/font.js'][239] = 0;
  _$jscoverage['plugins/font.js'][240] = 0;
  _$jscoverage['plugins/font.js'][241] = 0;
  _$jscoverage['plugins/font.js'][244] = 0;
  _$jscoverage['plugins/font.js'][249] = 0;
  _$jscoverage['plugins/font.js'][250] = 0;
  _$jscoverage['plugins/font.js'][251] = 0;
  _$jscoverage['plugins/font.js'][252] = 0;
  _$jscoverage['plugins/font.js'][253] = 0;
  _$jscoverage['plugins/font.js'][254] = 0;
  _$jscoverage['plugins/font.js'][255] = 0;
  _$jscoverage['plugins/font.js'][256] = 0;
  _$jscoverage['plugins/font.js'][257] = 0;
  _$jscoverage['plugins/font.js'][258] = 0;
  _$jscoverage['plugins/font.js'][259] = 0;
  _$jscoverage['plugins/font.js'][261] = 0;
  _$jscoverage['plugins/font.js'][262] = 0;
  _$jscoverage['plugins/font.js'][263] = 0;
  _$jscoverage['plugins/font.js'][266] = 0;
  _$jscoverage['plugins/font.js'][272] = 0;
  _$jscoverage['plugins/font.js'][273] = 0;
  _$jscoverage['plugins/font.js'][275] = 0;
  _$jscoverage['plugins/font.js'][276] = 0;
  _$jscoverage['plugins/font.js'][277] = 0;
  _$jscoverage['plugins/font.js'][278] = 0;
  _$jscoverage['plugins/font.js'][281] = 0;
  _$jscoverage['plugins/font.js'][283] = 0;
  _$jscoverage['plugins/font.js'][284] = 0;
  _$jscoverage['plugins/font.js'][285] = 0;
  _$jscoverage['plugins/font.js'][286] = 0;
  _$jscoverage['plugins/font.js'][287] = 0;
  _$jscoverage['plugins/font.js'][289] = 0;
  _$jscoverage['plugins/font.js'][291] = 0;
  _$jscoverage['plugins/font.js'][293] = 0;
  _$jscoverage['plugins/font.js'][294] = 0;
  _$jscoverage['plugins/font.js'][296] = 0;
  _$jscoverage['plugins/font.js'][297] = 0;
  _$jscoverage['plugins/font.js'][298] = 0;
  _$jscoverage['plugins/font.js'][299] = 0;
  _$jscoverage['plugins/font.js'][300] = 0;
  _$jscoverage['plugins/font.js'][301] = 0;
  _$jscoverage['plugins/font.js'][302] = 0;
  _$jscoverage['plugins/font.js'][304] = 0;
  _$jscoverage['plugins/font.js'][305] = 0;
  _$jscoverage['plugins/font.js'][306] = 0;
  _$jscoverage['plugins/font.js'][308] = 0;
  _$jscoverage['plugins/font.js'][309] = 0;
  _$jscoverage['plugins/font.js'][310] = 0;
  _$jscoverage['plugins/font.js'][315] = 0;
  _$jscoverage['plugins/font.js'][316] = 0;
  _$jscoverage['plugins/font.js'][318] = 0;
  _$jscoverage['plugins/font.js'][319] = 0;
  _$jscoverage['plugins/font.js'][320] = 0;
  _$jscoverage['plugins/font.js'][325] = 0;
  _$jscoverage['plugins/font.js'][326] = 0;
  _$jscoverage['plugins/font.js'][329] = 0;
  _$jscoverage['plugins/font.js'][330] = 0;
  _$jscoverage['plugins/font.js'][331] = 0;
  _$jscoverage['plugins/font.js'][332] = 0;
  _$jscoverage['plugins/font.js'][333] = 0;
  _$jscoverage['plugins/font.js'][334] = 0;
  _$jscoverage['plugins/font.js'][336] = 0;
  _$jscoverage['plugins/font.js'][337] = 0;
  _$jscoverage['plugins/font.js'][339] = 0;
  _$jscoverage['plugins/font.js'][340] = 0;
  _$jscoverage['plugins/font.js'][342] = 0;
  _$jscoverage['plugins/font.js'][343] = 0;
  _$jscoverage['plugins/font.js'][345] = 0;
  _$jscoverage['plugins/font.js'][348] = 0;
  _$jscoverage['plugins/font.js'][352] = 0;
  _$jscoverage['plugins/font.js'][353] = 0;
  _$jscoverage['plugins/font.js'][357] = 0;
  _$jscoverage['plugins/font.js'][409] = 0;
  _$jscoverage['plugins/font.js'][410] = 0;
  _$jscoverage['plugins/font.js'][411] = 0;
  _$jscoverage['plugins/font.js'][413] = 0;
  _$jscoverage['plugins/font.js'][416] = 0;
  _$jscoverage['plugins/font.js'][420] = 0;
  _$jscoverage['plugins/font.js'][422] = 0;
  _$jscoverage['plugins/font.js'][423] = 0;
  _$jscoverage['plugins/font.js'][424] = 0;
  _$jscoverage['plugins/font.js'][427] = 0;
  _$jscoverage['plugins/font.js'][428] = 0;
  _$jscoverage['plugins/font.js'][429] = 0;
  _$jscoverage['plugins/font.js'][430] = 0;
  _$jscoverage['plugins/font.js'][432] = 0;
  _$jscoverage['plugins/font.js'][433] = 0;
  _$jscoverage['plugins/font.js'][435] = 0;
  _$jscoverage['plugins/font.js'][436] = 0;
  _$jscoverage['plugins/font.js'][437] = 0;
  _$jscoverage['plugins/font.js'][439] = 0;
  _$jscoverage['plugins/font.js'][441] = 0;
  _$jscoverage['plugins/font.js'][442] = 0;
  _$jscoverage['plugins/font.js'][443] = 0;
  _$jscoverage['plugins/font.js'][446] = 0;
  _$jscoverage['plugins/font.js'][447] = 0;
  _$jscoverage['plugins/font.js'][448] = 0;
  _$jscoverage['plugins/font.js'][450] = 0;
  _$jscoverage['plugins/font.js'][451] = 0;
  _$jscoverage['plugins/font.js'][452] = 0;
  _$jscoverage['plugins/font.js'][453] = 0;
  _$jscoverage['plugins/font.js'][455] = 0;
  _$jscoverage['plugins/font.js'][456] = 0;
  _$jscoverage['plugins/font.js'][459] = 0;
  _$jscoverage['plugins/font.js'][460] = 0;
  _$jscoverage['plugins/font.js'][464] = 0;
  _$jscoverage['plugins/font.js'][465] = 0;
  _$jscoverage['plugins/font.js'][466] = 0;
  _$jscoverage['plugins/font.js'][468] = 0;
  _$jscoverage['plugins/font.js'][470] = 0;
  _$jscoverage['plugins/font.js'][471] = 0;
  _$jscoverage['plugins/font.js'][472] = 0;
  _$jscoverage['plugins/font.js'][473] = 0;
  _$jscoverage['plugins/font.js'][475] = 0;
  _$jscoverage['plugins/font.js'][478] = 0;
  _$jscoverage['plugins/font.js'][481] = 0;
  _$jscoverage['plugins/font.js'][483] = 0;
  _$jscoverage['plugins/font.js'][484] = 0;
  _$jscoverage['plugins/font.js'][485] = 0;
  _$jscoverage['plugins/font.js'][486] = 0;
  _$jscoverage['plugins/font.js'][488] = 0;
  _$jscoverage['plugins/font.js'][490] = 0;
  _$jscoverage['plugins/font.js'][495] = 0;
  _$jscoverage['plugins/font.js'][496] = 0;
  _$jscoverage['plugins/font.js'][497] = 0;
  _$jscoverage['plugins/font.js'][498] = 0;
  _$jscoverage['plugins/font.js'][499] = 0;
  _$jscoverage['plugins/font.js'][502] = 0;
  _$jscoverage['plugins/font.js'][503] = 0;
  _$jscoverage['plugins/font.js'][504] = 0;
  _$jscoverage['plugins/font.js'][510] = 0;
  _$jscoverage['plugins/font.js'][515] = 0;
  _$jscoverage['plugins/font.js'][518] = 0;
  _$jscoverage['plugins/font.js'][521] = 0;
  _$jscoverage['plugins/font.js'][522] = 0;
  _$jscoverage['plugins/font.js'][523] = 0;
  _$jscoverage['plugins/font.js'][524] = 0;
  _$jscoverage['plugins/font.js'][525] = 0;
  _$jscoverage['plugins/font.js'][527] = 0;
  _$jscoverage['plugins/font.js'][528] = 0;
  _$jscoverage['plugins/font.js'][532] = 0;
  _$jscoverage['plugins/font.js'][534] = 0;
  _$jscoverage['plugins/font.js'][536] = 0;
  _$jscoverage['plugins/font.js'][537] = 0;
  _$jscoverage['plugins/font.js'][538] = 0;
  _$jscoverage['plugins/font.js'][539] = 0;
  _$jscoverage['plugins/font.js'][540] = 0;
  _$jscoverage['plugins/font.js'][541] = 0;
  _$jscoverage['plugins/font.js'][544] = 0;
  _$jscoverage['plugins/font.js'][546] = 0;
  _$jscoverage['plugins/font.js'][549] = 0;
  _$jscoverage['plugins/font.js'][550] = 0;
  _$jscoverage['plugins/font.js'][553] = 0;
  _$jscoverage['plugins/font.js'][555] = 0;
  _$jscoverage['plugins/font.js'][559] = 0;
  _$jscoverage['plugins/font.js'][563] = 0;
  _$jscoverage['plugins/font.js'][566] = 0;
  _$jscoverage['plugins/font.js'][567] = 0;
  _$jscoverage['plugins/font.js'][568] = 0;
  _$jscoverage['plugins/font.js'][569] = 0;
  _$jscoverage['plugins/font.js'][570] = 0;
  _$jscoverage['plugins/font.js'][572] = 0;
}
_$jscoverage['plugins/font.js'].source = ["<span class=\"c\">/**</span>","<span class=\"c\"> * &#23383;&#20307;&#39068;&#33394;,&#32972;&#26223;&#33394;,&#23383;&#21495;,&#23383;&#20307;,&#19979;&#21010;&#32447;,&#21024;&#38500;&#32447;</span>","<span class=\"c\"> * @file</span>","<span class=\"c\"> * @since 1.2.6.1</span>","<span class=\"c\"> */</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * &#35774;&#32622;&#23383;&#20307;&#39068;&#33394;</span>","<span class=\"c\"> * @command forecolor</span>","<span class=\"c\"> * @method execCommand</span>","<span class=\"c\"> * @param { String } cmd &#21629;&#20196;&#23383;&#31526;&#20018;</span>","<span class=\"c\"> * @param { String } value &#33394;&#20540;</span>","<span class=\"c\"> * @example</span>","<span class=\"c\"> * ```javascript</span>","<span class=\"c\"> * editor.execCommand( 'forecolor', '#000' );</span>","<span class=\"c\"> * ```</span>","<span class=\"c\"> */</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * &#36820;&#22238;&#36873;&#21306;&#23383;&#20307;&#39068;&#33394;</span>","<span class=\"c\"> * @command forecolor</span>","<span class=\"c\"> * @method queryCommandValue</span>","<span class=\"c\"> * @param { String } cmd &#21629;&#20196;&#23383;&#31526;&#20018;</span>","<span class=\"c\"> * @return { String } &#36820;&#22238;&#23383;&#20307;&#39068;&#33394;</span>","<span class=\"c\"> * @example</span>","<span class=\"c\"> * ```javascript</span>","<span class=\"c\"> * editor.queryCommandValue( 'forecolor' );</span>","<span class=\"c\"> * ```</span>","<span class=\"c\"> */</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * &#35774;&#32622;&#23383;&#20307;&#32972;&#26223;&#39068;&#33394;</span>","<span class=\"c\"> * @command backcolor</span>","<span class=\"c\"> * @method execCommand</span>","<span class=\"c\"> * @param { String } cmd &#21629;&#20196;&#23383;&#31526;&#20018;</span>","<span class=\"c\"> * @param { String } value &#33394;&#20540;</span>","<span class=\"c\"> * @example</span>","<span class=\"c\"> * ```javascript</span>","<span class=\"c\"> * editor.execCommand( 'backcolor', '#000' );</span>","<span class=\"c\"> * ```</span>","<span class=\"c\"> */</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * &#36820;&#22238;&#36873;&#21306;&#23383;&#20307;&#39068;&#33394;</span>","<span class=\"c\"> * @command backcolor</span>","<span class=\"c\"> * @method queryCommandValue</span>","<span class=\"c\"> * @param { String } cmd &#21629;&#20196;&#23383;&#31526;&#20018;</span>","<span class=\"c\"> * @return { String } &#36820;&#22238;&#23383;&#20307;&#32972;&#26223;&#39068;&#33394;</span>","<span class=\"c\"> * @example</span>","<span class=\"c\"> * ```javascript</span>","<span class=\"c\"> * editor.queryCommandValue( 'backcolor' );</span>","<span class=\"c\"> * ```</span>","<span class=\"c\"> */</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * &#35774;&#32622;&#23383;&#20307;&#22823;&#23567;</span>","<span class=\"c\"> * @command fontsize</span>","<span class=\"c\"> * @method execCommand</span>","<span class=\"c\"> * @param { String } cmd &#21629;&#20196;&#23383;&#31526;&#20018;</span>","<span class=\"c\"> * @param { String } value &#23383;&#20307;&#22823;&#23567;</span>","<span class=\"c\"> * @example</span>","<span class=\"c\"> * ```javascript</span>","<span class=\"c\"> * editor.execCommand( 'fontsize', '14px' );</span>","<span class=\"c\"> * ```</span>","<span class=\"c\"> */</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * &#36820;&#22238;&#36873;&#21306;&#23383;&#20307;&#22823;&#23567;</span>","<span class=\"c\"> * @command fontsize</span>","<span class=\"c\"> * @method queryCommandValue</span>","<span class=\"c\"> * @param { String } cmd &#21629;&#20196;&#23383;&#31526;&#20018;</span>","<span class=\"c\"> * @return { String } &#36820;&#22238;&#23383;&#20307;&#22823;&#23567;</span>","<span class=\"c\"> * @example</span>","<span class=\"c\"> * ```javascript</span>","<span class=\"c\"> * editor.queryCommandValue( 'fontsize' );</span>","<span class=\"c\"> * ```</span>","<span class=\"c\"> */</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * &#35774;&#32622;&#23383;&#20307;&#26679;&#24335;</span>","<span class=\"c\"> * @command fontfamily</span>","<span class=\"c\"> * @method execCommand</span>","<span class=\"c\"> * @param { String } cmd &#21629;&#20196;&#23383;&#31526;&#20018;</span>","<span class=\"c\"> * @param { String } value &#23383;&#20307;&#22823;&#23567;</span>","<span class=\"c\"> * @example</span>","<span class=\"c\"> * ```javascript</span>","<span class=\"c\"> * editor.execCommand( 'fontfamily', '&#24494;&#36719;&#38597;&#40657;' );</span>","<span class=\"c\"> * ```</span>","<span class=\"c\"> */</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * &#36820;&#22238;&#36873;&#21306;&#23383;&#20307;&#26679;&#24335;</span>","<span class=\"c\"> * @command fontfamily</span>","<span class=\"c\"> * @method queryCommandValue</span>","<span class=\"c\"> * @param { String } cmd &#21629;&#20196;&#23383;&#31526;&#20018;</span>","<span class=\"c\"> * @return { String } &#36820;&#22238;&#23383;&#20307;&#26679;&#24335;</span>","<span class=\"c\"> * @example</span>","<span class=\"c\"> * ```javascript</span>","<span class=\"c\"> * editor.queryCommandValue( 'fontfamily' );</span>","<span class=\"c\"> * ```</span>","<span class=\"c\"> */</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * &#26681;&#25454;&#36873;&#21306;&#20869;&#25991;&#26412;&#26377;&#26080;&#19979;&#21010;&#32447;&#35774;&#32622;&#23383;&#20307;&#19979;&#21010;&#32447;</span>","<span class=\"c\"> * @command underline</span>","<span class=\"c\"> * @method execCommand</span>","<span class=\"c\"> * @param { String } cmd &#21629;&#20196;&#23383;&#31526;&#20018;</span>","<span class=\"c\"> * @example</span>","<span class=\"c\"> * ```javascript</span>","<span class=\"c\"> * editor.execCommand( 'underline' );</span>","<span class=\"c\"> * ```</span>","<span class=\"c\"> */</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * &#36820;&#22238;&#36873;&#21306;&#19979;&#21010;&#32447;&#26679;&#24335;</span>","<span class=\"c\"> * @command underline</span>","<span class=\"c\"> * @method queryCommandValue</span>","<span class=\"c\"> * @param { String } cmd &#21629;&#20196;&#23383;&#31526;&#20018;</span>","<span class=\"c\"> * @return { String } underline|default</span>","<span class=\"c\"> * @example</span>","<span class=\"c\"> * ```javascript</span>","<span class=\"c\"> * editor.queryCommandValue( 'underline' );</span>","<span class=\"c\"> * ```</span>","<span class=\"c\"> */</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * &#36820;&#22238;&#36873;&#21306;&#26377;&#26080;&#19979;&#21010;&#32447;</span>","<span class=\"c\"> * @command underline</span>","<span class=\"c\"> * @method queryCommandValue</span>","<span class=\"c\"> * @param { String } cmd &#21629;&#20196;&#23383;&#31526;&#20018;</span>","<span class=\"c\"> * @return { Bool }true&#20026;&#26377;&#19979;&#21010;&#32447;&#65292;&#21453;&#20043;&#21017;&#26080;</span>","<span class=\"c\"> * @example</span>","<span class=\"c\"> * ```javascript</span>","<span class=\"c\"> * editor.queryCommandValue( 'underline' );</span>","<span class=\"c\"> * ```</span>","<span class=\"c\"> */</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * &#26681;&#25454;&#36873;&#21306;&#20869;&#25991;&#26412;&#26377;&#26080;&#21024;&#38500;&#32447;&#35774;&#32622;&#23383;&#20307;&#21024;&#38500;&#32447;</span>","<span class=\"c\"> * @command strikethrough</span>","<span class=\"c\"> * @method execCommand</span>","<span class=\"c\"> * @param { String } cmd &#21629;&#20196;&#23383;&#31526;&#20018;</span>","<span class=\"c\"> * @example</span>","<span class=\"c\"> * ```javascript</span>","<span class=\"c\"> * editor.execCommand( 'strikethrough' );</span>","<span class=\"c\"> * ```</span>","<span class=\"c\"> */</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * &#36820;&#22238;&#36873;&#21306;&#21024;&#38500;&#32447;&#26679;&#24335;</span>","<span class=\"c\"> * @command strikethrough</span>","<span class=\"c\"> * @method queryCommandValue</span>","<span class=\"c\"> * @param { String } cmd &#21629;&#20196;&#23383;&#31526;&#20018;</span>","<span class=\"c\"> * @return { String } line-through|default</span>","<span class=\"c\"> * @example</span>","<span class=\"c\"> * ```javascript</span>","<span class=\"c\"> * editor.queryCommandValue( 'strikethrough' );</span>","<span class=\"c\"> * ```</span>","<span class=\"c\"> */</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * &#36820;&#22238;&#36873;&#21306;&#26377;&#26080;&#21024;&#38500;&#32447;</span>","<span class=\"c\"> * @command strikethrough</span>","<span class=\"c\"> * @method queryCommandValue</span>","<span class=\"c\"> * @param { String } cmd &#21629;&#20196;&#23383;&#31526;&#20018;</span>","<span class=\"c\"> * @return { Bool }true&#20026;&#26377;&#21024;&#38500;&#32447;&#65292;&#21453;&#20043;&#21017;&#26080;</span>","<span class=\"c\"> * @example</span>","<span class=\"c\"> * ```javascript</span>","<span class=\"c\"> * editor.queryCommandValue( 'strikethrough' );</span>","<span class=\"c\"> * ```</span>","<span class=\"c\"> */</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * &#26681;&#25454;&#36873;&#21306;&#20869;&#25991;&#26412;&#26377;&#26080;&#23383;&#20307;&#36793;&#26694;&#35774;&#32622;&#23383;&#20307;&#36793;&#26694;</span>","<span class=\"c\"> * @command fontborder</span>","<span class=\"c\"> * @method execCommand</span>","<span class=\"c\"> * @param { String } cmd &#21629;&#20196;&#23383;&#31526;&#20018;</span>","<span class=\"c\"> * @example</span>","<span class=\"c\"> * ```javascript</span>","<span class=\"c\"> * editor.execCommand( 'fontborder' );</span>","<span class=\"c\"> * ```</span>","<span class=\"c\"> */</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * &#36820;&#22238;&#36873;&#21306;&#23383;&#20307;&#36793;&#26694;&#26679;&#24335;</span>","<span class=\"c\"> * @command fontborder</span>","<span class=\"c\"> * @method queryCommandValue</span>","<span class=\"c\"> * @param { String } cmd &#21629;&#20196;&#23383;&#31526;&#20018;</span>","<span class=\"c\"> * @return { String } &#23383;&#20307;&#36793;&#26694;&#26679;&#24335;</span>","<span class=\"c\"> * @example</span>","<span class=\"c\"> * ```javascript</span>","<span class=\"c\"> * editor.queryCommandValue( 'fontborder' );</span>","<span class=\"c\"> * ```</span>","<span class=\"c\"> */</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * &#36820;&#22238;&#36873;&#21306;&#26377;&#26080;&#23383;&#20307;&#36793;&#26694;</span>","<span class=\"c\"> * @command fontborder</span>","<span class=\"c\"> * @method queryCommandValue</span>","<span class=\"c\"> * @param { String } cmd &#21629;&#20196;&#23383;&#31526;&#20018;</span>","<span class=\"c\"> * @return { Bool }true&#20026;&#26377;&#23383;&#20307;&#36793;&#26694;&#65292;&#21453;&#20043;&#21017;&#26080;</span>","<span class=\"c\"> * @example</span>","<span class=\"c\"> * ```javascript</span>","<span class=\"c\"> * editor.queryCommandValue( 'fontborder' );</span>","<span class=\"c\"> * ```</span>","<span class=\"c\"> */</span>","UE<span class=\"k\">.</span>plugins<span class=\"k\">[</span><span class=\"s\">'font'</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">,</span>","        fonts <span class=\"k\">=</span> <span class=\"k\">{</span>","            <span class=\"s\">'forecolor'</span><span class=\"k\">:</span> <span class=\"s\">'color'</span><span class=\"k\">,</span>","            <span class=\"s\">'backcolor'</span><span class=\"k\">:</span> <span class=\"s\">'background-color'</span><span class=\"k\">,</span>","            <span class=\"s\">'fontsize'</span><span class=\"k\">:</span> <span class=\"s\">'font-size'</span><span class=\"k\">,</span>","            <span class=\"s\">'fontfamily'</span><span class=\"k\">:</span> <span class=\"s\">'font-family'</span><span class=\"k\">,</span>","            <span class=\"s\">'underline'</span><span class=\"k\">:</span> <span class=\"s\">'text-decoration'</span><span class=\"k\">,</span>","            <span class=\"s\">'strikethrough'</span><span class=\"k\">:</span> <span class=\"s\">'text-decoration'</span><span class=\"k\">,</span>","            <span class=\"s\">'fontborder'</span><span class=\"k\">:</span> <span class=\"s\">'border'</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        needCmd <span class=\"k\">=</span> <span class=\"k\">{</span><span class=\"s\">'underline'</span><span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">'strikethrough'</span><span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">'fontborder'</span><span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">}</span><span class=\"k\">,</span>","        needSetChild <span class=\"k\">=</span> <span class=\"k\">{</span>","            <span class=\"s\">'forecolor'</span><span class=\"k\">:</span> <span class=\"s\">'color'</span><span class=\"k\">,</span>","            <span class=\"s\">'backcolor'</span><span class=\"k\">:</span> <span class=\"s\">'background-color'</span><span class=\"k\">,</span>","            <span class=\"s\">'fontsize'</span><span class=\"k\">:</span> <span class=\"s\">'font-size'</span><span class=\"k\">,</span>","            <span class=\"s\">'fontfamily'</span><span class=\"k\">:</span> <span class=\"s\">'font-family'</span>","","        <span class=\"k\">}</span><span class=\"k\">;</span>","    me<span class=\"k\">.</span>setOpt<span class=\"k\">(</span><span class=\"k\">{</span>","        <span class=\"s\">'fontfamily'</span><span class=\"k\">:</span> <span class=\"k\">[</span>","            <span class=\"k\">{</span> name<span class=\"k\">:</span> <span class=\"s\">'songti'</span><span class=\"k\">,</span> val<span class=\"k\">:</span> <span class=\"s\">'&#23435;&#20307;,SimSun'</span><span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">{</span> name<span class=\"k\">:</span> <span class=\"s\">'yahei'</span><span class=\"k\">,</span> val<span class=\"k\">:</span> <span class=\"s\">'&#24494;&#36719;&#38597;&#40657;,Microsoft YaHei'</span><span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">{</span> name<span class=\"k\">:</span> <span class=\"s\">'kaiti'</span><span class=\"k\">,</span> val<span class=\"k\">:</span> <span class=\"s\">'&#26999;&#20307;,&#26999;&#20307;_GB2312, SimKai'</span><span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">{</span> name<span class=\"k\">:</span> <span class=\"s\">'heiti'</span><span class=\"k\">,</span> val<span class=\"k\">:</span> <span class=\"s\">'&#40657;&#20307;, SimHei'</span><span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">{</span> name<span class=\"k\">:</span> <span class=\"s\">'lishu'</span><span class=\"k\">,</span> val<span class=\"k\">:</span> <span class=\"s\">'&#38582;&#20070;, SimLi'</span><span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">{</span> name<span class=\"k\">:</span> <span class=\"s\">'andaleMono'</span><span class=\"k\">,</span> val<span class=\"k\">:</span> <span class=\"s\">'andale mono'</span><span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">{</span> name<span class=\"k\">:</span> <span class=\"s\">'arial'</span><span class=\"k\">,</span> val<span class=\"k\">:</span> <span class=\"s\">'arial, helvetica,sans-serif'</span><span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">{</span> name<span class=\"k\">:</span> <span class=\"s\">'arialBlack'</span><span class=\"k\">,</span> val<span class=\"k\">:</span> <span class=\"s\">'arial black,avant garde'</span><span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">{</span> name<span class=\"k\">:</span> <span class=\"s\">'comicSansMs'</span><span class=\"k\">,</span> val<span class=\"k\">:</span> <span class=\"s\">'comic sans ms'</span><span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">{</span> name<span class=\"k\">:</span> <span class=\"s\">'impact'</span><span class=\"k\">,</span> val<span class=\"k\">:</span> <span class=\"s\">'impact,chicago'</span><span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">{</span> name<span class=\"k\">:</span> <span class=\"s\">'timesNewRoman'</span><span class=\"k\">,</span> val<span class=\"k\">:</span> <span class=\"s\">'times new roman'</span><span class=\"k\">}</span>","        <span class=\"k\">],</span>","        <span class=\"s\">'fontsize'</span><span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">10</span><span class=\"k\">,</span> <span class=\"s\">11</span><span class=\"k\">,</span> <span class=\"s\">12</span><span class=\"k\">,</span> <span class=\"s\">14</span><span class=\"k\">,</span> <span class=\"s\">16</span><span class=\"k\">,</span> <span class=\"s\">18</span><span class=\"k\">,</span> <span class=\"s\">20</span><span class=\"k\">,</span> <span class=\"s\">24</span><span class=\"k\">,</span> <span class=\"s\">36</span><span class=\"k\">]</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","","    <span class=\"k\">function</span> mergeWithParent<span class=\"k\">(</span>node<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> parent<span class=\"k\">;</span>","        <span class=\"k\">while</span><span class=\"k\">(</span>parent <span class=\"k\">=</span> node<span class=\"k\">.</span>parentNode<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>parent<span class=\"k\">.</span>tagName <span class=\"k\">==</span> <span class=\"s\">'SPAN'</span> <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>getChildCount<span class=\"k\">(</span>parent<span class=\"k\">,</span><span class=\"k\">function</span><span class=\"k\">(</span>child<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">!</span>domUtils<span class=\"k\">.</span>isBookmarkNode<span class=\"k\">(</span>child<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>domUtils<span class=\"k\">.</span>isBr<span class=\"k\">(</span>child<span class=\"k\">)</span>","            <span class=\"k\">}</span><span class=\"k\">)</span> <span class=\"k\">==</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                parent<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText <span class=\"k\">+=</span> node<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText<span class=\"k\">;</span>","                domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>node<span class=\"k\">,</span><span class=\"k\">true</span><span class=\"k\">);</span>","                node <span class=\"k\">=</span> parent<span class=\"k\">;</span>","","            <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","","    <span class=\"k\">}</span>","    <span class=\"k\">function</span> mergeChild<span class=\"k\">(</span>rng<span class=\"k\">,</span>cmdName<span class=\"k\">,</span>value<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>needSetChild<span class=\"k\">[</span>cmdName<span class=\"k\">])</span><span class=\"k\">{</span>","            rng<span class=\"k\">.</span>adjustmentBoundary<span class=\"k\">();</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span>rng<span class=\"k\">.</span>collapsed <span class=\"k\">&amp;&amp;</span> rng<span class=\"k\">.</span>startContainer<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span><span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> start <span class=\"k\">=</span> rng<span class=\"k\">.</span>startContainer<span class=\"k\">.</span>childNodes<span class=\"k\">[</span>rng<span class=\"k\">.</span>startOffset<span class=\"k\">];</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>start <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>isTagNode<span class=\"k\">(</span>start<span class=\"k\">,</span><span class=\"s\">'span'</span><span class=\"k\">))</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> bk <span class=\"k\">=</span> rng<span class=\"k\">.</span>createBookmark<span class=\"k\">();</span>","                    utils<span class=\"k\">.</span>each<span class=\"k\">(</span>domUtils<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span>start<span class=\"k\">,</span> <span class=\"s\">'span'</span><span class=\"k\">),</span> <span class=\"k\">function</span> <span class=\"k\">(</span>span<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">if</span> <span class=\"k\">(!</span>span<span class=\"k\">.</span>parentNode <span class=\"k\">||</span> domUtils<span class=\"k\">.</span>isBookmarkNode<span class=\"k\">(</span>span<span class=\"k\">))</span><span class=\"k\">return</span><span class=\"k\">;</span>","                        <span class=\"k\">if</span><span class=\"k\">(</span>cmdName <span class=\"k\">==</span> <span class=\"s\">'backcolor'</span> <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>getComputedStyle<span class=\"k\">(</span>span<span class=\"k\">,</span><span class=\"s\">'background-color'</span><span class=\"k\">).</span>toLowerCase<span class=\"k\">()</span> <span class=\"k\">===</span> value<span class=\"k\">)</span><span class=\"k\">{</span>","                            <span class=\"k\">return</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        domUtils<span class=\"k\">.</span>removeStyle<span class=\"k\">(</span>span<span class=\"k\">,</span>needSetChild<span class=\"k\">[</span>cmdName<span class=\"k\">]);</span>","                        <span class=\"k\">if</span><span class=\"k\">(</span>span<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/^\\s+$/</span><span class=\"k\">,</span><span class=\"s\">''</span><span class=\"k\">).</span>length <span class=\"k\">==</span> <span class=\"s\">0</span><span class=\"k\">)</span><span class=\"k\">{</span>","                            domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>span<span class=\"k\">,</span><span class=\"k\">true</span><span class=\"k\">)</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span><span class=\"k\">);</span>","                    rng<span class=\"k\">.</span>moveToBookmark<span class=\"k\">(</span>bk<span class=\"k\">)</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","","    <span class=\"k\">}</span>","    <span class=\"k\">function</span> mergesibling<span class=\"k\">(</span>rng<span class=\"k\">,</span>cmdName<span class=\"k\">,</span>value<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> collapsed <span class=\"k\">=</span> rng<span class=\"k\">.</span>collapsed<span class=\"k\">,</span>","            bk <span class=\"k\">=</span> rng<span class=\"k\">.</span>createBookmark<span class=\"k\">(),</span> common<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>collapsed<span class=\"k\">)</span> <span class=\"k\">{</span>","            common <span class=\"k\">=</span> bk<span class=\"k\">.</span>start<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","            <span class=\"k\">while</span> <span class=\"k\">(</span>dtd<span class=\"k\">.</span>$inline<span class=\"k\">[</span>common<span class=\"k\">.</span>tagName<span class=\"k\">])</span> <span class=\"k\">{</span>","                common <span class=\"k\">=</span> common<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            common <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getCommonAncestor<span class=\"k\">(</span>bk<span class=\"k\">.</span>start<span class=\"k\">,</span> bk<span class=\"k\">.</span>end<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        utils<span class=\"k\">.</span>each<span class=\"k\">(</span>domUtils<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span>common<span class=\"k\">,</span> <span class=\"s\">'span'</span><span class=\"k\">),</span> <span class=\"k\">function</span> <span class=\"k\">(</span>span<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>span<span class=\"k\">.</span>parentNode <span class=\"k\">||</span> domUtils<span class=\"k\">.</span>isBookmarkNode<span class=\"k\">(</span>span<span class=\"k\">))</span><span class=\"k\">return</span><span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"s\">/\\s*border\\s*:\\s*none;?\\s*/i</span><span class=\"k\">.</span>test<span class=\"k\">(</span>span<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText<span class=\"k\">))</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"s\">/^\\s*border\\s*:\\s*none;?\\s*$/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>span<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText<span class=\"k\">))</span><span class=\"k\">{</span>","                    domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>span<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                    domUtils<span class=\"k\">.</span>removeStyle<span class=\"k\">(</span>span<span class=\"k\">,</span><span class=\"s\">'border'</span><span class=\"k\">);</span>","                <span class=\"k\">}</span>","                <span class=\"k\">return</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"s\">/border/i</span><span class=\"k\">.</span>test<span class=\"k\">(</span>span<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> span<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>tagName <span class=\"k\">==</span> <span class=\"s\">'SPAN'</span> <span class=\"k\">&amp;&amp;</span> <span class=\"s\">/border/i</span><span class=\"k\">.</span>test<span class=\"k\">(</span>span<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText<span class=\"k\">))</span> <span class=\"k\">{</span>","                span<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText <span class=\"k\">=</span> span<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/border[^:]*:[^;]+;?/gi</span><span class=\"k\">,</span> <span class=\"s\">''</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span><span class=\"k\">(!(</span>cmdName<span class=\"k\">==</span><span class=\"s\">'fontborder'</span> <span class=\"k\">&amp;&amp;</span> value<span class=\"k\">==</span><span class=\"s\">'none'</span><span class=\"k\">))</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> next <span class=\"k\">=</span> span<span class=\"k\">.</span>nextSibling<span class=\"k\">;</span>","                <span class=\"k\">while</span> <span class=\"k\">(</span>next <span class=\"k\">&amp;&amp;</span> next<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span> <span class=\"k\">&amp;&amp;</span> next<span class=\"k\">.</span>tagName <span class=\"k\">==</span> <span class=\"s\">'SPAN'</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>domUtils<span class=\"k\">.</span>isBookmarkNode<span class=\"k\">(</span>next<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> cmdName <span class=\"k\">==</span> <span class=\"s\">'fontborder'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        span<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>next<span class=\"k\">);</span>","                        next <span class=\"k\">=</span> span<span class=\"k\">.</span>nextSibling<span class=\"k\">;</span>","                        <span class=\"k\">continue</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>next<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText <span class=\"k\">==</span> span<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText<span class=\"k\">)</span> <span class=\"k\">{</span>","                        domUtils<span class=\"k\">.</span>moveChild<span class=\"k\">(</span>next<span class=\"k\">,</span> span<span class=\"k\">);</span>","                        domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>next<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>span<span class=\"k\">.</span>nextSibling <span class=\"k\">===</span> next<span class=\"k\">)</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    next <span class=\"k\">=</span> span<span class=\"k\">.</span>nextSibling<span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","","            mergeWithParent<span class=\"k\">(</span>span<span class=\"k\">);</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>browser<span class=\"k\">.</span>ie <span class=\"k\">&amp;&amp;</span> browser<span class=\"k\">.</span>version <span class=\"k\">&gt;</span> <span class=\"s\">8</span> <span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"c\">//&#25335;&#36125;&#29238;&#20146;&#20204;&#30340;&#29305;&#21035;&#30340;&#23646;&#24615;,&#36825;&#37324;&#21482;&#20570;&#32972;&#26223;&#39068;&#33394;&#30340;&#22788;&#29702;</span>","                <span class=\"k\">var</span> parent <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>findParent<span class=\"k\">(</span>span<span class=\"k\">,</span><span class=\"k\">function</span><span class=\"k\">(</span>n<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span> n<span class=\"k\">.</span>tagName <span class=\"k\">==</span> <span class=\"s\">'SPAN'</span> <span class=\"k\">&amp;&amp;</span> <span class=\"s\">/background-color/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>n<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText<span class=\"k\">)</span><span class=\"k\">}</span><span class=\"k\">);</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>parent <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span><span class=\"s\">/background-color/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>span<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText<span class=\"k\">))</span><span class=\"k\">{</span>","                    span<span class=\"k\">.</span>style<span class=\"k\">.</span>backgroundColor <span class=\"k\">=</span> parent<span class=\"k\">.</span>style<span class=\"k\">.</span>backgroundColor<span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","        <span class=\"k\">}</span><span class=\"k\">);</span>","        rng<span class=\"k\">.</span>moveToBookmark<span class=\"k\">(</span>bk<span class=\"k\">);</span>","        mergeChild<span class=\"k\">(</span>rng<span class=\"k\">,</span>cmdName<span class=\"k\">,</span>value<span class=\"k\">)</span>","    <span class=\"k\">}</span>","","    me<span class=\"k\">.</span>addInputRule<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>root<span class=\"k\">)</span> <span class=\"k\">{</span>","        utils<span class=\"k\">.</span>each<span class=\"k\">(</span>root<span class=\"k\">.</span>getNodesByTagName<span class=\"k\">(</span><span class=\"s\">'u s del font strike'</span><span class=\"k\">),</span> <span class=\"k\">function</span> <span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>node<span class=\"k\">.</span>tagName <span class=\"k\">==</span> <span class=\"s\">'font'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> cssStyle <span class=\"k\">=</span> <span class=\"k\">[];</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> p <span class=\"k\">in</span> node<span class=\"k\">.</span>attrs<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">switch</span> <span class=\"k\">(</span>p<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">case</span> <span class=\"s\">'size'</span><span class=\"k\">:</span>","                            cssStyle<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">'font-size:'</span> <span class=\"k\">+</span> node<span class=\"k\">.</span>attrs<span class=\"k\">[</span>p<span class=\"k\">]</span> <span class=\"k\">+</span> <span class=\"s\">'px'</span><span class=\"k\">);</span>","                            <span class=\"k\">break</span><span class=\"k\">;</span>","                        <span class=\"k\">case</span> <span class=\"s\">'color'</span><span class=\"k\">:</span>","                            cssStyle<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">'color:'</span> <span class=\"k\">+</span> node<span class=\"k\">.</span>attrs<span class=\"k\">[</span>p<span class=\"k\">]);</span>","                            <span class=\"k\">break</span><span class=\"k\">;</span>","                        <span class=\"k\">case</span> <span class=\"s\">'face'</span><span class=\"k\">:</span>","                            cssStyle<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">'font-family:'</span> <span class=\"k\">+</span> node<span class=\"k\">.</span>attrs<span class=\"k\">[</span>p<span class=\"k\">]);</span>","                            <span class=\"k\">break</span><span class=\"k\">;</span>","                        <span class=\"k\">case</span> <span class=\"s\">'style'</span><span class=\"k\">:</span>","                            cssStyle<span class=\"k\">.</span>push<span class=\"k\">(</span>node<span class=\"k\">.</span>attrs<span class=\"k\">[</span>p<span class=\"k\">]);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                node<span class=\"k\">.</span>attrs <span class=\"k\">=</span> <span class=\"k\">{</span>","                    <span class=\"s\">'style'</span><span class=\"k\">:</span> cssStyle<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">';'</span><span class=\"k\">)</span>","                <span class=\"k\">}</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> val <span class=\"k\">=</span> node<span class=\"k\">.</span>tagName <span class=\"k\">==</span> <span class=\"s\">'u'</span> <span class=\"k\">?</span> <span class=\"s\">'underline'</span> <span class=\"k\">:</span> <span class=\"s\">'line-through'</span><span class=\"k\">;</span>","                node<span class=\"k\">.</span>attrs <span class=\"k\">=</span> <span class=\"k\">{</span>","                    <span class=\"s\">'style'</span><span class=\"k\">:</span> <span class=\"k\">(</span>node<span class=\"k\">.</span>getAttr<span class=\"k\">(</span><span class=\"s\">'style'</span><span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"s\">''</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">'text-decoration:'</span> <span class=\"k\">+</span> val <span class=\"k\">+</span> <span class=\"s\">';'</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            node<span class=\"k\">.</span>tagName <span class=\"k\">=</span> <span class=\"s\">'span'</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","<span class=\"c\">//        utils.each(root.getNodesByTagName('span'), function (node) {</span>","<span class=\"c\">//            var val;</span>","<span class=\"c\">//            if(val = node.getAttr('class')){</span>","<span class=\"c\">//                if(/fontstrikethrough/.test(val)){</span>","<span class=\"c\">//                    node.setStyle('text-decoration','line-through');</span>","<span class=\"c\">//                    if(node.attrs['class']){</span>","<span class=\"c\">//                        node.attrs['class'] = node.attrs['class'].replace(/fontstrikethrough/,'');</span>","<span class=\"c\">//                    }else{</span>","<span class=\"c\">//                        node.setAttr('class')</span>","<span class=\"c\">//                    }</span>","<span class=\"c\">//                }</span>","<span class=\"c\">//                if(/fontborder/.test(val)){</span>","<span class=\"c\">//                    node.setStyle('border','1px solid #000');</span>","<span class=\"c\">//                    if(node.attrs['class']){</span>","<span class=\"c\">//                        node.attrs['class'] = node.attrs['class'].replace(/fontborder/,'');</span>","<span class=\"c\">//                    }else{</span>","<span class=\"c\">//                        node.setAttr('class')</span>","<span class=\"c\">//                    }</span>","<span class=\"c\">//                }</span>","<span class=\"c\">//            }</span>","<span class=\"c\">//        });</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","<span class=\"c\">//    me.addOutputRule(function(root){</span>","<span class=\"c\">//        utils.each(root.getNodesByTagName('span'), function (node) {</span>","<span class=\"c\">//            var val;</span>","<span class=\"c\">//            if(val = node.getStyle('text-decoration')){</span>","<span class=\"c\">//                if(/line-through/.test(val)){</span>","<span class=\"c\">//                    if(node.attrs['class']){</span>","<span class=\"c\">//                        node.attrs['class'] += ' fontstrikethrough';</span>","<span class=\"c\">//                    }else{</span>","<span class=\"c\">//                        node.setAttr('class','fontstrikethrough')</span>","<span class=\"c\">//                    }</span>","<span class=\"c\">//                }</span>","<span class=\"c\">//</span>","<span class=\"c\">//                node.setStyle('text-decoration')</span>","<span class=\"c\">//            }</span>","<span class=\"c\">//            if(val = node.getStyle('border')){</span>","<span class=\"c\">//                if(/1px/.test(val) &amp;&amp; /solid/.test(val)){</span>","<span class=\"c\">//                    if(node.attrs['class']){</span>","<span class=\"c\">//                        node.attrs['class'] += ' fontborder';</span>","<span class=\"c\">//</span>","<span class=\"c\">//                    }else{</span>","<span class=\"c\">//                        node.setAttr('class','fontborder')</span>","<span class=\"c\">//                    }</span>","<span class=\"c\">//                }</span>","<span class=\"c\">//                node.setStyle('border')</span>","<span class=\"c\">//</span>","<span class=\"c\">//            }</span>","<span class=\"c\">//        });</span>","<span class=\"c\">//    });</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> p <span class=\"k\">in</span> fonts<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>cmd<span class=\"k\">,</span> style<span class=\"k\">)</span> <span class=\"k\">{</span>","            UE<span class=\"k\">.</span>commands<span class=\"k\">[</span>cmd<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","                execCommand<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>cmdName<span class=\"k\">,</span> value<span class=\"k\">)</span> <span class=\"k\">{</span>","                    value <span class=\"k\">=</span> value <span class=\"k\">||</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>queryCommandState<span class=\"k\">(</span>cmdName<span class=\"k\">)</span> <span class=\"k\">?</span> <span class=\"s\">'none'</span> <span class=\"k\">:</span> cmdName <span class=\"k\">==</span> <span class=\"s\">'underline'</span> <span class=\"k\">?</span> <span class=\"s\">'underline'</span> <span class=\"k\">:</span>","                        cmdName <span class=\"k\">==</span> <span class=\"s\">'fontborder'</span> <span class=\"k\">?</span> <span class=\"s\">'1px solid #000'</span> <span class=\"k\">:</span>","                            <span class=\"s\">'line-through'</span><span class=\"k\">);</span>","                    <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">,</span>","                        range <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>selection<span class=\"k\">.</span>getRange<span class=\"k\">(),</span>","                        text<span class=\"k\">;</span>","","                    <span class=\"k\">if</span> <span class=\"k\">(</span>value <span class=\"k\">==</span> <span class=\"s\">'default'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","","                        <span class=\"k\">if</span> <span class=\"k\">(</span>range<span class=\"k\">.</span>collapsed<span class=\"k\">)</span> <span class=\"k\">{</span>","                            text <span class=\"k\">=</span> me<span class=\"k\">.</span>document<span class=\"k\">.</span>createTextNode<span class=\"k\">(</span><span class=\"s\">'font'</span><span class=\"k\">);</span>","                            range<span class=\"k\">.</span>insertNode<span class=\"k\">(</span>text<span class=\"k\">).</span>select<span class=\"k\">();</span>","","                        <span class=\"k\">}</span>","                        me<span class=\"k\">.</span>execCommand<span class=\"k\">(</span><span class=\"s\">'removeFormat'</span><span class=\"k\">,</span> <span class=\"s\">'span,a'</span><span class=\"k\">,</span> style<span class=\"k\">);</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span>text<span class=\"k\">)</span> <span class=\"k\">{</span>","                            range<span class=\"k\">.</span>setStartBefore<span class=\"k\">(</span>text<span class=\"k\">).</span>collapse<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","                            domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>text<span class=\"k\">);</span>","                        <span class=\"k\">}</span>","                        mergesibling<span class=\"k\">(</span>range<span class=\"k\">,</span>cmdName<span class=\"k\">,</span>value<span class=\"k\">);</span>","                        range<span class=\"k\">.</span>select<span class=\"k\">()</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        <span class=\"k\">if</span> <span class=\"k\">(!</span>range<span class=\"k\">.</span>collapsed<span class=\"k\">)</span> <span class=\"k\">{</span>","                            <span class=\"k\">if</span> <span class=\"k\">(</span>needCmd<span class=\"k\">[</span>cmd<span class=\"k\">]</span> <span class=\"k\">&amp;&amp;</span> me<span class=\"k\">.</span>queryCommandValue<span class=\"k\">(</span>cmd<span class=\"k\">))</span> <span class=\"k\">{</span>","                                me<span class=\"k\">.</span>execCommand<span class=\"k\">(</span><span class=\"s\">'removeFormat'</span><span class=\"k\">,</span> <span class=\"s\">'span,a'</span><span class=\"k\">,</span> style<span class=\"k\">);</span>","                            <span class=\"k\">}</span>","                            range <span class=\"k\">=</span> me<span class=\"k\">.</span>selection<span class=\"k\">.</span>getRange<span class=\"k\">();</span>","","                            range<span class=\"k\">.</span>applyInlineStyle<span class=\"k\">(</span><span class=\"s\">'span'</span><span class=\"k\">,</span> <span class=\"k\">{</span><span class=\"s\">'style'</span><span class=\"k\">:</span> style <span class=\"k\">+</span> <span class=\"s\">':'</span> <span class=\"k\">+</span> value<span class=\"k\">}</span><span class=\"k\">);</span>","                            mergesibling<span class=\"k\">(</span>range<span class=\"k\">,</span> cmdName<span class=\"k\">,</span>value<span class=\"k\">);</span>","                            range<span class=\"k\">.</span>select<span class=\"k\">();</span>","                        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","","                            <span class=\"k\">var</span> span <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>findParentByTagName<span class=\"k\">(</span>range<span class=\"k\">.</span>startContainer<span class=\"k\">,</span> <span class=\"s\">'span'</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">);</span>","                            text <span class=\"k\">=</span> me<span class=\"k\">.</span>document<span class=\"k\">.</span>createTextNode<span class=\"k\">(</span><span class=\"s\">'font'</span><span class=\"k\">);</span>","                            <span class=\"k\">if</span> <span class=\"k\">(</span>span <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>span<span class=\"k\">.</span>children<span class=\"k\">.</span>length <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>span<span class=\"k\">[</span>browser<span class=\"k\">.</span>ie <span class=\"k\">?</span> <span class=\"s\">'innerText'</span> <span class=\"k\">:</span> <span class=\"s\">'textContent'</span><span class=\"k\">].</span>replace<span class=\"k\">(</span>fillCharReg<span class=\"k\">,</span> <span class=\"s\">''</span><span class=\"k\">).</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                                <span class=\"c\">//for ie hack when enter</span>","                                range<span class=\"k\">.</span>insertNode<span class=\"k\">(</span>text<span class=\"k\">);</span>","                                <span class=\"k\">if</span> <span class=\"k\">(</span>needCmd<span class=\"k\">[</span>cmd<span class=\"k\">])</span> <span class=\"k\">{</span>","                                    range<span class=\"k\">.</span>selectNode<span class=\"k\">(</span>text<span class=\"k\">).</span>select<span class=\"k\">();</span>","                                    me<span class=\"k\">.</span>execCommand<span class=\"k\">(</span><span class=\"s\">'removeFormat'</span><span class=\"k\">,</span> <span class=\"s\">'span,a'</span><span class=\"k\">,</span> style<span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">);</span>","","                                    span <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>findParentByTagName<span class=\"k\">(</span>text<span class=\"k\">,</span> <span class=\"s\">'span'</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">);</span>","                                    range<span class=\"k\">.</span>setStartBefore<span class=\"k\">(</span>text<span class=\"k\">);</span>","","                                <span class=\"k\">}</span>","                                span <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>span<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText <span class=\"k\">+=</span> <span class=\"s\">';'</span> <span class=\"k\">+</span> style <span class=\"k\">+</span> <span class=\"s\">':'</span> <span class=\"k\">+</span> value<span class=\"k\">);</span>","                                range<span class=\"k\">.</span>collapse<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">).</span>select<span class=\"k\">();</span>","","","                            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                                range<span class=\"k\">.</span>insertNode<span class=\"k\">(</span>text<span class=\"k\">);</span>","                                range<span class=\"k\">.</span>selectNode<span class=\"k\">(</span>text<span class=\"k\">).</span>select<span class=\"k\">();</span>","                                span <span class=\"k\">=</span> range<span class=\"k\">.</span>document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">'span'</span><span class=\"k\">);</span>","","                                <span class=\"k\">if</span> <span class=\"k\">(</span>needCmd<span class=\"k\">[</span>cmd<span class=\"k\">])</span> <span class=\"k\">{</span>","                                    <span class=\"c\">//a&#26631;&#31614;&#20869;&#30340;&#19981;&#22788;&#29702;&#36339;&#36807;</span>","                                    <span class=\"k\">if</span> <span class=\"k\">(</span>domUtils<span class=\"k\">.</span>findParentByTagName<span class=\"k\">(</span>text<span class=\"k\">,</span> <span class=\"s\">'a'</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">))</span> <span class=\"k\">{</span>","                                        range<span class=\"k\">.</span>setStartBefore<span class=\"k\">(</span>text<span class=\"k\">).</span>setCursor<span class=\"k\">();</span>","                                        domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>text<span class=\"k\">);</span>","                                        <span class=\"k\">return</span><span class=\"k\">;</span>","                                    <span class=\"k\">}</span>","                                    me<span class=\"k\">.</span>execCommand<span class=\"k\">(</span><span class=\"s\">'removeFormat'</span><span class=\"k\">,</span> <span class=\"s\">'span,a'</span><span class=\"k\">,</span> style<span class=\"k\">);</span>","                                <span class=\"k\">}</span>","","                                span<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText <span class=\"k\">=</span> style <span class=\"k\">+</span> <span class=\"s\">':'</span> <span class=\"k\">+</span> value<span class=\"k\">;</span>","","","                                text<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>insertBefore<span class=\"k\">(</span>span<span class=\"k\">,</span> text<span class=\"k\">);</span>","                                <span class=\"c\">//&#20462;&#22797;&#65292;span&#22871;span &#20294;&#26679;&#24335;&#19981;&#32487;&#25215;&#30340;&#38382;&#39064;</span>","                                <span class=\"k\">if</span> <span class=\"k\">(!</span>browser<span class=\"k\">.</span>ie <span class=\"k\">||</span> browser<span class=\"k\">.</span>ie <span class=\"k\">&amp;&amp;</span> browser<span class=\"k\">.</span>version <span class=\"k\">==</span> <span class=\"s\">9</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                                    <span class=\"k\">var</span> spanParent <span class=\"k\">=</span> span<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","                                    <span class=\"k\">while</span> <span class=\"k\">(!</span>domUtils<span class=\"k\">.</span>isBlockElm<span class=\"k\">(</span>spanParent<span class=\"k\">))</span> <span class=\"k\">{</span>","                                        <span class=\"k\">if</span> <span class=\"k\">(</span>spanParent<span class=\"k\">.</span>tagName <span class=\"k\">==</span> <span class=\"s\">'SPAN'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                                            <span class=\"c\">//opera&#21512;&#24182;style&#19981;&#20250;&#21152;&#20837;\";\"</span>","                                            span<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText <span class=\"k\">=</span> spanParent<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText <span class=\"k\">+</span> <span class=\"s\">\";\"</span> <span class=\"k\">+</span> span<span class=\"k\">.</span>style<span class=\"k\">.</span>cssText<span class=\"k\">;</span>","                                        <span class=\"k\">}</span>","                                        spanParent <span class=\"k\">=</span> spanParent<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","                                    <span class=\"k\">}</span>","                                <span class=\"k\">}</span>","","","                                <span class=\"k\">if</span> <span class=\"k\">(</span>opera<span class=\"k\">)</span> <span class=\"k\">{</span>","                                    setTimeout<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                                        range<span class=\"k\">.</span>setStart<span class=\"k\">(</span>span<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">).</span>collapse<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","                                        mergesibling<span class=\"k\">(</span>range<span class=\"k\">,</span> cmdName<span class=\"k\">,</span>value<span class=\"k\">);</span>","                                        range<span class=\"k\">.</span>select<span class=\"k\">();</span>","                                    <span class=\"k\">}</span><span class=\"k\">);</span>","                                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                                    range<span class=\"k\">.</span>setStart<span class=\"k\">(</span>span<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">).</span>collapse<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","                                    mergesibling<span class=\"k\">(</span>range<span class=\"k\">,</span>cmdName<span class=\"k\">,</span>value<span class=\"k\">);</span>","                                    range<span class=\"k\">.</span>select<span class=\"k\">();</span>","                                <span class=\"k\">}</span>","","                                <span class=\"c\">//trace:981</span>","                                <span class=\"c\">//domUtils.mergeToParent(span)</span>","                            <span class=\"k\">}</span>","                            domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>text<span class=\"k\">);</span>","                        <span class=\"k\">}</span>","","","                    <span class=\"k\">}</span>","                    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                queryCommandValue<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>cmdName<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> startNode <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>selection<span class=\"k\">.</span>getStart<span class=\"k\">();</span>","","                    <span class=\"c\">//trace:946</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>cmdName <span class=\"k\">==</span> <span class=\"s\">'underline'</span> <span class=\"k\">||</span> cmdName <span class=\"k\">==</span> <span class=\"s\">'strikethrough'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">var</span> tmpNode <span class=\"k\">=</span> startNode<span class=\"k\">,</span> value<span class=\"k\">;</span>","                        <span class=\"k\">while</span> <span class=\"k\">(</span>tmpNode <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>domUtils<span class=\"k\">.</span>isBlockElm<span class=\"k\">(</span>tmpNode<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>domUtils<span class=\"k\">.</span>isBody<span class=\"k\">(</span>tmpNode<span class=\"k\">))</span> <span class=\"k\">{</span>","                            <span class=\"k\">if</span> <span class=\"k\">(</span>tmpNode<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                                value <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getComputedStyle<span class=\"k\">(</span>tmpNode<span class=\"k\">,</span> style<span class=\"k\">);</span>","","                                <span class=\"k\">if</span> <span class=\"k\">(</span>value <span class=\"k\">!=</span> <span class=\"s\">'none'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                                    <span class=\"k\">return</span> value<span class=\"k\">;</span>","                                <span class=\"k\">}</span>","                            <span class=\"k\">}</span>","","                            tmpNode <span class=\"k\">=</span> tmpNode<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        <span class=\"k\">return</span> <span class=\"s\">'none'</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>cmdName <span class=\"k\">==</span> <span class=\"s\">'fontborder'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">var</span> tmp <span class=\"k\">=</span> startNode<span class=\"k\">,</span> val<span class=\"k\">;</span>","                        <span class=\"k\">while</span> <span class=\"k\">(</span>tmp <span class=\"k\">&amp;&amp;</span> dtd<span class=\"k\">.</span>$inline<span class=\"k\">[</span>tmp<span class=\"k\">.</span>tagName<span class=\"k\">])</span> <span class=\"k\">{</span>","                            <span class=\"k\">if</span> <span class=\"k\">(</span>val <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getComputedStyle<span class=\"k\">(</span>tmp<span class=\"k\">,</span> <span class=\"s\">'border'</span><span class=\"k\">))</span> <span class=\"k\">{</span>","                                <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"s\">/1px/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>val<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"s\">/solid/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>val<span class=\"k\">))</span> <span class=\"k\">{</span>","                                    <span class=\"k\">return</span> val<span class=\"k\">;</span>","                                <span class=\"k\">}</span>","                            <span class=\"k\">}</span>","                            tmp <span class=\"k\">=</span> tmp<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        <span class=\"k\">return</span> <span class=\"s\">''</span>","                    <span class=\"k\">}</span>","","                    <span class=\"k\">if</span><span class=\"k\">(</span> cmdName <span class=\"k\">==</span> <span class=\"s\">'FontSize'</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">var</span> styleVal <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getComputedStyle<span class=\"k\">(</span>startNode<span class=\"k\">,</span> style<span class=\"k\">),</span>","                            tmp <span class=\"k\">=</span> <span class=\"s\">/^([\\d\\.]+)(\\w+)$/</span><span class=\"k\">.</span>exec<span class=\"k\">(</span> styleVal <span class=\"k\">);</span>","","                        <span class=\"k\">if</span><span class=\"k\">(</span> tmp <span class=\"k\">)</span> <span class=\"k\">{</span>","","                            <span class=\"k\">return</span> Math<span class=\"k\">.</span>floor<span class=\"k\">(</span> tmp<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">+</span> tmp<span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">];</span>","","                        <span class=\"k\">}</span>","","                        <span class=\"k\">return</span> styleVal<span class=\"k\">;</span>","","                    <span class=\"k\">}</span>","","                    <span class=\"k\">return</span>  domUtils<span class=\"k\">.</span>getComputedStyle<span class=\"k\">(</span>startNode<span class=\"k\">,</span> style<span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                queryCommandState<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>cmdName<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(!</span>needCmd<span class=\"k\">[</span>cmdName<span class=\"k\">])</span>","                        <span class=\"k\">return</span> <span class=\"s\">0</span><span class=\"k\">;</span>","                    <span class=\"k\">var</span> val <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>queryCommandValue<span class=\"k\">(</span>cmdName<span class=\"k\">);</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>cmdName <span class=\"k\">==</span> <span class=\"s\">'fontborder'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span> <span class=\"s\">/1px/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>val<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"s\">/solid/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>val<span class=\"k\">)</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span>  val <span class=\"k\">==</span> <span class=\"k\">(</span>cmdName <span class=\"k\">==</span> <span class=\"s\">'underline'</span> <span class=\"k\">?</span>","                            <span class=\"s\">'underline'</span> <span class=\"k\">:</span> <span class=\"s\">'line-through'</span><span class=\"k\">);</span>","                    <span class=\"k\">}</span>","","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">)(</span>p<span class=\"k\">,</span> fonts<span class=\"k\">[</span>p<span class=\"k\">]);</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>"];
_$jscoverage['plugins/font.js'][197]++;
UE.plugins.font = (function () {
  _$jscoverage['plugins/font.js'][198]++;
  var me = this, fonts = {"forecolor": "color", "backcolor": "background-color", "fontsize": "font-size", "fontfamily": "font-family", "underline": "text-decoration", "strikethrough": "text-decoration", "fontborder": "border"}, needCmd = {"underline": 1, "strikethrough": 1, "fontborder": 1}, needSetChild = {"forecolor": "color", "backcolor": "background-color", "fontsize": "font-size", "fontfamily": "font-family"};
  _$jscoverage['plugins/font.js'][216]++;
  me.setOpt({"fontfamily": [{name: "songti", val: "\u5b8b\u4f53,SimSun"}, {name: "yahei", val: "\u5fae\u8f6f\u96c5\u9ed1,Microsoft YaHei"}, {name: "kaiti", val: "\u6977\u4f53,\u6977\u4f53_GB2312, SimKai"}, {name: "heiti", val: "\u9ed1\u4f53, SimHei"}, {name: "lishu", val: "\u96b6\u4e66, SimLi"}, {name: "andaleMono", val: "andale mono"}, {name: "arial", val: "arial, helvetica,sans-serif"}, {name: "arialBlack", val: "arial black,avant garde"}, {name: "comicSansMs", val: "comic sans ms"}, {name: "impact", val: "impact,chicago"}, {name: "timesNewRoman", val: "times new roman"}], "fontsize": [10, 11, 12, 14, 16, 18, 20, 24, 36]});
  _$jscoverage['plugins/font.js'][233]++;
  function mergeWithParent(node) {
    _$jscoverage['plugins/font.js'][234]++;
    var parent;
    _$jscoverage['plugins/font.js'][235]++;
    while ((parent = node.parentNode)) {
      _$jscoverage['plugins/font.js'][236]++;
      if (((parent.tagName == "SPAN") && (domUtils.getChildCount(parent, (function (child) {
  _$jscoverage['plugins/font.js'][237]++;
  return ((! domUtils.isBookmarkNode(child)) && (! domUtils.isBr(child)));
})) == 1))) {
        _$jscoverage['plugins/font.js'][239]++;
        parent.style.cssText += node.style.cssText;
        _$jscoverage['plugins/font.js'][240]++;
        domUtils.remove(node, true);
        _$jscoverage['plugins/font.js'][241]++;
        node = parent;
      }
      else {
        _$jscoverage['plugins/font.js'][244]++;
        break;
      }
}
}
  _$jscoverage['plugins/font.js'][249]++;
  function mergeChild(rng, cmdName, value) {
    _$jscoverage['plugins/font.js'][250]++;
    if (needSetChild[cmdName]) {
      _$jscoverage['plugins/font.js'][251]++;
      rng.adjustmentBoundary();
      _$jscoverage['plugins/font.js'][252]++;
      if (((! rng.collapsed) && (rng.startContainer.nodeType == 1))) {
        _$jscoverage['plugins/font.js'][253]++;
        var start = rng.startContainer.childNodes[rng.startOffset];
        _$jscoverage['plugins/font.js'][254]++;
        if ((start && domUtils.isTagNode(start, "span"))) {
          _$jscoverage['plugins/font.js'][255]++;
          var bk = rng.createBookmark();
          _$jscoverage['plugins/font.js'][256]++;
          utils.each(domUtils.getElementsByTagName(start, "span"), (function (span) {
  _$jscoverage['plugins/font.js'][257]++;
  if (((! span.parentNode) || domUtils.isBookmarkNode(span))) {
    _$jscoverage['plugins/font.js'][257]++;
    return;
  }
  _$jscoverage['plugins/font.js'][258]++;
  if (((cmdName == "backcolor") && (domUtils.getComputedStyle(span, "background-color").toLowerCase() === value))) {
    _$jscoverage['plugins/font.js'][259]++;
    return;
  }
  _$jscoverage['plugins/font.js'][261]++;
  domUtils.removeStyle(span, needSetChild[cmdName]);
  _$jscoverage['plugins/font.js'][262]++;
  if ((span.style.cssText.replace(/^\s+$/, "").length == 0)) {
    _$jscoverage['plugins/font.js'][263]++;
    domUtils.remove(span, true);
  }
}));
          _$jscoverage['plugins/font.js'][266]++;
          rng.moveToBookmark(bk);
        }
      }
    }
}
  _$jscoverage['plugins/font.js'][272]++;
  function mergesibling(rng, cmdName, value) {
    _$jscoverage['plugins/font.js'][273]++;
    var collapsed = rng.collapsed, bk = rng.createBookmark(), common;
    _$jscoverage['plugins/font.js'][275]++;
    if (collapsed) {
      _$jscoverage['plugins/font.js'][276]++;
      common = bk.start.parentNode;
      _$jscoverage['plugins/font.js'][277]++;
      while (dtd.$inline[common.tagName]) {
        _$jscoverage['plugins/font.js'][278]++;
        common = common.parentNode;
}
    }
    else {
      _$jscoverage['plugins/font.js'][281]++;
      common = domUtils.getCommonAncestor(bk.start, bk.end);
    }
    _$jscoverage['plugins/font.js'][283]++;
    utils.each(domUtils.getElementsByTagName(common, "span"), (function (span) {
  _$jscoverage['plugins/font.js'][284]++;
  if (((! span.parentNode) || domUtils.isBookmarkNode(span))) {
    _$jscoverage['plugins/font.js'][284]++;
    return;
  }
  _$jscoverage['plugins/font.js'][285]++;
  if (/\s*border\s*:\s*none;?\s*/i.test(span.style.cssText)) {
    _$jscoverage['plugins/font.js'][286]++;
    if (/^\s*border\s*:\s*none;?\s*$/.test(span.style.cssText)) {
      _$jscoverage['plugins/font.js'][287]++;
      domUtils.remove(span, true);
    }
    else {
      _$jscoverage['plugins/font.js'][289]++;
      domUtils.removeStyle(span, "border");
    }
    _$jscoverage['plugins/font.js'][291]++;
    return;
  }
  _$jscoverage['plugins/font.js'][293]++;
  if ((/border/i.test(span.style.cssText) && (span.parentNode.tagName == "SPAN") && /border/i.test(span.parentNode.style.cssText))) {
    _$jscoverage['plugins/font.js'][294]++;
    span.style.cssText = span.style.cssText.replace(/border[^:]*:[^;]+;?/gi, "");
  }
  _$jscoverage['plugins/font.js'][296]++;
  if ((! ((cmdName == "fontborder") && (value == "none")))) {
    _$jscoverage['plugins/font.js'][297]++;
    var next = span.nextSibling;
    _$jscoverage['plugins/font.js'][298]++;
    while ((next && (next.nodeType == 1) && (next.tagName == "SPAN"))) {
      _$jscoverage['plugins/font.js'][299]++;
      if ((domUtils.isBookmarkNode(next) && (cmdName == "fontborder"))) {
        _$jscoverage['plugins/font.js'][300]++;
        span.appendChild(next);
        _$jscoverage['plugins/font.js'][301]++;
        next = span.nextSibling;
        _$jscoverage['plugins/font.js'][302]++;
        continue;
      }
      _$jscoverage['plugins/font.js'][304]++;
      if ((next.style.cssText == span.style.cssText)) {
        _$jscoverage['plugins/font.js'][305]++;
        domUtils.moveChild(next, span);
        _$jscoverage['plugins/font.js'][306]++;
        domUtils.remove(next);
      }
      _$jscoverage['plugins/font.js'][308]++;
      if ((span.nextSibling === next)) {
        _$jscoverage['plugins/font.js'][309]++;
        break;
      }
      _$jscoverage['plugins/font.js'][310]++;
      next = span.nextSibling;
}
  }
  _$jscoverage['plugins/font.js'][315]++;
  mergeWithParent(span);
  _$jscoverage['plugins/font.js'][316]++;
  if ((browser.ie && (browser.version > 8))) {
    _$jscoverage['plugins/font.js'][318]++;
    var parent = domUtils.findParent(span, (function (n) {
  _$jscoverage['plugins/font.js'][318]++;
  return ((n.tagName == "SPAN") && /background-color/.test(n.style.cssText));
}));
    _$jscoverage['plugins/font.js'][319]++;
    if ((parent && (! /background-color/.test(span.style.cssText)))) {
      _$jscoverage['plugins/font.js'][320]++;
      span.style.backgroundColor = parent.style.backgroundColor;
    }
  }
}));
    _$jscoverage['plugins/font.js'][325]++;
    rng.moveToBookmark(bk);
    _$jscoverage['plugins/font.js'][326]++;
    mergeChild(rng, cmdName, value);
}
  _$jscoverage['plugins/font.js'][329]++;
  me.addInputRule((function (root) {
  _$jscoverage['plugins/font.js'][330]++;
  utils.each(root.getNodesByTagName("u s del font strike"), (function (node) {
  _$jscoverage['plugins/font.js'][331]++;
  if ((node.tagName == "font")) {
    _$jscoverage['plugins/font.js'][332]++;
    var cssStyle = [];
    _$jscoverage['plugins/font.js'][333]++;
    for (var p in node.attrs) {
      _$jscoverage['plugins/font.js'][334]++;
      switch (p) {
      case "size":
        _$jscoverage['plugins/font.js'][336]++;
        cssStyle.push(("font-size:" + node.attrs[p] + "px"));
        _$jscoverage['plugins/font.js'][337]++;
        break;
      case "color":
        _$jscoverage['plugins/font.js'][339]++;
        cssStyle.push(("color:" + node.attrs[p]));
        _$jscoverage['plugins/font.js'][340]++;
        break;
      case "face":
        _$jscoverage['plugins/font.js'][342]++;
        cssStyle.push(("font-family:" + node.attrs[p]));
        _$jscoverage['plugins/font.js'][343]++;
        break;
      case "style":
        _$jscoverage['plugins/font.js'][345]++;
        cssStyle.push(node.attrs[p]);
      }
}
    _$jscoverage['plugins/font.js'][348]++;
    node.attrs = {"style": cssStyle.join(";")};
  }
  else {
    _$jscoverage['plugins/font.js'][352]++;
    var val = ((node.tagName == "u")? "underline": "line-through");
    _$jscoverage['plugins/font.js'][353]++;
    node.attrs = {"style": ((node.getAttr("style") || "") + "text-decoration:" + val + ";")};
  }
  _$jscoverage['plugins/font.js'][357]++;
  node.tagName = "span";
}));
}));
  _$jscoverage['plugins/font.js'][409]++;
  for (var p in fonts) {
    _$jscoverage['plugins/font.js'][410]++;
    (function (cmd, style) {
  _$jscoverage['plugins/font.js'][411]++;
  UE.commands[cmd] = {execCommand: (function (cmdName, value) {
  _$jscoverage['plugins/font.js'][413]++;
  value = (value || (this.queryCommandState(cmdName)? "none": ((cmdName == "underline")? "underline": ((cmdName == "fontborder")? "1px solid #000": "line-through"))));
  _$jscoverage['plugins/font.js'][416]++;
  var me = this, range = this.selection.getRange(), text;
  _$jscoverage['plugins/font.js'][420]++;
  if ((value == "default")) {
    _$jscoverage['plugins/font.js'][422]++;
    if (range.collapsed) {
      _$jscoverage['plugins/font.js'][423]++;
      text = me.document.createTextNode("font");
      _$jscoverage['plugins/font.js'][424]++;
      range.insertNode(text).select();
    }
    _$jscoverage['plugins/font.js'][427]++;
    me.execCommand("removeFormat", "span,a", style);
    _$jscoverage['plugins/font.js'][428]++;
    if (text) {
      _$jscoverage['plugins/font.js'][429]++;
      range.setStartBefore(text).collapse(true);
      _$jscoverage['plugins/font.js'][430]++;
      domUtils.remove(text);
    }
    _$jscoverage['plugins/font.js'][432]++;
    mergesibling(range, cmdName, value);
    _$jscoverage['plugins/font.js'][433]++;
    range.select();
  }
  else {
    _$jscoverage['plugins/font.js'][435]++;
    if ((! range.collapsed)) {
      _$jscoverage['plugins/font.js'][436]++;
      if ((needCmd[cmd] && me.queryCommandValue(cmd))) {
        _$jscoverage['plugins/font.js'][437]++;
        me.execCommand("removeFormat", "span,a", style);
      }
      _$jscoverage['plugins/font.js'][439]++;
      range = me.selection.getRange();
      _$jscoverage['plugins/font.js'][441]++;
      range.applyInlineStyle("span", {"style": (style + ":" + value)});
      _$jscoverage['plugins/font.js'][442]++;
      mergesibling(range, cmdName, value);
      _$jscoverage['plugins/font.js'][443]++;
      range.select();
    }
    else {
      _$jscoverage['plugins/font.js'][446]++;
      var span = domUtils.findParentByTagName(range.startContainer, "span", true);
      _$jscoverage['plugins/font.js'][447]++;
      text = me.document.createTextNode("font");
      _$jscoverage['plugins/font.js'][448]++;
      if ((span && (! span.children.length) && (! span[(browser.ie? "innerText": "textContent")].replace(fillCharReg, "").length))) {
        _$jscoverage['plugins/font.js'][450]++;
        range.insertNode(text);
        _$jscoverage['plugins/font.js'][451]++;
        if (needCmd[cmd]) {
          _$jscoverage['plugins/font.js'][452]++;
          range.selectNode(text).select();
          _$jscoverage['plugins/font.js'][453]++;
          me.execCommand("removeFormat", "span,a", style, null);
          _$jscoverage['plugins/font.js'][455]++;
          span = domUtils.findParentByTagName(text, "span", true);
          _$jscoverage['plugins/font.js'][456]++;
          range.setStartBefore(text);
        }
        _$jscoverage['plugins/font.js'][459]++;
        (span && (span.style.cssText += (";" + style + ":" + value)));
        _$jscoverage['plugins/font.js'][460]++;
        range.collapse(true).select();
      }
      else {
        _$jscoverage['plugins/font.js'][464]++;
        range.insertNode(text);
        _$jscoverage['plugins/font.js'][465]++;
        range.selectNode(text).select();
        _$jscoverage['plugins/font.js'][466]++;
        span = range.document.createElement("span");
        _$jscoverage['plugins/font.js'][468]++;
        if (needCmd[cmd]) {
          _$jscoverage['plugins/font.js'][470]++;
          if (domUtils.findParentByTagName(text, "a", true)) {
            _$jscoverage['plugins/font.js'][471]++;
            range.setStartBefore(text).setCursor();
            _$jscoverage['plugins/font.js'][472]++;
            domUtils.remove(text);
            _$jscoverage['plugins/font.js'][473]++;
            return;
          }
          _$jscoverage['plugins/font.js'][475]++;
          me.execCommand("removeFormat", "span,a", style);
        }
        _$jscoverage['plugins/font.js'][478]++;
        span.style.cssText = (style + ":" + value);
        _$jscoverage['plugins/font.js'][481]++;
        text.parentNode.insertBefore(span, text);
        _$jscoverage['plugins/font.js'][483]++;
        if (((! browser.ie) || (browser.ie && (browser.version == 9)))) {
          _$jscoverage['plugins/font.js'][484]++;
          var spanParent = span.parentNode;
          _$jscoverage['plugins/font.js'][485]++;
          while ((! domUtils.isBlockElm(spanParent))) {
            _$jscoverage['plugins/font.js'][486]++;
            if ((spanParent.tagName == "SPAN")) {
              _$jscoverage['plugins/font.js'][488]++;
              span.style.cssText = (spanParent.style.cssText + ";" + span.style.cssText);
            }
            _$jscoverage['plugins/font.js'][490]++;
            spanParent = spanParent.parentNode;
}
        }
        _$jscoverage['plugins/font.js'][495]++;
        if (opera) {
          _$jscoverage['plugins/font.js'][496]++;
          setTimeout((function () {
  _$jscoverage['plugins/font.js'][497]++;
  range.setStart(span, 0).collapse(true);
  _$jscoverage['plugins/font.js'][498]++;
  mergesibling(range, cmdName, value);
  _$jscoverage['plugins/font.js'][499]++;
  range.select();
}));
        }
        else {
          _$jscoverage['plugins/font.js'][502]++;
          range.setStart(span, 0).collapse(true);
          _$jscoverage['plugins/font.js'][503]++;
          mergesibling(range, cmdName, value);
          _$jscoverage['plugins/font.js'][504]++;
          range.select();
        }
      }
      _$jscoverage['plugins/font.js'][510]++;
      domUtils.remove(text);
    }
  }
  _$jscoverage['plugins/font.js'][515]++;
  return true;
}), queryCommandValue: (function (cmdName) {
  _$jscoverage['plugins/font.js'][518]++;
  var startNode = this.selection.getStart();
  _$jscoverage['plugins/font.js'][521]++;
  if (((cmdName == "underline") || (cmdName == "strikethrough"))) {
    _$jscoverage['plugins/font.js'][522]++;
    var tmpNode = startNode, value;
    _$jscoverage['plugins/font.js'][523]++;
    while ((tmpNode && (! domUtils.isBlockElm(tmpNode)) && (! domUtils.isBody(tmpNode)))) {
      _$jscoverage['plugins/font.js'][524]++;
      if ((tmpNode.nodeType == 1)) {
        _$jscoverage['plugins/font.js'][525]++;
        value = domUtils.getComputedStyle(tmpNode, style);
        _$jscoverage['plugins/font.js'][527]++;
        if ((value != "none")) {
          _$jscoverage['plugins/font.js'][528]++;
          return value;
        }
      }
      _$jscoverage['plugins/font.js'][532]++;
      tmpNode = tmpNode.parentNode;
}
    _$jscoverage['plugins/font.js'][534]++;
    return "none";
  }
  _$jscoverage['plugins/font.js'][536]++;
  if ((cmdName == "fontborder")) {
    _$jscoverage['plugins/font.js'][537]++;
    var tmp = startNode, val;
    _$jscoverage['plugins/font.js'][538]++;
    while ((tmp && dtd.$inline[tmp.tagName])) {
      _$jscoverage['plugins/font.js'][539]++;
      if ((val = domUtils.getComputedStyle(tmp, "border"))) {
        _$jscoverage['plugins/font.js'][540]++;
        if ((/1px/.test(val) && /solid/.test(val))) {
          _$jscoverage['plugins/font.js'][541]++;
          return val;
        }
      }
      _$jscoverage['plugins/font.js'][544]++;
      tmp = tmp.parentNode;
}
    _$jscoverage['plugins/font.js'][546]++;
    return "";
  }
  _$jscoverage['plugins/font.js'][549]++;
  if ((cmdName == "FontSize")) {
    _$jscoverage['plugins/font.js'][550]++;
    var styleVal = domUtils.getComputedStyle(startNode, style), tmp = /^([\d\.]+)(\w+)$/.exec(styleVal);
    _$jscoverage['plugins/font.js'][553]++;
    if (tmp) {
      _$jscoverage['plugins/font.js'][555]++;
      return (Math.floor(tmp[1]) + tmp[2]);
    }
    _$jscoverage['plugins/font.js'][559]++;
    return styleVal;
  }
  _$jscoverage['plugins/font.js'][563]++;
  return domUtils.getComputedStyle(startNode, style);
}), queryCommandState: (function (cmdName) {
  _$jscoverage['plugins/font.js'][566]++;
  if ((! needCmd[cmdName])) {
    _$jscoverage['plugins/font.js'][567]++;
    return 0;
  }
  _$jscoverage['plugins/font.js'][568]++;
  var val = this.queryCommandValue(cmdName);
  _$jscoverage['plugins/font.js'][569]++;
  if ((cmdName == "fontborder")) {
    _$jscoverage['plugins/font.js'][570]++;
    return (/1px/.test(val) && /solid/.test(val));
  }
  else {
    _$jscoverage['plugins/font.js'][572]++;
    return (val == ((cmdName == "underline")? "underline": "line-through"));
  }
})};
})(p, fonts[p]);
}
});
