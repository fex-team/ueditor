/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['plugins/blockquote.js']) {
  _$jscoverage['plugins/blockquote.js'] = [];
  _$jscoverage['plugins/blockquote.js'][44] = 0;
  _$jscoverage['plugins/blockquote.js'][45] = 0;
  _$jscoverage['plugins/blockquote.js'][46] = 0;
  _$jscoverage['plugins/blockquote.js'][47] = 0;
  _$jscoverage['plugins/blockquote.js'][49] = 0;
  _$jscoverage['plugins/blockquote.js'][51] = 0;
  _$jscoverage['plugins/blockquote.js'][56] = 0;
  _$jscoverage['plugins/blockquote.js'][58] = 0;
  _$jscoverage['plugins/blockquote.js'][59] = 0;
  _$jscoverage['plugins/blockquote.js'][62] = 0;
  _$jscoverage['plugins/blockquote.js'][65] = 0;
  _$jscoverage['plugins/blockquote.js'][66] = 0;
  _$jscoverage['plugins/blockquote.js'][69] = 0;
  _$jscoverage['plugins/blockquote.js'][70] = 0;
  _$jscoverage['plugins/blockquote.js'][72] = 0;
  _$jscoverage['plugins/blockquote.js'][75] = 0;
  _$jscoverage['plugins/blockquote.js'][76] = 0;
  _$jscoverage['plugins/blockquote.js'][77] = 0;
  _$jscoverage['plugins/blockquote.js'][78] = 0;
  _$jscoverage['plugins/blockquote.js'][79] = 0;
  _$jscoverage['plugins/blockquote.js'][81] = 0;
  _$jscoverage['plugins/blockquote.js'][87] = 0;
  _$jscoverage['plugins/blockquote.js'][88] = 0;
  _$jscoverage['plugins/blockquote.js'][89] = 0;
  _$jscoverage['plugins/blockquote.js'][90] = 0;
  _$jscoverage['plugins/blockquote.js'][91] = 0;
  _$jscoverage['plugins/blockquote.js'][92] = 0;
  _$jscoverage['plugins/blockquote.js'][101] = 0;
  _$jscoverage['plugins/blockquote.js'][107] = 0;
  _$jscoverage['plugins/blockquote.js'][108] = 0;
  _$jscoverage['plugins/blockquote.js'][109] = 0;
  _$jscoverage['plugins/blockquote.js'][110] = 0;
  _$jscoverage['plugins/blockquote.js'][111] = 0;
  _$jscoverage['plugins/blockquote.js'][112] = 0;
  _$jscoverage['plugins/blockquote.js'][114] = 0;
  _$jscoverage['plugins/blockquote.js'][117] = 0;
  _$jscoverage['plugins/blockquote.js'][120] = 0;
  _$jscoverage['plugins/blockquote.js'][122] = 0;
  _$jscoverage['plugins/blockquote.js'][123] = 0;
  _$jscoverage['plugins/blockquote.js'][124] = 0;
  _$jscoverage['plugins/blockquote.js'][126] = 0;
  _$jscoverage['plugins/blockquote.js'][128] = 0;
  _$jscoverage['plugins/blockquote.js'][131] = 0;
  _$jscoverage['plugins/blockquote.js'][132] = 0;
  _$jscoverage['plugins/blockquote.js'][136] = 0;
  _$jscoverage['plugins/blockquote.js'][137] = 0;
  _$jscoverage['plugins/blockquote.js'][138] = 0;
  _$jscoverage['plugins/blockquote.js'][140] = 0;
  _$jscoverage['plugins/blockquote.js'][141] = 0;
  _$jscoverage['plugins/blockquote.js'][143] = 0;
  _$jscoverage['plugins/blockquote.js'][146] = 0;
  _$jscoverage['plugins/blockquote.js'][149] = 0;
  _$jscoverage['plugins/blockquote.js'][151] = 0;
  _$jscoverage['plugins/blockquote.js'][152] = 0;
  _$jscoverage['plugins/blockquote.js'][153] = 0;
  _$jscoverage['plugins/blockquote.js'][156] = 0;
  _$jscoverage['plugins/blockquote.js'][157] = 0;
  _$jscoverage['plugins/blockquote.js'][163] = 0;
  _$jscoverage['plugins/blockquote.js'][164] = 0;
  _$jscoverage['plugins/blockquote.js'][165] = 0;
  _$jscoverage['plugins/blockquote.js'][166] = 0;
  _$jscoverage['plugins/blockquote.js'][168] = 0;
  _$jscoverage['plugins/blockquote.js'][169] = 0;
  _$jscoverage['plugins/blockquote.js'][170] = 0;
  _$jscoverage['plugins/blockquote.js'][171] = 0;
  _$jscoverage['plugins/blockquote.js'][176] = 0;
  _$jscoverage['plugins/blockquote.js'][179] = 0;
}
_$jscoverage['plugins/blockquote.js'].source = ["<span class=\"c\">/**</span>","<span class=\"c\"> * &#28155;&#21152;&#24341;&#29992;</span>","<span class=\"c\"> * @file</span>","<span class=\"c\"> * @since 1.2.6.1</span>","<span class=\"c\"> */</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * &#26681;&#25454;&#36873;&#21306;&#20301;&#32622;&#23545;&#26631;&#31614;&#28155;&#21152;&#24341;&#29992;</span>","<span class=\"c\"> * @command blockquote</span>","<span class=\"c\"> * @method execCommand</span>","<span class=\"c\"> * @param { String } cmd &#21629;&#20196;&#23383;&#31526;&#20018;</span>","<span class=\"c\"> * @example</span>","<span class=\"c\"> * ```javascript</span>","<span class=\"c\"> * editor.execCommand( 'blockquote' );</span>","<span class=\"c\"> * ```</span>","<span class=\"c\"> */</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * &#26681;&#25454;&#36873;&#21306;&#20301;&#32622;&#23545;&#26631;&#31614;&#28155;&#21152;&#24341;&#29992;</span>","<span class=\"c\"> * @command blockquote</span>","<span class=\"c\"> * @method execCommand</span>","<span class=\"c\"> * @param { String } cmd &#21629;&#20196;&#23383;&#31526;&#20018;</span>","<span class=\"c\"> * @param { Object } attrs &#33410;&#28857;&#23646;&#24615;</span>","<span class=\"c\"> * @example</span>","<span class=\"c\"> * ```javascript</span>","<span class=\"c\"> * editor.execCommand( 'blockquote',{</span>","<span class=\"c\"> *     color:'#000'</span>","<span class=\"c\"> * } );</span>","<span class=\"c\"> * ```</span>","<span class=\"c\"> */</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * &#36820;&#22238;&#24403;&#21069;&#36873;&#21306;&#20301;&#32622;&#26159;&#21542;&#22312;&#24341;&#29992;&#26631;&#31614;&#20869;</span>","<span class=\"c\"> * @command blockquote</span>","<span class=\"c\"> * @method queryCommandState</span>","<span class=\"c\"> * @param { String } cmd &#21629;&#20196;&#23383;&#31526;&#20018;</span>","<span class=\"c\"> * @return { int } 0&#20026;&#26159;&#65292;-1&#20026;&#19981;&#26159;</span>","<span class=\"c\"> * @example</span>","<span class=\"c\"> * ```javascript</span>","<span class=\"c\"> * editor.queryCommandState( 'blockquote' );</span>","<span class=\"c\"> * ```</span>","<span class=\"c\"> */</span>","","UE<span class=\"k\">.</span>plugins<span class=\"k\">[</span><span class=\"s\">'blockquote'</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","    <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    <span class=\"k\">function</span> getObj<span class=\"k\">(</span>editor<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> domUtils<span class=\"k\">.</span>filterNodeList<span class=\"k\">(</span>editor<span class=\"k\">.</span>selection<span class=\"k\">.</span>getStartElementPath<span class=\"k\">(),</span><span class=\"s\">'blockquote'</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","    me<span class=\"k\">.</span>commands<span class=\"k\">[</span><span class=\"s\">'blockquote'</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","        execCommand <span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> cmdName<span class=\"k\">,</span> attrs <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> range <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>selection<span class=\"k\">.</span>getRange<span class=\"k\">(),</span>","                obj <span class=\"k\">=</span> getObj<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">),</span>","                blockquote <span class=\"k\">=</span> dtd<span class=\"k\">.</span>blockquote<span class=\"k\">,</span>","                bookmark <span class=\"k\">=</span> range<span class=\"k\">.</span>createBookmark<span class=\"k\">();</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span> obj <span class=\"k\">)</span> <span class=\"k\">{</span>","","                    <span class=\"k\">var</span> start <span class=\"k\">=</span> range<span class=\"k\">.</span>startContainer<span class=\"k\">,</span>","                        startBlock <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>isBlockElm<span class=\"k\">(</span>start<span class=\"k\">)</span> <span class=\"k\">?</span> start <span class=\"k\">:</span> domUtils<span class=\"k\">.</span>findParent<span class=\"k\">(</span>start<span class=\"k\">,</span><span class=\"k\">function</span><span class=\"k\">(</span>node<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span> domUtils<span class=\"k\">.</span>isBlockElm<span class=\"k\">(</span>node<span class=\"k\">)</span><span class=\"k\">}</span><span class=\"k\">),</span>","","                        end <span class=\"k\">=</span> range<span class=\"k\">.</span>endContainer<span class=\"k\">,</span>","                        endBlock <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>isBlockElm<span class=\"k\">(</span>end<span class=\"k\">)</span> <span class=\"k\">?</span> end <span class=\"k\">:</span>  domUtils<span class=\"k\">.</span>findParent<span class=\"k\">(</span>end<span class=\"k\">,</span><span class=\"k\">function</span><span class=\"k\">(</span>node<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span> domUtils<span class=\"k\">.</span>isBlockElm<span class=\"k\">(</span>node<span class=\"k\">)</span><span class=\"k\">}</span><span class=\"k\">);</span>","","                    <span class=\"c\">//&#22788;&#29702;&#19968;&#19979;li</span>","                    startBlock <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>findParentByTagName<span class=\"k\">(</span>startBlock<span class=\"k\">,</span><span class=\"s\">'li'</span><span class=\"k\">,</span><span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">||</span> startBlock<span class=\"k\">;</span>","                    endBlock <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>findParentByTagName<span class=\"k\">(</span>endBlock<span class=\"k\">,</span><span class=\"s\">'li'</span><span class=\"k\">,</span><span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">||</span> endBlock<span class=\"k\">;</span>","","","                    <span class=\"k\">if</span><span class=\"k\">(</span>startBlock<span class=\"k\">.</span>tagName <span class=\"k\">==</span> <span class=\"s\">'LI'</span> <span class=\"k\">||</span> startBlock<span class=\"k\">.</span>tagName <span class=\"k\">==</span> <span class=\"s\">'TD'</span> <span class=\"k\">||</span> startBlock <span class=\"k\">===</span> obj <span class=\"k\">||</span> domUtils<span class=\"k\">.</span>isBody<span class=\"k\">(</span>startBlock<span class=\"k\">))</span><span class=\"k\">{</span>","                        domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>obj<span class=\"k\">,</span><span class=\"k\">true</span><span class=\"k\">);</span>","                    <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                        domUtils<span class=\"k\">.</span>breakParent<span class=\"k\">(</span>startBlock<span class=\"k\">,</span>obj<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","","                    <span class=\"k\">if</span><span class=\"k\">(</span>startBlock <span class=\"k\">!==</span> endBlock<span class=\"k\">)</span><span class=\"k\">{</span>","                        obj <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>findParentByTagName<span class=\"k\">(</span>endBlock<span class=\"k\">,</span><span class=\"s\">'blockquote'</span><span class=\"k\">);</span>","                        <span class=\"k\">if</span><span class=\"k\">(</span>obj<span class=\"k\">)</span><span class=\"k\">{</span>","                            <span class=\"k\">if</span><span class=\"k\">(</span>endBlock<span class=\"k\">.</span>tagName <span class=\"k\">==</span> <span class=\"s\">'LI'</span> <span class=\"k\">||</span> endBlock<span class=\"k\">.</span>tagName <span class=\"k\">==</span> <span class=\"s\">'TD'</span><span class=\"k\">||</span> domUtils<span class=\"k\">.</span>isBody<span class=\"k\">(</span>endBlock<span class=\"k\">))</span><span class=\"k\">{</span>","                                obj<span class=\"k\">.</span>parentNode <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>obj<span class=\"k\">,</span><span class=\"k\">true</span><span class=\"k\">);</span>","                            <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                                domUtils<span class=\"k\">.</span>breakParent<span class=\"k\">(</span>endBlock<span class=\"k\">,</span>obj<span class=\"k\">);</span>","                            <span class=\"k\">}</span>","","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","","                    <span class=\"k\">var</span> blockquotes <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>document<span class=\"k\">,</span><span class=\"s\">'blockquote'</span><span class=\"k\">);</span>","                    <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span>bi<span class=\"k\">;</span>bi<span class=\"k\">=</span>blockquotes<span class=\"k\">[</span>i<span class=\"k\">++];)</span><span class=\"k\">{</span>","                        <span class=\"k\">if</span><span class=\"k\">(!</span>bi<span class=\"k\">.</span>childNodes<span class=\"k\">.</span>length<span class=\"k\">)</span><span class=\"k\">{</span>","                            domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>bi<span class=\"k\">);</span>","                        <span class=\"k\">}</span><span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span>domUtils<span class=\"k\">.</span>getPosition<span class=\"k\">(</span>bi<span class=\"k\">,</span>startBlock<span class=\"k\">)&amp;</span>domUtils<span class=\"k\">.</span>POSITION_FOLLOWING <span class=\"k\">&amp;&amp;</span> domUtils<span class=\"k\">.</span>getPosition<span class=\"k\">(</span>bi<span class=\"k\">,</span>endBlock<span class=\"k\">)&amp;</span>domUtils<span class=\"k\">.</span>POSITION_PRECEDING<span class=\"k\">)</span><span class=\"k\">{</span>","                            domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>bi<span class=\"k\">,</span><span class=\"k\">true</span><span class=\"k\">);</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","","","","","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","","                <span class=\"k\">var</span> tmpRange <span class=\"k\">=</span> range<span class=\"k\">.</span>cloneRange<span class=\"k\">(),</span>","                    node <span class=\"k\">=</span> tmpRange<span class=\"k\">.</span>startContainer<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span> <span class=\"k\">?</span> tmpRange<span class=\"k\">.</span>startContainer <span class=\"k\">:</span> tmpRange<span class=\"k\">.</span>startContainer<span class=\"k\">.</span>parentNode<span class=\"k\">,</span>","                    preNode <span class=\"k\">=</span> node<span class=\"k\">,</span>","                    doEnd <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","","                <span class=\"c\">//&#35843;&#25972;&#24320;&#22987;</span>","                <span class=\"k\">while</span> <span class=\"k\">(</span> <span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span> domUtils<span class=\"k\">.</span>isBody<span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span> preNode <span class=\"k\">!==</span> node <span class=\"k\">)</span> <span class=\"k\">{</span>","                            <span class=\"k\">if</span> <span class=\"k\">(</span> range<span class=\"k\">.</span>collapsed <span class=\"k\">)</span> <span class=\"k\">{</span>","                                tmpRange<span class=\"k\">.</span>selectNode<span class=\"k\">(</span> preNode <span class=\"k\">);</span>","                                doEnd <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","                            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                                tmpRange<span class=\"k\">.</span>setStartBefore<span class=\"k\">(</span> preNode <span class=\"k\">);</span>","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>","                            tmpRange<span class=\"k\">.</span>setStart<span class=\"k\">(</span>node<span class=\"k\">,</span><span class=\"s\">0</span><span class=\"k\">);</span>","                        <span class=\"k\">}</span>","","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>blockquote<span class=\"k\">[</span>node<span class=\"k\">.</span>tagName<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span> range<span class=\"k\">.</span>collapsed <span class=\"k\">)</span> <span class=\"k\">{</span>","                            tmpRange<span class=\"k\">.</span>selectNode<span class=\"k\">(</span> preNode <span class=\"k\">);</span>","                        <span class=\"k\">}</span> <span class=\"k\">else</span><span class=\"k\">{</span>","                            tmpRange<span class=\"k\">.</span>setStartBefore<span class=\"k\">(</span> preNode<span class=\"k\">);</span>","                        <span class=\"k\">}</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","","                    preNode <span class=\"k\">=</span> node<span class=\"k\">;</span>","                    node <span class=\"k\">=</span> node<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","                <span class=\"k\">}</span>","","                <span class=\"c\">//&#35843;&#25972;&#32467;&#26463;</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span> doEnd <span class=\"k\">)</span> <span class=\"k\">{</span>","                    preNode <span class=\"k\">=</span> node <span class=\"k\">=</span>  node <span class=\"k\">=</span> tmpRange<span class=\"k\">.</span>endContainer<span class=\"k\">.</span>nodeType <span class=\"k\">==</span> <span class=\"s\">1</span> <span class=\"k\">?</span> tmpRange<span class=\"k\">.</span>endContainer <span class=\"k\">:</span> tmpRange<span class=\"k\">.</span>endContainer<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","                    <span class=\"k\">while</span> <span class=\"k\">(</span> <span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","","                        <span class=\"k\">if</span> <span class=\"k\">(</span> domUtils<span class=\"k\">.</span>isBody<span class=\"k\">(</span> node <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                            <span class=\"k\">if</span> <span class=\"k\">(</span> preNode <span class=\"k\">!==</span> node <span class=\"k\">)</span> <span class=\"k\">{</span>","","                                tmpRange<span class=\"k\">.</span>setEndAfter<span class=\"k\">(</span> preNode <span class=\"k\">);</span>","","                            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                                tmpRange<span class=\"k\">.</span>setEnd<span class=\"k\">(</span> node<span class=\"k\">,</span> node<span class=\"k\">.</span>childNodes<span class=\"k\">.</span>length <span class=\"k\">);</span>","                            <span class=\"k\">}</span>","","                            <span class=\"k\">break</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>blockquote<span class=\"k\">[</span>node<span class=\"k\">.</span>tagName<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                            tmpRange<span class=\"k\">.</span>setEndAfter<span class=\"k\">(</span> preNode <span class=\"k\">);</span>","                            <span class=\"k\">break</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","","                        preNode <span class=\"k\">=</span> node<span class=\"k\">;</span>","                        node <span class=\"k\">=</span> node<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","","                <span class=\"k\">}</span>","","","                node <span class=\"k\">=</span> range<span class=\"k\">.</span>document<span class=\"k\">.</span>createElement<span class=\"k\">(</span> <span class=\"s\">'blockquote'</span> <span class=\"k\">);</span>","                domUtils<span class=\"k\">.</span>setAttributes<span class=\"k\">(</span> node<span class=\"k\">,</span> attrs <span class=\"k\">);</span>","                node<span class=\"k\">.</span>appendChild<span class=\"k\">(</span> tmpRange<span class=\"k\">.</span>extractContents<span class=\"k\">()</span> <span class=\"k\">);</span>","                tmpRange<span class=\"k\">.</span>insertNode<span class=\"k\">(</span> node <span class=\"k\">);</span>","                <span class=\"c\">//&#21435;&#38500;&#37325;&#22797;&#30340;</span>","                <span class=\"k\">var</span> childs <span class=\"k\">=</span> domUtils<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span>node<span class=\"k\">,</span><span class=\"s\">'blockquote'</span><span class=\"k\">);</span>","                <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span>ci<span class=\"k\">;</span>ci<span class=\"k\">=</span>childs<span class=\"k\">[</span>i<span class=\"k\">++];)</span><span class=\"k\">{</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>ci<span class=\"k\">.</span>parentNode<span class=\"k\">)</span><span class=\"k\">{</span>","                        domUtils<span class=\"k\">.</span>remove<span class=\"k\">(</span>ci<span class=\"k\">,</span><span class=\"k\">true</span><span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","","            <span class=\"k\">}</span>","            range<span class=\"k\">.</span>moveToBookmark<span class=\"k\">(</span> bookmark <span class=\"k\">).</span>select<span class=\"k\">();</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        queryCommandState <span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> getObj<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">)</span> <span class=\"k\">?</span> <span class=\"s\">1</span> <span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>",""];
_$jscoverage['plugins/blockquote.js'][44]++;
UE.plugins.blockquote = (function () {
  _$jscoverage['plugins/blockquote.js'][45]++;
  var me = this;
  _$jscoverage['plugins/blockquote.js'][46]++;
  function getObj(editor) {
    _$jscoverage['plugins/blockquote.js'][47]++;
    return domUtils.filterNodeList(editor.selection.getStartElementPath(), "blockquote");
}
  _$jscoverage['plugins/blockquote.js'][49]++;
  me.commands.blockquote = {execCommand: (function (cmdName, attrs) {
  _$jscoverage['plugins/blockquote.js'][51]++;
  var range = this.selection.getRange(), obj = getObj(this), blockquote = dtd.blockquote, bookmark = range.createBookmark();
  _$jscoverage['plugins/blockquote.js'][56]++;
  if (obj) {
    _$jscoverage['plugins/blockquote.js'][58]++;
    var start = range.startContainer, startBlock = (domUtils.isBlockElm(start)? start: domUtils.findParent(start, (function (node) {
  _$jscoverage['plugins/blockquote.js'][59]++;
  return domUtils.isBlockElm(node);
}))), end = range.endContainer, endBlock = (domUtils.isBlockElm(end)? end: domUtils.findParent(end, (function (node) {
  _$jscoverage['plugins/blockquote.js'][62]++;
  return domUtils.isBlockElm(node);
})));
    _$jscoverage['plugins/blockquote.js'][65]++;
    startBlock = (domUtils.findParentByTagName(startBlock, "li", true) || startBlock);
    _$jscoverage['plugins/blockquote.js'][66]++;
    endBlock = (domUtils.findParentByTagName(endBlock, "li", true) || endBlock);
    _$jscoverage['plugins/blockquote.js'][69]++;
    if (((startBlock.tagName == "LI") || (startBlock.tagName == "TD") || (startBlock === obj) || domUtils.isBody(startBlock))) {
      _$jscoverage['plugins/blockquote.js'][70]++;
      domUtils.remove(obj, true);
    }
    else {
      _$jscoverage['plugins/blockquote.js'][72]++;
      domUtils.breakParent(startBlock, obj);
    }
    _$jscoverage['plugins/blockquote.js'][75]++;
    if ((startBlock !== endBlock)) {
      _$jscoverage['plugins/blockquote.js'][76]++;
      obj = domUtils.findParentByTagName(endBlock, "blockquote");
      _$jscoverage['plugins/blockquote.js'][77]++;
      if (obj) {
        _$jscoverage['plugins/blockquote.js'][78]++;
        if (((endBlock.tagName == "LI") || (endBlock.tagName == "TD") || domUtils.isBody(endBlock))) {
          _$jscoverage['plugins/blockquote.js'][79]++;
          (obj.parentNode && domUtils.remove(obj, true));
        }
        else {
          _$jscoverage['plugins/blockquote.js'][81]++;
          domUtils.breakParent(endBlock, obj);
        }
      }
    }
    _$jscoverage['plugins/blockquote.js'][87]++;
    var blockquotes = domUtils.getElementsByTagName(this.document, "blockquote");
    _$jscoverage['plugins/blockquote.js'][88]++;
    for (var i = 0, bi; (bi = blockquotes[(i++)]);) {
      _$jscoverage['plugins/blockquote.js'][89]++;
      if ((! bi.childNodes.length)) {
        _$jscoverage['plugins/blockquote.js'][90]++;
        domUtils.remove(bi);
      }
      else {
        _$jscoverage['plugins/blockquote.js'][91]++;
        if (((domUtils.getPosition(bi, startBlock) & domUtils.POSITION_FOLLOWING) && (domUtils.getPosition(bi, endBlock) & domUtils.POSITION_PRECEDING))) {
          _$jscoverage['plugins/blockquote.js'][92]++;
          domUtils.remove(bi, true);
        }
      }
}
  }
  else {
    _$jscoverage['plugins/blockquote.js'][101]++;
    var tmpRange = range.cloneRange(), node = ((tmpRange.startContainer.nodeType == 1)? tmpRange.startContainer: tmpRange.startContainer.parentNode), preNode = node, doEnd = 1;
    _$jscoverage['plugins/blockquote.js'][107]++;
    while (true) {
      _$jscoverage['plugins/blockquote.js'][108]++;
      if (domUtils.isBody(node)) {
        _$jscoverage['plugins/blockquote.js'][109]++;
        if ((preNode !== node)) {
          _$jscoverage['plugins/blockquote.js'][110]++;
          if (range.collapsed) {
            _$jscoverage['plugins/blockquote.js'][111]++;
            tmpRange.selectNode(preNode);
            _$jscoverage['plugins/blockquote.js'][112]++;
            doEnd = 0;
          }
          else {
            _$jscoverage['plugins/blockquote.js'][114]++;
            tmpRange.setStartBefore(preNode);
          }
        }
        else {
          _$jscoverage['plugins/blockquote.js'][117]++;
          tmpRange.setStart(node, 0);
        }
        _$jscoverage['plugins/blockquote.js'][120]++;
        break;
      }
      _$jscoverage['plugins/blockquote.js'][122]++;
      if ((! blockquote[node.tagName])) {
        _$jscoverage['plugins/blockquote.js'][123]++;
        if (range.collapsed) {
          _$jscoverage['plugins/blockquote.js'][124]++;
          tmpRange.selectNode(preNode);
        }
        else {
          _$jscoverage['plugins/blockquote.js'][126]++;
          tmpRange.setStartBefore(preNode);
        }
        _$jscoverage['plugins/blockquote.js'][128]++;
        break;
      }
      _$jscoverage['plugins/blockquote.js'][131]++;
      preNode = node;
      _$jscoverage['plugins/blockquote.js'][132]++;
      node = node.parentNode;
}
    _$jscoverage['plugins/blockquote.js'][136]++;
    if (doEnd) {
      _$jscoverage['plugins/blockquote.js'][137]++;
      preNode = (node = (node = ((tmpRange.endContainer.nodeType == 1)? tmpRange.endContainer: tmpRange.endContainer.parentNode)));
      _$jscoverage['plugins/blockquote.js'][138]++;
      while (true) {
        _$jscoverage['plugins/blockquote.js'][140]++;
        if (domUtils.isBody(node)) {
          _$jscoverage['plugins/blockquote.js'][141]++;
          if ((preNode !== node)) {
            _$jscoverage['plugins/blockquote.js'][143]++;
            tmpRange.setEndAfter(preNode);
          }
          else {
            _$jscoverage['plugins/blockquote.js'][146]++;
            tmpRange.setEnd(node, node.childNodes.length);
          }
          _$jscoverage['plugins/blockquote.js'][149]++;
          break;
        }
        _$jscoverage['plugins/blockquote.js'][151]++;
        if ((! blockquote[node.tagName])) {
          _$jscoverage['plugins/blockquote.js'][152]++;
          tmpRange.setEndAfter(preNode);
          _$jscoverage['plugins/blockquote.js'][153]++;
          break;
        }
        _$jscoverage['plugins/blockquote.js'][156]++;
        preNode = node;
        _$jscoverage['plugins/blockquote.js'][157]++;
        node = node.parentNode;
}
    }
    _$jscoverage['plugins/blockquote.js'][163]++;
    node = range.document.createElement("blockquote");
    _$jscoverage['plugins/blockquote.js'][164]++;
    domUtils.setAttributes(node, attrs);
    _$jscoverage['plugins/blockquote.js'][165]++;
    node.appendChild(tmpRange.extractContents());
    _$jscoverage['plugins/blockquote.js'][166]++;
    tmpRange.insertNode(node);
    _$jscoverage['plugins/blockquote.js'][168]++;
    var childs = domUtils.getElementsByTagName(node, "blockquote");
    _$jscoverage['plugins/blockquote.js'][169]++;
    for (var i = 0, ci; (ci = childs[(i++)]);) {
      _$jscoverage['plugins/blockquote.js'][170]++;
      if (ci.parentNode) {
        _$jscoverage['plugins/blockquote.js'][171]++;
        domUtils.remove(ci, true);
      }
}
  }
  _$jscoverage['plugins/blockquote.js'][176]++;
  range.moveToBookmark(bookmark).select();
}), queryCommandState: (function () {
  _$jscoverage['plugins/blockquote.js'][179]++;
  return (getObj(this)? 1: 0);
})};
});
